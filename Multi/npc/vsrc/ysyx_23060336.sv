// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// external module IFU_COUNTER

module ysyx_23060336_IFU(	// @[src/main/IFU.scala:6:7]
  input         clock,	// @[src/main/IFU.scala:6:7]
                reset,	// @[src/main/IFU.scala:6:7]
                io_axi_arready,	// @[src/main/IFU.scala:7:14]
  output        io_axi_arvalid,	// @[src/main/IFU.scala:7:14]
  output [31:0] io_axi_araddr,	// @[src/main/IFU.scala:7:14]
  output        io_axi_rready,	// @[src/main/IFU.scala:7:14]
  input         io_axi_rvalid,	// @[src/main/IFU.scala:7:14]
  input  [31:0] io_axi_rdata,	// @[src/main/IFU.scala:7:14]
  input         io_ifu_idle,	// @[src/main/IFU.scala:7:14]
  input  [31:0] io_dnpc,	// @[src/main/IFU.scala:7:14]
  output [31:0] io_inst,	// @[src/main/IFU.scala:7:14]
                io_pc,	// @[src/main/IFU.scala:7:14]
                io_ifu_flash_count,	// @[src/main/IFU.scala:7:14]
                io_ifu_psram_count,	// @[src/main/IFU.scala:7:14]
  output [63:0] io_ifu_clk_count,	// @[src/main/IFU.scala:7:14]
                io_ifu_psram_clk,	// @[src/main/IFU.scala:7:14]
                io_ifu_flash_clk,	// @[src/main/IFU.scala:7:14]
  output        io_out_valid	// @[src/main/IFU.scala:7:14]
);

  reg  [31:0] PC;	// @[src/main/IFU.scala:26:22]
  reg  [31:0] finst;	// @[src/main/IFU.scala:27:22]
  reg  [1:0]  state;	// @[src/main/IFU.scala:30:22]
  wire [31:0] io_axi_araddr_0 = reset ? 32'h80000000 : (|state) ? io_dnpc : PC;	// @[src/main/IFU.scala:26:22, :30:22, :31:36, :38:{23,46}]
  wire        io_out_valid_0 = state == 2'h2;	// @[src/main/IFU.scala:6:7, :30:22, :41:20]
  wire        io_axi_arvalid_0 = ~reset & ~(|state);	// @[src/main/IFU.scala:30:22, :31:36, :38:54, :59:24]
  always @(posedge clock) begin	// @[src/main/IFU.scala:6:7]
    if (reset) begin	// @[src/main/IFU.scala:6:7]
      PC <= 32'h80000000;	// @[src/main/IFU.scala:26:22]
      finst <= 32'h0;	// @[src/main/IFU.scala:27:22]
      state <= 2'h0;	// @[src/main/IFU.scala:6:7, :30:22]
    end
    else begin	// @[src/main/IFU.scala:6:7]
      if (reset)	// @[src/main/IFU.scala:6:7]
        PC <= 32'h80000000;	// @[src/main/IFU.scala:26:22]
      else if (io_out_valid_0 & io_ifu_idle)	// @[src/main/IFU.scala:41:{20,38}]
        PC <= io_dnpc;	// @[src/main/IFU.scala:26:22]
      if (io_axi_rvalid)	// @[src/main/IFU.scala:7:14]
        finst <= io_axi_rdata;	// @[src/main/IFU.scala:27:22]
      if (state == 2'h2)	// @[src/main/IFU.scala:6:7, :30:22, :31:36]
        state <= {~io_ifu_idle, 1'h0};	// @[src/main/IFU.scala:30:22, :34:25, :43:18]
      else if (state == 2'h1 | ~(|state) & io_axi_arready)	// @[src/main/IFU.scala:6:7, :30:22, :31:36, :32:25]
        state <= io_axi_rvalid ? 2'h2 : 2'h1;	// @[src/main/IFU.scala:6:7, :30:22, :32:45]
      else	// @[src/main/IFU.scala:31:36, :32:25]
        state <= 2'h0;	// @[src/main/IFU.scala:6:7, :30:22]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/IFU.scala:6:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/IFU.scala:6:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/IFU.scala:6:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];	// @[src/main/IFU.scala:6:7]
    initial begin	// @[src/main/IFU.scala:6:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/IFU.scala:6:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/IFU.scala:6:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/IFU.scala:6:7]
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;	// @[src/main/IFU.scala:6:7]
        end	// @[src/main/IFU.scala:6:7]
        PC = _RANDOM[2'h0];	// @[src/main/IFU.scala:6:7, :26:22]
        finst = _RANDOM[2'h1];	// @[src/main/IFU.scala:6:7, :27:22]
        state = _RANDOM[2'h2][1:0];	// @[src/main/IFU.scala:6:7, :30:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/IFU.scala:6:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/IFU.scala:6:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  IFU_COUNTER ifu_count (	// @[src/main/IFU.scala:69:25]
    .clock           (clock),
    .arvalid         (io_axi_arvalid_0),	// @[src/main/IFU.scala:59:24]
    .state           (state),	// @[src/main/IFU.scala:30:22]
    .araddr          (io_axi_araddr_0),	// @[src/main/IFU.scala:38:23]
    .ifu_flash_count (io_ifu_flash_count),
    .ifu_psram_count (io_ifu_psram_count),
    .ifu_clk_count   (io_ifu_clk_count),
    .ifu_psram_clk   (io_ifu_psram_clk),
    .ifu_flash_clk   (io_ifu_flash_clk)
  );
  assign io_axi_arvalid = io_axi_arvalid_0;	// @[src/main/IFU.scala:6:7, :59:24]
  assign io_axi_araddr = io_axi_araddr_0;	// @[src/main/IFU.scala:6:7, :38:23]
  assign io_axi_rready = ~(|state) | state == 2'h1;	// @[src/main/IFU.scala:6:7, :30:22, :31:36, :38:54, :58:{38,47}]
  assign io_inst = finst;	// @[src/main/IFU.scala:6:7, :27:22]
  assign io_pc = PC;	// @[src/main/IFU.scala:6:7, :26:22]
  assign io_out_valid = io_out_valid_0;	// @[src/main/IFU.scala:6:7, :41:20]
endmodule

module ysyx_23060336_AddSub(	// @[src/main/ALU.scala:72:7]
  input         io_cin,	// @[src/main/ALU.scala:73:20]
  input  [31:0] io_ina,	// @[src/main/ALU.scala:73:20]
                io_inb,	// @[src/main/ALU.scala:73:20]
  output [31:0] io_result,	// @[src/main/ALU.scala:73:20]
  output        io_zero,	// @[src/main/ALU.scala:73:20]
                io_carry,	// @[src/main/ALU.scala:73:20]
                io_overflow	// @[src/main/ALU.scala:73:20]
);

  wire [31:0] t_no_cin = {32{io_cin}} ^ io_inb;	// @[src/main/ALU.scala:86:{26,38}]
  wire [32:0] _sum_T_1 = {1'h0, io_ina} + {1'h0, t_no_cin} + {32'h0, io_cin};	// @[src/main/ALU.scala:86:{26,38}, :87:{29,41}]
  assign io_result = _sum_T_1[31:0];	// @[src/main/ALU.scala:72:7, :87:41, :89:21]
  assign io_zero = _sum_T_1[31:0] == 32'h0;	// @[src/main/ALU.scala:72:7, :86:26, :87:41, :89:21, :92:29]
  assign io_carry = _sum_T_1[32];	// @[src/main/ALU.scala:72:7, :87:41, :90:21]
  assign io_overflow = io_ina[31] == t_no_cin[31] & _sum_T_1[31] != io_ina[31];	// @[src/main/ALU.scala:72:7, :86:38, :87:41, :91:{25,31,43,49,61,67}]
endmodule

module ysyx_23060336_SHIFT(	// @[src/main/SHIFT.scala:6:7]
  input  [31:0] io_in,	// @[src/main/SHIFT.scala:7:20]
  input  [4:0]  io_shamt,	// @[src/main/SHIFT.scala:7:20]
  input         io_isLeft,	// @[src/main/SHIFT.scala:7:20]
                io_izArith,	// @[src/main/SHIFT.scala:7:20]
  output [31:0] io_out	// @[src/main/SHIFT.scala:7:20]
);

  wire       leftIn = io_izArith & io_in[31];	// @[src/main/SHIFT.scala:14:{25,43}]
  wire [1:0] io_out_sel = {io_isLeft, io_shamt[4]};	// @[src/main/SHIFT.scala:19:{30,50}]
  wire [1:0] io_out_sel_1 = {io_isLeft, io_shamt[3]};	// @[src/main/SHIFT.scala:19:{30,50}]
  reg        casez_tmp;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp = io_in[0];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp = io_in[16];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp = io_in[0];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_0;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_0 = io_in[8];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_0 = io_in[24];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_0 = io_in[8];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_0 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_1;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_1 = io_in[1];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_1 = io_in[17];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_1 = io_in[1];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_1 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_2;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_2 = io_in[9];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_2 = io_in[25];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_2 = io_in[9];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_2 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_3;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_3 = io_in[2];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_3 = io_in[18];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_3 = io_in[2];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_3 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_4;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_4 = io_in[10];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_4 = io_in[26];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_4 = io_in[10];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_4 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_5;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_5 = io_in[3];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_5 = io_in[19];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_5 = io_in[3];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_5 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_6;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_6 = io_in[11];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_6 = io_in[27];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_6 = io_in[11];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_6 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_7;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_7 = io_in[4];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_7 = io_in[20];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_7 = io_in[4];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_7 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_8;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_8 = io_in[12];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_8 = io_in[28];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_8 = io_in[12];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_8 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_9;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_9 = io_in[5];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_9 = io_in[21];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_9 = io_in[5];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_9 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_10;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_10 = io_in[13];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_10 = io_in[29];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_10 = io_in[13];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_10 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_11;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_11 = io_in[6];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_11 = io_in[22];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_11 = io_in[6];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_11 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_12;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_12 = io_in[14];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_12 = io_in[30];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_12 = io_in[14];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_12 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_13;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_13 = io_in[7];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_13 = io_in[23];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_13 = io_in[7];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_13 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_14;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_14 = io_in[15];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_14 = io_in[31];	// @[src/main/SHIFT.scala:14:43, :21:32]
      2'b10:
        casez_tmp_14 = io_in[15];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_14 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_15;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_15 = io_in[16];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_15 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_15 = io_in[16];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_15 = io_in[0];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_16;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_16 = io_in[17];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_16 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_16 = io_in[17];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_16 = io_in[1];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_17;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_17 = io_in[18];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_17 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_17 = io_in[18];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_17 = io_in[2];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_18;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_18 = io_in[19];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_18 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_18 = io_in[19];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_18 = io_in[3];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_19;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_19 = io_in[20];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_19 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_19 = io_in[20];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_19 = io_in[4];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_20;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_20 = io_in[21];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_20 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_20 = io_in[21];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_20 = io_in[5];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_21;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_21 = io_in[22];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_21 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_21 = io_in[22];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_21 = io_in[6];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_22;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_22 = io_in[23];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_22 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_22 = io_in[23];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_22 = io_in[7];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_23;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_23 = io_in[24];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_23 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_23 = io_in[24];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_23 = io_in[8];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_24;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_24 = io_in[25];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_24 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_24 = io_in[25];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_24 = io_in[9];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_25;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_25 = io_in[26];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_25 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_25 = io_in[26];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_25 = io_in[10];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_26;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_26 = io_in[27];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_26 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_26 = io_in[27];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_26 = io_in[11];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_27;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_27 = io_in[28];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_27 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_27 = io_in[28];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_27 = io_in[12];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_28;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_28 = io_in[29];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_28 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_28 = io_in[29];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_28 = io_in[13];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_29;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_29 = io_in[30];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_29 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_29 = io_in[30];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_29 = io_in[14];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_30;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_30 = io_in[31];	// @[src/main/SHIFT.scala:14:43, :21:32]
      2'b01:
        casez_tmp_30 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_30 = io_in[31];	// @[src/main/SHIFT.scala:14:43, :21:32]
      default:
        casez_tmp_30 = io_in[15];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  wire [1:0] io_out_sel_2 = {io_isLeft, io_shamt[2]};	// @[src/main/SHIFT.scala:19:{30,50}]
  reg        casez_tmp_31;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_31 = casez_tmp;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_31 = casez_tmp_0;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_31 = casez_tmp;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_31 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_32;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_32 = casez_tmp_7;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_32 = casez_tmp_8;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_32 = casez_tmp_7;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_32 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_33;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_33 = casez_tmp_1;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_33 = casez_tmp_2;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_33 = casez_tmp_1;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_33 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_34;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_34 = casez_tmp_9;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_34 = casez_tmp_10;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_34 = casez_tmp_9;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_34 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_35;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_35 = casez_tmp_3;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_35 = casez_tmp_4;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_35 = casez_tmp_3;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_35 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_36;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_36 = casez_tmp_11;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_36 = casez_tmp_12;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_36 = casez_tmp_11;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_36 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_37;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_37 = casez_tmp_5;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_37 = casez_tmp_6;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_37 = casez_tmp_5;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_37 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_38;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_38 = casez_tmp_13;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_38 = casez_tmp_14;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_38 = casez_tmp_13;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_38 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_39;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_39 = casez_tmp_0;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_39 = casez_tmp_15;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_39 = casez_tmp_0;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_39 = casez_tmp;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_40;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_40 = casez_tmp_2;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_40 = casez_tmp_16;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_40 = casez_tmp_2;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_40 = casez_tmp_1;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_41;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_41 = casez_tmp_4;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_41 = casez_tmp_17;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_41 = casez_tmp_4;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_41 = casez_tmp_3;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_42;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_42 = casez_tmp_6;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_42 = casez_tmp_18;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_42 = casez_tmp_6;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_42 = casez_tmp_5;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_43;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_43 = casez_tmp_8;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_43 = casez_tmp_19;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_43 = casez_tmp_8;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_43 = casez_tmp_7;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_44;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_44 = casez_tmp_10;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_44 = casez_tmp_20;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_44 = casez_tmp_10;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_44 = casez_tmp_9;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_45;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_45 = casez_tmp_12;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_45 = casez_tmp_21;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_45 = casez_tmp_12;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_45 = casez_tmp_11;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_46;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_46 = casez_tmp_14;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_46 = casez_tmp_22;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_46 = casez_tmp_14;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_46 = casez_tmp_13;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_47;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_47 = casez_tmp_15;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_47 = casez_tmp_23;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_47 = casez_tmp_15;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_47 = casez_tmp_0;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_48;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_48 = casez_tmp_16;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_48 = casez_tmp_24;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_48 = casez_tmp_16;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_48 = casez_tmp_2;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_49;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_49 = casez_tmp_17;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_49 = casez_tmp_25;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_49 = casez_tmp_17;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_49 = casez_tmp_4;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_50;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_50 = casez_tmp_18;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_50 = casez_tmp_26;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_50 = casez_tmp_18;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_50 = casez_tmp_6;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_51;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_51 = casez_tmp_19;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_51 = casez_tmp_27;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_51 = casez_tmp_19;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_51 = casez_tmp_8;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_52;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_52 = casez_tmp_20;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_52 = casez_tmp_28;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_52 = casez_tmp_20;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_52 = casez_tmp_10;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_53;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_53 = casez_tmp_21;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_53 = casez_tmp_29;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_53 = casez_tmp_21;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_53 = casez_tmp_12;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_54;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_54 = casez_tmp_22;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_54 = casez_tmp_30;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_54 = casez_tmp_22;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_54 = casez_tmp_14;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_55;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_55 = casez_tmp_23;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_55 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_55 = casez_tmp_23;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_55 = casez_tmp_15;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_56;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_56 = casez_tmp_24;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_56 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_56 = casez_tmp_24;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_56 = casez_tmp_16;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_57;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_57 = casez_tmp_25;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_57 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_57 = casez_tmp_25;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_57 = casez_tmp_17;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_58;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_58 = casez_tmp_26;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_58 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_58 = casez_tmp_26;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_58 = casez_tmp_18;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_59;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_59 = casez_tmp_27;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_59 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_59 = casez_tmp_27;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_59 = casez_tmp_19;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_60;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_60 = casez_tmp_28;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_60 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_60 = casez_tmp_28;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_60 = casez_tmp_20;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_61;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_61 = casez_tmp_29;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_61 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_61 = casez_tmp_29;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_61 = casez_tmp_21;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_62;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_62 = casez_tmp_30;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_62 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_62 = casez_tmp_30;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_62 = casez_tmp_22;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  wire [1:0] io_out_sel_3 = {io_isLeft, io_shamt[1]};	// @[src/main/SHIFT.scala:19:{30,50}]
  reg        casez_tmp_63;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_63 = casez_tmp_31;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_63 = casez_tmp_32;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_63 = casez_tmp_31;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_63 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_64;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_64 = casez_tmp_35;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_64 = casez_tmp_36;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_64 = casez_tmp_35;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_64 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_65;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_65 = casez_tmp_33;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_65 = casez_tmp_34;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_65 = casez_tmp_33;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_65 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_66;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_66 = casez_tmp_37;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_66 = casez_tmp_38;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_66 = casez_tmp_37;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_66 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_67;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_67 = casez_tmp_32;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_67 = casez_tmp_39;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_67 = casez_tmp_32;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_67 = casez_tmp_31;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_68;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_68 = casez_tmp_34;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_68 = casez_tmp_40;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_68 = casez_tmp_34;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_68 = casez_tmp_33;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_69;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_69 = casez_tmp_36;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_69 = casez_tmp_41;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_69 = casez_tmp_36;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_69 = casez_tmp_35;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_70;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_70 = casez_tmp_38;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_70 = casez_tmp_42;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_70 = casez_tmp_38;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_70 = casez_tmp_37;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_71;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_71 = casez_tmp_39;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_71 = casez_tmp_43;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_71 = casez_tmp_39;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_71 = casez_tmp_32;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_72;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_72 = casez_tmp_40;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_72 = casez_tmp_44;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_72 = casez_tmp_40;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_72 = casez_tmp_34;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_73;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_73 = casez_tmp_41;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_73 = casez_tmp_45;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_73 = casez_tmp_41;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_73 = casez_tmp_36;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_74;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_74 = casez_tmp_42;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_74 = casez_tmp_46;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_74 = casez_tmp_42;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_74 = casez_tmp_38;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_75;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_75 = casez_tmp_43;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_75 = casez_tmp_47;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_75 = casez_tmp_43;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_75 = casez_tmp_39;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_76;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_76 = casez_tmp_44;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_76 = casez_tmp_48;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_76 = casez_tmp_44;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_76 = casez_tmp_40;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_77;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_77 = casez_tmp_45;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_77 = casez_tmp_49;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_77 = casez_tmp_45;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_77 = casez_tmp_41;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_78;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_78 = casez_tmp_46;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_78 = casez_tmp_50;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_78 = casez_tmp_46;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_78 = casez_tmp_42;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_79;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_79 = casez_tmp_47;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_79 = casez_tmp_51;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_79 = casez_tmp_47;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_79 = casez_tmp_43;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_80;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_80 = casez_tmp_48;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_80 = casez_tmp_52;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_80 = casez_tmp_48;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_80 = casez_tmp_44;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_81;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_81 = casez_tmp_49;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_81 = casez_tmp_53;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_81 = casez_tmp_49;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_81 = casez_tmp_45;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_82;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_82 = casez_tmp_50;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_82 = casez_tmp_54;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_82 = casez_tmp_50;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_82 = casez_tmp_46;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_83;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_83 = casez_tmp_51;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_83 = casez_tmp_55;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_83 = casez_tmp_51;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_83 = casez_tmp_47;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_84;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_84 = casez_tmp_52;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_84 = casez_tmp_56;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_84 = casez_tmp_52;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_84 = casez_tmp_48;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_85;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_85 = casez_tmp_53;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_85 = casez_tmp_57;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_85 = casez_tmp_53;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_85 = casez_tmp_49;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_86;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_86 = casez_tmp_54;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_86 = casez_tmp_58;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_86 = casez_tmp_54;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_86 = casez_tmp_50;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_87;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_87 = casez_tmp_55;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_87 = casez_tmp_59;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_87 = casez_tmp_55;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_87 = casez_tmp_51;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_88;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_88 = casez_tmp_56;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_88 = casez_tmp_60;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_88 = casez_tmp_56;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_88 = casez_tmp_52;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_89;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_89 = casez_tmp_57;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_89 = casez_tmp_61;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_89 = casez_tmp_57;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_89 = casez_tmp_53;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_90;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_90 = casez_tmp_58;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_90 = casez_tmp_62;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_90 = casez_tmp_58;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_90 = casez_tmp_54;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_91;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_91 = casez_tmp_59;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_91 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_91 = casez_tmp_59;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_91 = casez_tmp_55;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_92;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_92 = casez_tmp_60;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_92 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_92 = casez_tmp_60;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_92 = casez_tmp_56;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_93;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_93 = casez_tmp_61;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_93 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_93 = casez_tmp_61;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_93 = casez_tmp_57;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_94;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_94 = casez_tmp_62;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_94 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_94 = casez_tmp_62;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_94 = casez_tmp_58;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  wire [1:0] io_out_sel_4 = {io_isLeft, io_shamt[0]};	// @[src/main/SHIFT.scala:19:{30,50}]
  reg        casez_tmp_95;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_95 = casez_tmp_63;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_95 = casez_tmp_64;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_95 = casez_tmp_63;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_95 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_96;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_96 = casez_tmp_65;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_96 = casez_tmp_66;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_96 = casez_tmp_65;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_96 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_97;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_97 = casez_tmp_64;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_97 = casez_tmp_67;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_97 = casez_tmp_64;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_97 = casez_tmp_63;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_98;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_98 = casez_tmp_66;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_98 = casez_tmp_68;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_98 = casez_tmp_66;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_98 = casez_tmp_65;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_99;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_99 = casez_tmp_67;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_99 = casez_tmp_69;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_99 = casez_tmp_67;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_99 = casez_tmp_64;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_100;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_100 = casez_tmp_68;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_100 = casez_tmp_70;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_100 = casez_tmp_68;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_100 = casez_tmp_66;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_101;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_101 = casez_tmp_69;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_101 = casez_tmp_71;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_101 = casez_tmp_69;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_101 = casez_tmp_67;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_102;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_102 = casez_tmp_70;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_102 = casez_tmp_72;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_102 = casez_tmp_70;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_102 = casez_tmp_68;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_103;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_103 = casez_tmp_71;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_103 = casez_tmp_73;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_103 = casez_tmp_71;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_103 = casez_tmp_69;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_104;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_104 = casez_tmp_72;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_104 = casez_tmp_74;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_104 = casez_tmp_72;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_104 = casez_tmp_70;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_105;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_105 = casez_tmp_73;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_105 = casez_tmp_75;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_105 = casez_tmp_73;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_105 = casez_tmp_71;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_106;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_106 = casez_tmp_74;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_106 = casez_tmp_76;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_106 = casez_tmp_74;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_106 = casez_tmp_72;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_107;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_107 = casez_tmp_75;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_107 = casez_tmp_77;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_107 = casez_tmp_75;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_107 = casez_tmp_73;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_108;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_108 = casez_tmp_76;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_108 = casez_tmp_78;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_108 = casez_tmp_76;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_108 = casez_tmp_74;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_109;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_109 = casez_tmp_77;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_109 = casez_tmp_79;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_109 = casez_tmp_77;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_109 = casez_tmp_75;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_110;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_110 = casez_tmp_78;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_110 = casez_tmp_80;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_110 = casez_tmp_78;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_110 = casez_tmp_76;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_111;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_111 = casez_tmp_79;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_111 = casez_tmp_81;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_111 = casez_tmp_79;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_111 = casez_tmp_77;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_112;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_112 = casez_tmp_80;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_112 = casez_tmp_82;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_112 = casez_tmp_80;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_112 = casez_tmp_78;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_113;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_113 = casez_tmp_81;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_113 = casez_tmp_83;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_113 = casez_tmp_81;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_113 = casez_tmp_79;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_114;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_114 = casez_tmp_82;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_114 = casez_tmp_84;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_114 = casez_tmp_82;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_114 = casez_tmp_80;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_115;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_115 = casez_tmp_83;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_115 = casez_tmp_85;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_115 = casez_tmp_83;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_115 = casez_tmp_81;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_116;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_116 = casez_tmp_84;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_116 = casez_tmp_86;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_116 = casez_tmp_84;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_116 = casez_tmp_82;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_117;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_117 = casez_tmp_85;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_117 = casez_tmp_87;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_117 = casez_tmp_85;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_117 = casez_tmp_83;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_118;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_118 = casez_tmp_86;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_118 = casez_tmp_88;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_118 = casez_tmp_86;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_118 = casez_tmp_84;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_119;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_119 = casez_tmp_87;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_119 = casez_tmp_89;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_119 = casez_tmp_87;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_119 = casez_tmp_85;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_120;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_120 = casez_tmp_88;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_120 = casez_tmp_90;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_120 = casez_tmp_88;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_120 = casez_tmp_86;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_121;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_121 = casez_tmp_89;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_121 = casez_tmp_91;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_121 = casez_tmp_89;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_121 = casez_tmp_87;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_122;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_122 = casez_tmp_90;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_122 = casez_tmp_92;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_122 = casez_tmp_90;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_122 = casez_tmp_88;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_123;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_123 = casez_tmp_91;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_123 = casez_tmp_93;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_123 = casez_tmp_91;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_123 = casez_tmp_89;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_124;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_124 = casez_tmp_92;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_124 = casez_tmp_94;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_124 = casez_tmp_92;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_124 = casez_tmp_90;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_125;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_125 = casez_tmp_93;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_125 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_125 = casez_tmp_93;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_125 = casez_tmp_91;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_126;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_126 = casez_tmp_94;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_126 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_126 = casez_tmp_94;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_126 = casez_tmp_92;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_127;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_127 = casez_tmp_96;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_127 = casez_tmp_97;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_127 = casez_tmp_96;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_127 = casez_tmp_95;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_128;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_128 = casez_tmp_95;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_128 = casez_tmp_96;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_128 = casez_tmp_95;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_128 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_129;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_129 = casez_tmp_98;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_129 = casez_tmp_99;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_129 = casez_tmp_98;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_129 = casez_tmp_97;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_130;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_130 = casez_tmp_97;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_130 = casez_tmp_98;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_130 = casez_tmp_97;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_130 = casez_tmp_96;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_131;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_131 = casez_tmp_100;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_131 = casez_tmp_101;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_131 = casez_tmp_100;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_131 = casez_tmp_99;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_132;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_132 = casez_tmp_99;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_132 = casez_tmp_100;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_132 = casez_tmp_99;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_132 = casez_tmp_98;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_133;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_133 = casez_tmp_102;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_133 = casez_tmp_103;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_133 = casez_tmp_102;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_133 = casez_tmp_101;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_134;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_134 = casez_tmp_101;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_134 = casez_tmp_102;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_134 = casez_tmp_101;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_134 = casez_tmp_100;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_135;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_135 = casez_tmp_104;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_135 = casez_tmp_105;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_135 = casez_tmp_104;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_135 = casez_tmp_103;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_136;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_136 = casez_tmp_103;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_136 = casez_tmp_104;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_136 = casez_tmp_103;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_136 = casez_tmp_102;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_137;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_137 = casez_tmp_106;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_137 = casez_tmp_107;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_137 = casez_tmp_106;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_137 = casez_tmp_105;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_138;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_138 = casez_tmp_105;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_138 = casez_tmp_106;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_138 = casez_tmp_105;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_138 = casez_tmp_104;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_139;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_139 = casez_tmp_108;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_139 = casez_tmp_109;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_139 = casez_tmp_108;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_139 = casez_tmp_107;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_140;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_140 = casez_tmp_107;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_140 = casez_tmp_108;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_140 = casez_tmp_107;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_140 = casez_tmp_106;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_141;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_141 = casez_tmp_110;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_141 = casez_tmp_111;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_141 = casez_tmp_110;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_141 = casez_tmp_109;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_142;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_142 = casez_tmp_109;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_142 = casez_tmp_110;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_142 = casez_tmp_109;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_142 = casez_tmp_108;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_143;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_143 = casez_tmp_112;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_143 = casez_tmp_113;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_143 = casez_tmp_112;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_143 = casez_tmp_111;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_144;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_144 = casez_tmp_111;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_144 = casez_tmp_112;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_144 = casez_tmp_111;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_144 = casez_tmp_110;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_145;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_145 = casez_tmp_114;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_145 = casez_tmp_115;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_145 = casez_tmp_114;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_145 = casez_tmp_113;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_146;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_146 = casez_tmp_113;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_146 = casez_tmp_114;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_146 = casez_tmp_113;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_146 = casez_tmp_112;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_147;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_147 = casez_tmp_116;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_147 = casez_tmp_117;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_147 = casez_tmp_116;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_147 = casez_tmp_115;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_148;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_148 = casez_tmp_115;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_148 = casez_tmp_116;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_148 = casez_tmp_115;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_148 = casez_tmp_114;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_149;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_149 = casez_tmp_118;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_149 = casez_tmp_119;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_149 = casez_tmp_118;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_149 = casez_tmp_117;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_150;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_150 = casez_tmp_117;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_150 = casez_tmp_118;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_150 = casez_tmp_117;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_150 = casez_tmp_116;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_151;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_151 = casez_tmp_120;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_151 = casez_tmp_121;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_151 = casez_tmp_120;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_151 = casez_tmp_119;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_152;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_152 = casez_tmp_119;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_152 = casez_tmp_120;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_152 = casez_tmp_119;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_152 = casez_tmp_118;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_153;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_153 = casez_tmp_122;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_153 = casez_tmp_123;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_153 = casez_tmp_122;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_153 = casez_tmp_121;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_154;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_154 = casez_tmp_121;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_154 = casez_tmp_122;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_154 = casez_tmp_121;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_154 = casez_tmp_120;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_155;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_155 = casez_tmp_124;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_155 = casez_tmp_125;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_155 = casez_tmp_124;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_155 = casez_tmp_123;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_156;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_156 = casez_tmp_123;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_156 = casez_tmp_124;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_156 = casez_tmp_123;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_156 = casez_tmp_122;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_157;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_157 = casez_tmp_126;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_157 = leftIn;	// @[src/main/SHIFT.scala:14:25, :26:22]
      2'b10:
        casez_tmp_157 = casez_tmp_126;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_157 = casez_tmp_125;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_158;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_158 = casez_tmp_125;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_158 = casez_tmp_126;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_158 = casez_tmp_125;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_158 = casez_tmp_124;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  assign io_out =
    {casez_tmp_157,
     casez_tmp_158,
     casez_tmp_155,
     casez_tmp_156,
     casez_tmp_153,
     casez_tmp_154,
     casez_tmp_151,
     casez_tmp_152,
     casez_tmp_149,
     casez_tmp_150,
     casez_tmp_147,
     casez_tmp_148,
     casez_tmp_145,
     casez_tmp_146,
     casez_tmp_143,
     casez_tmp_144,
     casez_tmp_141,
     casez_tmp_142,
     casez_tmp_139,
     casez_tmp_140,
     casez_tmp_137,
     casez_tmp_138,
     casez_tmp_135,
     casez_tmp_136,
     casez_tmp_133,
     casez_tmp_134,
     casez_tmp_131,
     casez_tmp_132,
     casez_tmp_129,
     casez_tmp_130,
     casez_tmp_127,
     casez_tmp_128};	// @[src/main/SHIFT.scala:6:7, :26:22]
endmodule

module ysyx_23060336_ALU(	// @[src/main/ALU.scala:6:7]
  input  [3:0]  io_sel,	// @[src/main/ALU.scala:7:20]
  input  [31:0] io_ina,	// @[src/main/ALU.scala:7:20]
                io_inb,	// @[src/main/ALU.scala:7:20]
  output [31:0] io_result	// @[src/main/ALU.scala:7:20]
);

  wire [31:0] _shift_io_out;	// @[src/main/ALU.scala:43:27]
  wire [31:0] _addsub_io_result;	// @[src/main/ALU.scala:32:28]
  wire        _addsub_io_zero;	// @[src/main/ALU.scala:32:28]
  wire        _addsub_io_carry;	// @[src/main/ALU.scala:32:28]
  wire        _addsub_io_overflow;	// @[src/main/ALU.scala:32:28]
  wire        cin = io_sel[0] | io_sel[3];	// @[src/main/ALU.scala:17:{41,45,53}]
  wire        _out13_T_1 = cin ^ _addsub_io_carry;	// @[src/main/ALU.scala:17:45, :32:28, :40:50]
  ysyx_23060336_AddSub addsub (	// @[src/main/ALU.scala:32:28]
    .io_cin      (cin),	// @[src/main/ALU.scala:17:45]
    .io_ina      (io_ina),
    .io_inb      (io_inb),
    .io_result   (_addsub_io_result),
    .io_zero     (_addsub_io_zero),
    .io_carry    (_addsub_io_carry),
    .io_overflow (_addsub_io_overflow)
  );
  ysyx_23060336_SHIFT shift (	// @[src/main/ALU.scala:43:27]
    .io_in      (io_ina),
    .io_shamt   (io_inb[4:0]),	// @[src/main/ALU.scala:45:20]
    .io_isLeft  (io_sel[0]),	// @[src/main/ALU.scala:17:41]
    .io_izArith (io_sel[1]),	// @[src/main/ALU.scala:47:29]
    .io_out     (_shift_io_out)
  );
  assign io_result =
    io_sel == 4'h0 | io_sel == 4'h1
      ? _addsub_io_result
      : io_sel == 4'h2
          ? ~io_ina
          : io_sel == 4'h3
              ? io_ina & io_inb
              : io_sel == 4'h4
                  ? io_ina | io_inb
                  : io_sel == 4'h5
                      ? io_ina ^ io_inb
                      : io_sel == 4'h6 | io_sel == 4'h7 | io_sel == 4'h8
                          ? _shift_io_out
                          : {31'h0,
                             io_sel == 4'h9
                               ? _addsub_io_result[31] ^ _addsub_io_overflow
                               : io_sel == 4'hA
                                   ? _out13_T_1
                                   : io_sel == 4'hB
                                       ? _addsub_io_result[31] ^ ~_addsub_io_overflow
                                         | _addsub_io_zero
                                       : io_sel == 4'hC
                                           ? ~_out13_T_1
                                           : _addsub_io_zero ^ io_sel != 4'hD};	// @[src/main/ALU.scala:6:7, :20:21, :21:28, :22:28, :23:28, :32:28, :40:{34,50}, :41:46, :43:27, :50:{54,60}, :51:{38,74}, :55:{25,33}, :56:{61,69}, :57:{61,69}, :58:{61,69}, :59:{61,69}, :60:{61,69}, :61:{19,27}, :62:{61,69}, :63:{19,27}, :64:{61,69}, :65:{19,27}, :66:{19,27}, :67:{19,27}, :68:{61,69}]
endmodule

module ysyx_23060336_IDU_EXU(	// @[src/main/IDU_EXU.scala:8:7]
  input         reset,	// @[src/main/IDU_EXU.scala:8:7]
  input  [31:0] io_pc,	// @[src/main/IDU_EXU.scala:9:20]
                io_inst,	// @[src/main/IDU_EXU.scala:9:20]
                io_src1,	// @[src/main/IDU_EXU.scala:9:20]
                io_src2,	// @[src/main/IDU_EXU.scala:9:20]
                io_Csr_in,	// @[src/main/IDU_EXU.scala:9:20]
                io_mepc,	// @[src/main/IDU_EXU.scala:9:20]
                io_mtvec,	// @[src/main/IDU_EXU.scala:9:20]
  output [31:0] io_result,	// @[src/main/IDU_EXU.scala:9:20]
                io_dnpc,	// @[src/main/IDU_EXU.scala:9:20]
                io_Csr,	// @[src/main/IDU_EXU.scala:9:20]
  output [11:0] io_csr,	// @[src/main/IDU_EXU.scala:9:20]
  output [4:0]  io_rd,	// @[src/main/IDU_EXU.scala:9:20]
                io_rs1,	// @[src/main/IDU_EXU.scala:9:20]
                io_rs2,	// @[src/main/IDU_EXU.scala:9:20]
  output [3:0]  io_instType,	// @[src/main/IDU_EXU.scala:9:20]
                io_wstrb,	// @[src/main/IDU_EXU.scala:9:20]
  output [2:0]  io_awsize,	// @[src/main/IDU_EXU.scala:9:20]
                io_RegNum,	// @[src/main/IDU_EXU.scala:9:20]
                io_arsize,	// @[src/main/IDU_EXU.scala:9:20]
  output        io_ecall,	// @[src/main/IDU_EXU.scala:9:20]
                io_CsrWr,	// @[src/main/IDU_EXU.scala:9:20]
                io_MemWr,	// @[src/main/IDU_EXU.scala:9:20]
                io_RegWr,	// @[src/main/IDU_EXU.scala:9:20]
                io_MemtoReg,	// @[src/main/IDU_EXU.scala:9:20]
                io_ebreak	// @[src/main/IDU_EXU.scala:9:20]
);

  wire [31:0] _alu_io_result;	// @[src/main/IDU_EXU.scala:252:19]
  wire [6:0]  immNum_invInputs = ~{io_inst[13:12], io_inst[6:2]};	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [4:0]  instType_invInputs = ~(io_inst[6:2]);	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [5:0]  _instType_andMatrixOutputs_T_2 =
    {io_inst[0],
     io_inst[1],
     instType_invInputs[0],
     instType_invInputs[1],
     instType_invInputs[3],
     instType_invInputs[4]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [6:0]  _instType_andMatrixOutputs_T_3 =
    {io_inst[0],
     io_inst[1],
     io_inst[2],
     io_inst[3],
     instType_invInputs[2],
     instType_invInputs[3],
     instType_invInputs[4]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [5:0]  _instType_andMatrixOutputs_T_7 =
    {io_inst[0], io_inst[1], io_inst[2], instType_invInputs[2], io_inst[5], io_inst[6]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire        _instType_invMatrixOutputs_T_1 =
    {&_instType_andMatrixOutputs_T_2,
     &_instType_andMatrixOutputs_T_3,
     &{io_inst[0],
       io_inst[1],
       instType_invInputs[0],
       instType_invInputs[1],
       io_inst[5],
       io_inst[6]},
     &_instType_andMatrixOutputs_T_7} == 4'h0;	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}]
  wire        _instType_invMatrixOutputs_T_3 =
    {&{io_inst[0],
       io_inst[1],
       instType_invInputs[0],
       instType_invInputs[1],
       instType_invInputs[4]},
     &_instType_andMatrixOutputs_T_3,
     &_instType_andMatrixOutputs_T_7} == 3'h0;	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}]
  wire        _instType_invMatrixOutputs_T_5 =
    {&{io_inst[0],
       io_inst[1],
       instType_invInputs[0],
       instType_invInputs[1],
       instType_invInputs[2],
       instType_invInputs[4]},
     &_instType_andMatrixOutputs_T_2,
     &_instType_andMatrixOutputs_T_3,
     &{io_inst[0],
       io_inst[1],
       io_inst[2],
       instType_invInputs[1],
       io_inst[4],
       instType_invInputs[4]},
     &{io_inst[0],
       io_inst[1],
       instType_invInputs[1],
       instType_invInputs[2],
       io_inst[5],
       io_inst[6]}} == 5'h0;	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}]
  wire [4:0]  AluMuxa_invInputs = ~(io_inst[6:2]);	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [5:0]  _AluMuxa_andMatrixOutputs_T_4 =
    {io_inst[0],
     io_inst[1],
     AluMuxa_invInputs[1],
     io_inst[4],
     io_inst[5],
     AluMuxa_invInputs[4]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [7:0]  _GEN = {io_inst[14:12], io_inst[6:2]};	// @[src/main/IDU_EXU.scala:270:25, :300:26]
  wire [7:0]  AluMuxb_invInputs = ~_GEN;	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [14:0] AluSela_invInputs = ~{io_inst[31:25], io_inst[14:12], io_inst[6:2]};	// @[src/main/IDU_EXU.scala:269:25, :270:25, :300:26, :304:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [15:0] _AluSela_andMatrixOutputs_T =
    {io_inst[0],
     io_inst[1],
     AluSela_invInputs[0],
     AluSela_invInputs[1],
     io_inst[4],
     AluSela_invInputs[4],
     io_inst[12],
     AluSela_invInputs[6],
     AluSela_invInputs[7],
     AluSela_invInputs[8],
     AluSela_invInputs[9],
     AluSela_invInputs[10],
     AluSela_invInputs[11],
     AluSela_invInputs[12],
     AluSela_invInputs[13],
     AluSela_invInputs[14]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [15:0] _AluSela_andMatrixOutputs_T_9 =
    {io_inst[0],
     io_inst[1],
     AluSela_invInputs[0],
     AluSela_invInputs[1],
     io_inst[4],
     AluSela_invInputs[4],
     io_inst[12],
     AluSela_invInputs[6],
     io_inst[14],
     AluSela_invInputs[8],
     AluSela_invInputs[9],
     AluSela_invInputs[10],
     AluSela_invInputs[11],
     AluSela_invInputs[12],
     io_inst[30],
     AluSela_invInputs[14]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [7:0]  AluSelb_invInputs = ~_GEN;	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [8:0]  _AluSelb_andMatrixOutputs_T_8 =
    {io_inst[0],
     io_inst[1],
     AluSelb_invInputs[0],
     AluSelb_invInputs[1],
     io_inst[4],
     io_inst[5],
     io_inst[6],
     io_inst[12],
     io_inst[13]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [1:0]  recsr_invInputs = ~(io_inst[3:2]);	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [8:0]  _recsr_andMatrixOutputs_T =
    {io_inst[0],
     io_inst[1],
     recsr_invInputs[0],
     recsr_invInputs[1],
     io_inst[4],
     io_inst[5],
     io_inst[6],
     io_inst[12],
     io_inst[13]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [2:0]  branch_invInputs = ~(io_inst[4:2]);	// @[src/main/scala/chisel3/util/experimental/decode/decoder.scala:39:16, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [2:0]  pcmux_invInputs = ~(io_inst[4:2]);	// @[src/main/scala/chisel3/util/experimental/decode/decoder.scala:39:16, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [29:0] mret_invInputs = ~(io_inst[31:2]);	// @[src/main/IDU_EXU.scala:9:20, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [29:0] io_ecall_invInputs = ~(io_inst[31:2]);	// @[src/main/IDU_EXU.scala:9:20, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [31:0] _io_ecall_andMatrixOutputs_T =
    {io_inst[0],
     io_inst[1],
     io_ecall_invInputs[0],
     io_ecall_invInputs[1],
     io_inst[4],
     io_inst[5],
     io_inst[6],
     io_ecall_invInputs[5],
     io_ecall_invInputs[6],
     io_ecall_invInputs[7],
     io_ecall_invInputs[8],
     io_ecall_invInputs[9],
     io_ecall_invInputs[10],
     io_ecall_invInputs[11],
     io_ecall_invInputs[12],
     io_ecall_invInputs[13],
     io_ecall_invInputs[14],
     io_ecall_invInputs[15],
     io_ecall_invInputs[16],
     io_ecall_invInputs[17],
     io_ecall_invInputs[18],
     io_ecall_invInputs[19],
     io_ecall_invInputs[20],
     io_ecall_invInputs[21],
     io_ecall_invInputs[22],
     io_ecall_invInputs[23],
     io_ecall_invInputs[24],
     io_ecall_invInputs[25],
     io_ecall_invInputs[26],
     io_ecall_invInputs[27],
     io_ecall_invInputs[28],
     io_ecall_invInputs[29]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [29:0] io_ebreak_invInputs = ~(io_inst[31:2]);	// @[src/main/IDU_EXU.scala:9:20, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [7:0]  io_wstrb_invInputs = ~_GEN;	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [8:0]  _io_wstrb_andMatrixOutputs_T =
    {io_inst[0],
     io_inst[1],
     io_wstrb_invInputs[0],
     io_wstrb_invInputs[1],
     io_wstrb_invInputs[2],
     io_inst[5],
     io_wstrb_invInputs[4],
     io_wstrb_invInputs[6],
     io_wstrb_invInputs[7]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [7:0]  io_awsize_invInputs = ~_GEN;	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [8:0]  _io_awsize_andMatrixOutputs_T =
    {io_inst[0],
     io_inst[1],
     io_awsize_invInputs[0],
     io_awsize_invInputs[1],
     io_awsize_invInputs[2],
     io_inst[5],
     io_awsize_invInputs[4],
     io_awsize_invInputs[5],
     io_awsize_invInputs[7]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [8:0]  _io_awsize_andMatrixOutputs_T_1 =
    {io_inst[0],
     io_inst[1],
     io_awsize_invInputs[0],
     io_awsize_invInputs[1],
     io_awsize_invInputs[2],
     io_inst[5],
     io_awsize_invInputs[4],
     io_awsize_invInputs[6],
     io_awsize_invInputs[7]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [7:0]  io_arsize_invInputs = ~_GEN;	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [7:0]  _io_arsize_andMatrixOutputs_T =
    {io_inst[0],
     io_inst[1],
     io_arsize_invInputs[0],
     io_arsize_invInputs[1],
     io_arsize_invInputs[2],
     io_arsize_invInputs[3],
     io_arsize_invInputs[4],
     io_arsize_invInputs[6]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [8:0]  _io_arsize_andMatrixOutputs_T_2 =
    {io_inst[0],
     io_inst[1],
     io_arsize_invInputs[0],
     io_arsize_invInputs[1],
     io_arsize_invInputs[2],
     io_arsize_invInputs[3],
     io_arsize_invInputs[4],
     io_arsize_invInputs[5],
     io_arsize_invInputs[7]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [7:0]  io_RegNum_invInputs = ~_GEN;	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [8:0]  _io_RegNum_andMatrixOutputs_T_1 =
    {io_inst[0],
     io_inst[1],
     io_RegNum_invInputs[0],
     io_RegNum_invInputs[1],
     io_RegNum_invInputs[2],
     io_RegNum_invInputs[3],
     io_RegNum_invInputs[4],
     io_RegNum_invInputs[5],
     io_RegNum_invInputs[7]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [8:0]  _io_RegNum_andMatrixOutputs_T_2 =
    {io_inst[0],
     io_inst[1],
     io_RegNum_invInputs[0],
     io_RegNum_invInputs[1],
     io_RegNum_invInputs[2],
     io_RegNum_invInputs[3],
     io_RegNum_invInputs[4],
     io_RegNum_invInputs[6],
     io_RegNum_invInputs[7]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [1:0]  io_CsrWr_invInputs = ~(io_inst[3:2]);	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [4:0]  io_MemtoReg_invInputs = ~(io_inst[6:2]);	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [4:0]  io_MemWr_invInputs = ~(io_inst[6:2]);	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [4:0]  io_RegWr_invInputs = ~(io_inst[6:2]);	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [1:0]  io_RegWr_invInputs_1 = ~(io_inst[3:2]);	// @[src/main/IDU_EXU.scala:300:26, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [3:0]  _GEN_0 =
    {&{io_inst[0],
       io_inst[1],
       AluMuxb_invInputs[0],
       AluMuxb_invInputs[1],
       io_inst[4],
       io_inst[5],
       io_inst[6],
       io_inst[12],
       AluMuxb_invInputs[6]},
     (|{&{io_inst[0],
          io_inst[1],
          io_inst[2],
          AluMuxa_invInputs[1],
          io_inst[4],
          AluMuxa_invInputs[3],
          AluMuxa_invInputs[4]},
        &{io_inst[0],
          io_inst[1],
          AluMuxa_invInputs[0],
          AluMuxa_invInputs[1],
          io_inst[4],
          io_inst[5],
          AluMuxa_invInputs[4]},
        &{io_inst[0],
          io_inst[1],
          AluMuxa_invInputs[0],
          AluMuxa_invInputs[1],
          AluMuxa_invInputs[2],
          io_inst[5],
          io_inst[6]}})
       | (&{io_inst[0],
            io_inst[1],
            AluMuxb_invInputs[0],
            AluMuxb_invInputs[1],
            io_inst[4],
            io_inst[5],
            io_inst[6],
            io_inst[13]}),
     (|{&_AluMuxa_andMatrixOutputs_T_4,
        &{io_inst[0],
          io_inst[1],
          AluMuxa_invInputs[1],
          AluMuxa_invInputs[2],
          io_inst[5],
          io_inst[6]},
        &{io_inst[0],
          io_inst[1],
          io_inst[2],
          AluMuxa_invInputs[2],
          io_inst[5],
          io_inst[6]}})
       | (&{io_inst[0],
            io_inst[1],
            AluMuxb_invInputs[0],
            AluMuxb_invInputs[1],
            io_inst[4],
            io_inst[5],
            io_inst[6],
            io_inst[13],
            io_inst[14]}),
     (|{&{io_inst[0],
          io_inst[1],
          AluMuxa_invInputs[0],
          AluMuxa_invInputs[1],
          AluMuxa_invInputs[4]},
        &{io_inst[0],
          io_inst[1],
          io_inst[2],
          io_inst[3],
          AluMuxa_invInputs[2],
          AluMuxa_invInputs[3],
          AluMuxa_invInputs[4]},
        &{io_inst[0],
          io_inst[1],
          AluMuxa_invInputs[0],
          AluMuxa_invInputs[1],
          AluMuxa_invInputs[2],
          io_inst[5]},
        &_AluMuxa_andMatrixOutputs_T_4})
       | (|{&{io_inst[0],
              io_inst[1],
              AluMuxb_invInputs[0],
              AluMuxb_invInputs[1],
              io_inst[4],
              io_inst[5],
              io_inst[6],
              io_inst[13],
              AluMuxb_invInputs[7]},
            &{io_inst[0],
              io_inst[1],
              AluMuxb_invInputs[0],
              AluMuxb_invInputs[1],
              io_inst[4],
              io_inst[5],
              io_inst[6],
              io_inst[12],
              AluMuxb_invInputs[6],
              io_inst[14]}})};	// @[src/main/IDU_EXU.scala:323:24, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}]
  reg  [31:0] casez_tmp;	// @[src/main/IDU_EXU.scala:326:13]
  always_comb begin	// @[src/main/IDU_EXU.scala:326:{13,23}, :327:{13,23}, :328:{13,23}, :329:{13,23}, :330:{13,23}]
    casez ({_instType_invMatrixOutputs_T_5,
            _instType_invMatrixOutputs_T_3,
            _instType_invMatrixOutputs_T_1})	// @[src/main/IDU_EXU.scala:301:12, :326:{13,23}, :327:{13,23}, :328:{13,23}, :329:{13,23}, :330:{13,23}, src/main/scala/chisel3/util/pla.scala:114:36]
      3'b000:
        casez_tmp = {{20{io_inst[31]}}, io_inst[31:20]};	// @[src/main/IDU_EXU.scala:273:23, :281:{18,23,34}, :326:{13,23}, :327:{13,23}, :328:{13,23}, :329:{13,23}, :330:{13,23}]
      3'b001:
        casez_tmp = {{20{io_inst[31]}}, io_inst[31:25], io_inst[11:7]};	// @[src/main/IDU_EXU.scala:266:25, :269:25, :282:{18,23,34}, :326:{13,23}, :327:{13,23}, :328:{13,23}, :329:{13,23}, :330:{13,23}]
      3'b010:
        casez_tmp = {{20{io_inst[31]}}, io_inst[7], io_inst[30:25], io_inst[11:8], 1'h0};	// @[src/main/IDU_EXU.scala:277:{19,27,40,52,69}, :283:18, :326:{13,23}, :327:{13,23}, :328:{13,23}, :329:{13,23}, :330:{13,23}]
      3'b011:
        casez_tmp = {io_inst[31:12], 12'h0};	// @[src/main/IDU_EXU.scala:275:23, :280:{18,31}, :326:{13,23}, :327:{13,23}, :328:{13,23}, :329:{13,23}, :330:{13,23}]
      3'b100:
        casez_tmp =
          {{12{io_inst[31]}}, io_inst[19:12], io_inst[20], io_inst[30:21], 1'h0};	// @[src/main/IDU_EXU.scala:277:{19,27}, :278:{40,57,70}, :284:18, :326:{13,23}, :327:{13,23}, :328:{13,23}, :329:{13,23}, :330:{13,23}]
      3'b101:
        casez_tmp = 32'h0;	// @[src/main/IDU_EXU.scala:326:{13,23}, :327:{13,23}, :328:{13,23}, :329:{13,23}, :330:{13,23}]
      3'b110:
        casez_tmp = 32'h0;	// @[src/main/IDU_EXU.scala:326:{13,23}, :327:{13,23}, :328:{13,23}, :329:{13,23}, :330:{13,23}]
      default:
        casez_tmp = 32'h0;	// @[src/main/IDU_EXU.scala:326:{13,23}, :327:{13,23}, :328:{13,23}, :329:{13,23}, :330:{13,23}]
    endcase	// @[src/main/IDU_EXU.scala:301:12, :326:{13,23}, :327:{13,23}, :328:{13,23}, :329:{13,23}, :330:{13,23}, src/main/scala/chisel3/util/pla.scala:114:36]
  end // always_comb
  wire [31:0] imm =
    (&{io_inst[0],
       io_inst[1],
       immNum_invInputs[0],
       immNum_invInputs[1],
       io_inst[4],
       immNum_invInputs[3],
       immNum_invInputs[4],
       io_inst[12],
       immNum_invInputs[6]})
      ? {{27{casez_tmp[4]}}, casez_tmp[4:0]}
      : casez_tmp;	// @[src/main/IDU_EXU.scala:326:13, :332:{18,30,35,43,52}, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}]
  wire        _inb_T = _GEN_0 == 4'h7;	// @[src/main/IDU_EXU.scala:323:24, :338:22]
  wire        _inb_T_1 = _GEN_0 == 4'h1;	// @[src/main/IDU_EXU.scala:323:24, :327:23, :339:22]
  wire        _inb_T_2 = _GEN_0 == 4'h2;	// @[src/main/IDU_EXU.scala:323:24, :328:23, :340:22]
  wire        _inb_T_3 = _GEN_0 == 4'h3;	// @[src/main/IDU_EXU.scala:323:24, :329:23, :341:22]
  wire        _inb_T_6 = _GEN_0 == 4'h4;	// @[src/main/IDU_EXU.scala:323:24, :330:23, :342:22]
  wire        _inb_T_4 = _GEN_0 == 4'h5;	// @[src/main/IDU_EXU.scala:323:24, :343:22]
  wire        _inb_T_5 = _GEN_0 == 4'h6;	// @[src/main/IDU_EXU.scala:323:24, :346:22]
  wire [3:0]  PCMux =
    {&{io_inst[0],
       io_inst[1],
       branch_invInputs[0],
       branch_invInputs[1],
       branch_invInputs[2],
       io_inst[5],
       io_inst[6]},
     _alu_io_result[0],
     &{io_inst[0],
       io_inst[1],
       io_inst[2],
       pcmux_invInputs[1],
       pcmux_invInputs[2],
       io_inst[5],
       io_inst[6]},
     |{&{io_inst[0],
         io_inst[1],
         pcmux_invInputs[0],
         pcmux_invInputs[1],
         pcmux_invInputs[2],
         io_inst[5],
         io_inst[6]},
       &{io_inst[0],
         io_inst[1],
         io_inst[2],
         io_inst[3],
         pcmux_invInputs[2],
         io_inst[5],
         io_inst[6]}}};	// @[src/main/IDU_EXU.scala:252:19, :361:{15,33}, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}]
  wire        _pcb_T = PCMux == 4'h2;	// @[src/main/IDU_EXU.scala:328:23, :361:15, :363:22]
  wire        _pcb_T_1 = PCMux == 4'h6;	// @[src/main/IDU_EXU.scala:346:22, :361:15, :364:22]
  ysyx_23060336_ALU alu (	// @[src/main/IDU_EXU.scala:252:19]
    .io_sel
      ({|{&{io_inst[0],
            io_inst[1],
            AluSela_invInputs[0],
            AluSela_invInputs[1],
            io_inst[4],
            io_inst[5],
            AluSela_invInputs[4],
            io_inst[13],
            AluSela_invInputs[7],
            AluSela_invInputs[8],
            AluSela_invInputs[9],
            AluSela_invInputs[10],
            AluSela_invInputs[11],
            AluSela_invInputs[12],
            AluSela_invInputs[13],
            AluSela_invInputs[14]},
          &{io_inst[0],
            io_inst[1],
            AluSela_invInputs[0],
            AluSela_invInputs[1],
            io_inst[4],
            AluSela_invInputs[4],
            io_inst[12],
            AluSela_invInputs[6],
            io_inst[14],
            AluSela_invInputs[8],
            AluSela_invInputs[9],
            AluSela_invInputs[10],
            AluSela_invInputs[11],
            AluSela_invInputs[12],
            AluSela_invInputs[13],
            AluSela_invInputs[14]}},
        |{&_AluSela_andMatrixOutputs_T,
          &{io_inst[0],
            io_inst[1],
            AluSela_invInputs[0],
            AluSela_invInputs[1],
            io_inst[4],
            io_inst[5],
            AluSela_invInputs[4],
            AluSela_invInputs[5],
            io_inst[14],
            AluSela_invInputs[8],
            AluSela_invInputs[9],
            AluSela_invInputs[10],
            AluSela_invInputs[11],
            AluSela_invInputs[12],
            AluSela_invInputs[13],
            AluSela_invInputs[14]},
          &_AluSela_andMatrixOutputs_T_9},
        |{&_AluSela_andMatrixOutputs_T,
          &{io_inst[0],
            io_inst[1],
            AluSela_invInputs[0],
            AluSela_invInputs[1],
            io_inst[4],
            io_inst[5],
            AluSela_invInputs[4],
            io_inst[12],
            io_inst[13],
            AluSela_invInputs[8],
            AluSela_invInputs[9],
            AluSela_invInputs[10],
            AluSela_invInputs[11],
            AluSela_invInputs[12],
            AluSela_invInputs[13],
            AluSela_invInputs[14]},
          &_AluSela_andMatrixOutputs_T_9},
        |{&_AluSela_andMatrixOutputs_T,
          &{io_inst[0],
            io_inst[1],
            AluSela_invInputs[0],
            AluSela_invInputs[1],
            io_inst[4],
            io_inst[5],
            AluSela_invInputs[4],
            AluSela_invInputs[5],
            io_inst[13],
            AluSela_invInputs[7],
            AluSela_invInputs[8],
            AluSela_invInputs[9],
            AluSela_invInputs[10],
            AluSela_invInputs[11],
            AluSela_invInputs[12],
            AluSela_invInputs[13],
            AluSela_invInputs[14]},
          &{io_inst[0],
            io_inst[1],
            AluSela_invInputs[0],
            AluSela_invInputs[1],
            io_inst[4],
            io_inst[5],
            AluSela_invInputs[4],
            AluSela_invInputs[5],
            AluSela_invInputs[6],
            io_inst[14],
            AluSela_invInputs[8],
            AluSela_invInputs[9],
            AluSela_invInputs[10],
            AluSela_invInputs[11],
            AluSela_invInputs[12],
            AluSela_invInputs[13],
            AluSela_invInputs[14]},
          &{io_inst[0],
            io_inst[1],
            AluSela_invInputs[0],
            AluSela_invInputs[1],
            io_inst[4],
            io_inst[5],
            AluSela_invInputs[4],
            io_inst[12],
            io_inst[13],
            io_inst[14],
            AluSela_invInputs[8],
            AluSela_invInputs[9],
            AluSela_invInputs[10],
            AluSela_invInputs[11],
            AluSela_invInputs[12],
            AluSela_invInputs[13],
            AluSela_invInputs[14]},
          &{io_inst[0],
            io_inst[1],
            AluSela_invInputs[0],
            AluSela_invInputs[1],
            io_inst[4],
            io_inst[5],
            AluSela_invInputs[4],
            AluSela_invInputs[5],
            AluSela_invInputs[6],
            AluSela_invInputs[7],
            AluSela_invInputs[8],
            AluSela_invInputs[9],
            AluSela_invInputs[10],
            AluSela_invInputs[11],
            AluSela_invInputs[12],
            io_inst[30],
            AluSela_invInputs[14]}}}
       | {|{&{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              AluSelb_invInputs[2],
              io_inst[5],
              io_inst[6],
              AluSelb_invInputs[6]},
            &{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              io_inst[4],
              AluSelb_invInputs[3],
              AluSelb_invInputs[4],
              io_inst[13],
              AluSelb_invInputs[7]},
            &{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              AluSelb_invInputs[2],
              io_inst[5],
              io_inst[6],
              io_inst[14]}},
          |{&{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              AluSelb_invInputs[2],
              io_inst[5],
              io_inst[6],
              AluSelb_invInputs[6],
              AluSelb_invInputs[7]},
            &{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              io_inst[4],
              io_inst[5],
              io_inst[6],
              AluSelb_invInputs[5],
              io_inst[13]},
            &{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              io_inst[4],
              AluSelb_invInputs[3],
              AluSelb_invInputs[4],
              AluSelb_invInputs[5],
              io_inst[14]},
            &{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              AluSelb_invInputs[2],
              io_inst[5],
              io_inst[6],
              io_inst[12],
              io_inst[13],
              io_inst[14]}},
          |{&{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              AluSelb_invInputs[2],
              io_inst[5],
              io_inst[6],
              io_inst[12],
              AluSelb_invInputs[6]},
            &{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              io_inst[4],
              AluSelb_invInputs[3],
              AluSelb_invInputs[4],
              io_inst[12],
              io_inst[13]},
            &_AluSelb_andMatrixOutputs_T_8,
            &{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              AluSelb_invInputs[2],
              io_inst[5],
              io_inst[6],
              AluSelb_invInputs[5],
              io_inst[13],
              io_inst[14]}},
          |{&{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              AluSelb_invInputs[2],
              io_inst[5],
              io_inst[6],
              AluSelb_invInputs[5],
              AluSelb_invInputs[6]},
            &{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              io_inst[4],
              AluSelb_invInputs[3],
              AluSelb_invInputs[4],
              AluSelb_invInputs[5],
              io_inst[13],
              AluSelb_invInputs[7]},
            &_AluSelb_andMatrixOutputs_T_8,
            &{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              io_inst[4],
              AluSelb_invInputs[3],
              AluSelb_invInputs[4],
              AluSelb_invInputs[5],
              AluSelb_invInputs[6],
              io_inst[14]},
            &{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              AluSelb_invInputs[2],
              io_inst[5],
              io_inst[6],
              AluSelb_invInputs[6],
              io_inst[14]},
            &{io_inst[0],
              io_inst[1],
              AluSelb_invInputs[0],
              AluSelb_invInputs[1],
              io_inst[4],
              AluSelb_invInputs[3],
              AluSelb_invInputs[4],
              io_inst[12],
              io_inst[13],
              io_inst[14]}}}),	// @[src/main/IDU_EXU.scala:324:24, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :102:36, :114:{19,36}]
    .io_ina
      (_inb_T | _inb_T_1
         ? io_src1
         : _inb_T_2
             ? io_pc
             : _inb_T_3
                 ? 32'h0
                 : _inb_T_6
                     ? io_pc
                     : _inb_T_4 | _GEN_0 == 4'h8
                         ? {32{&_recsr_andMatrixOutputs_T}} ^ io_src1
                         : _GEN_0 == 4'h9 | _inb_T_5
                             ? ((&_recsr_andMatrixOutputs_T)
                                  ? {27'h7FFFFFF, ~(io_inst[19:15])}
                                  : {27'h0, io_inst[19:15]})
                             : 32'h0),	// @[src/main/IDU_EXU.scala:267:25, :323:24, :330:13, :332:35, :333:18, :335:16, :336:{16,24}, :338:{14,22}, :339:{14,22}, :340:{14,22}, :341:{14,22}, :342:{14,22}, :343:{14,22}, :344:{14,22}, :345:{14,22}, :346:{14,22}, src/main/scala/chisel3/util/pla.scala:98:{53,70}]
    .io_inb
      (_inb_T
         ? io_src2
         : _inb_T_1
             ? imm
             : _inb_T_2
                 ? 32'h4
                 : _inb_T_3
                     ? imm
                     : _inb_T_4 | _inb_T_5 ? io_Csr_in : _inb_T_6 ? imm : 32'h0),	// @[src/main/IDU_EXU.scala:330:13, :332:18, :338:22, :339:22, :340:22, :341:22, :342:22, :343:22, :346:22, :348:14, :349:14, :350:14, :351:14, :352:14, :353:14, :354:14]
    .io_result (_alu_io_result)
  );
  assign io_result = _alu_io_result;	// @[src/main/IDU_EXU.scala:8:7, :252:19]
  assign io_dnpc =
    reset
      ? 32'h80000000
      : (&_io_ecall_andMatrixOutputs_T)
          ? io_mtvec
          : (&{io_inst[0],
               io_inst[1],
               mret_invInputs[0],
               mret_invInputs[1],
               io_inst[4],
               io_inst[5],
               io_inst[6],
               mret_invInputs[5],
               mret_invInputs[6],
               mret_invInputs[7],
               mret_invInputs[8],
               mret_invInputs[9],
               mret_invInputs[10],
               mret_invInputs[11],
               mret_invInputs[12],
               mret_invInputs[13],
               mret_invInputs[14],
               mret_invInputs[15],
               mret_invInputs[16],
               mret_invInputs[17],
               mret_invInputs[18],
               io_inst[21],
               mret_invInputs[20],
               mret_invInputs[21],
               mret_invInputs[22],
               mret_invInputs[23],
               mret_invInputs[24],
               mret_invInputs[25],
               io_inst[28],
               io_inst[29],
               mret_invInputs[28],
               mret_invInputs[29]})
              ? io_mepc
              : (_pcb_T | _pcb_T_1 ? io_src1 : io_pc)
                + (_pcb_T | _pcb_T_1 | PCMux == 4'h1 | PCMux == 4'h5 | PCMux == 4'hD
                     ? imm
                     : 32'h4);	// @[src/main/IDU_EXU.scala:8:7, :327:23, :332:18, :343:22, :350:14, :361:15, :363:{15,22}, :364:{15,22}, :366:15, :367:15, :368:{15,22}, :369:{15,22}, :370:{15,22}, :372:16, :374:17, :375:17, :376:17, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}]
  assign io_Csr = io_Csr_in;	// @[src/main/IDU_EXU.scala:8:7]
  assign io_csr = io_inst[31:20];	// @[src/main/IDU_EXU.scala:8:7, :273:23]
  assign io_rd = io_inst[11:7];	// @[src/main/IDU_EXU.scala:8:7, :266:25]
  assign io_rs1 = io_inst[19:15];	// @[src/main/IDU_EXU.scala:8:7, :267:25]
  assign io_rs2 = io_inst[24:20];	// @[src/main/IDU_EXU.scala:8:7, :268:25]
  assign io_instType =
    {1'h0,
     _instType_invMatrixOutputs_T_5,
     _instType_invMatrixOutputs_T_3,
     _instType_invMatrixOutputs_T_1};	// @[src/main/IDU_EXU.scala:8:7, :277:19, :301:12, src/main/scala/chisel3/util/pla.scala:114:36]
  assign io_wstrb =
    {~(&_io_wstrb_andMatrixOutputs_T),
     ~(&_io_wstrb_andMatrixOutputs_T),
     {io_inst[0],
      io_inst[1],
      io_wstrb_invInputs[0],
      io_wstrb_invInputs[1],
      io_wstrb_invInputs[2],
      io_inst[5],
      io_wstrb_invInputs[4],
      io_wstrb_invInputs[5],
      io_wstrb_invInputs[6],
      io_wstrb_invInputs[7]} != 10'h3FF,
     1'h1};	// @[src/main/IDU_EXU.scala:8:7, :327:23, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :120:37, :123:40]
  assign io_awsize =
    {{&_io_awsize_andMatrixOutputs_T, &_io_awsize_andMatrixOutputs_T_1} == 2'h0,
     ~(&_io_awsize_andMatrixOutputs_T_1),
     ~(&_io_awsize_andMatrixOutputs_T)};	// @[src/main/IDU_EXU.scala:8:7, src/main/scala/chisel3/util/pla.scala:98:{53,70}, :114:{19,36}, :120:37, :123:40]
  assign io_RegNum =
    {{&{io_inst[0],
        io_inst[1],
        io_RegNum_invInputs[0],
        io_RegNum_invInputs[1],
        io_RegNum_invInputs[2],
        io_RegNum_invInputs[3],
        io_RegNum_invInputs[4],
        io_RegNum_invInputs[5],
        io_RegNum_invInputs[6]},
      &_io_RegNum_andMatrixOutputs_T_1,
      &_io_RegNum_andMatrixOutputs_T_2} == 3'h0,
     {&_io_RegNum_andMatrixOutputs_T_2,
      &{io_inst[0],
        io_inst[1],
        io_RegNum_invInputs[0],
        io_RegNum_invInputs[1],
        io_RegNum_invInputs[2],
        io_RegNum_invInputs[3],
        io_RegNum_invInputs[4],
        io_inst[12],
        io_RegNum_invInputs[6]}} == 2'h0,
     {&_io_RegNum_andMatrixOutputs_T_1,
      &{io_inst[0],
        io_inst[1],
        io_RegNum_invInputs[0],
        io_RegNum_invInputs[1],
        io_RegNum_invInputs[2],
        io_RegNum_invInputs[3],
        io_RegNum_invInputs[4],
        io_inst[12],
        io_RegNum_invInputs[6],
        io_inst[14]}} == 2'h0};	// @[src/main/IDU_EXU.scala:8:7, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}, :120:37]
  assign io_arsize =
    {{&_io_arsize_andMatrixOutputs_T, &_io_arsize_andMatrixOutputs_T_2} == 2'h0,
     ~(&_io_arsize_andMatrixOutputs_T),
     {&{io_inst[0],
        io_inst[1],
        io_arsize_invInputs[0],
        io_arsize_invInputs[1],
        io_arsize_invInputs[2],
        io_arsize_invInputs[3],
        io_arsize_invInputs[4],
        io_arsize_invInputs[5],
        io_arsize_invInputs[6]},
      &_io_arsize_andMatrixOutputs_T_2} == 2'h0};	// @[src/main/IDU_EXU.scala:8:7, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}, :120:37, :123:40]
  assign io_ecall = &_io_ecall_andMatrixOutputs_T;	// @[src/main/IDU_EXU.scala:8:7, src/main/scala/chisel3/util/pla.scala:98:{53,70}]
  assign io_CsrWr =
    |{&{io_inst[0],
        io_inst[1],
        io_CsrWr_invInputs[0],
        io_CsrWr_invInputs[1],
        io_inst[4],
        io_inst[5],
        io_inst[6],
        io_inst[12]},
      &{io_inst[0],
        io_inst[1],
        io_CsrWr_invInputs[0],
        io_CsrWr_invInputs[1],
        io_inst[4],
        io_inst[5],
        io_inst[6],
        io_inst[13]}};	// @[src/main/IDU_EXU.scala:8:7, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}]
  assign io_MemWr =
    &{io_inst[0],
      io_inst[1],
      io_MemWr_invInputs[0],
      io_MemWr_invInputs[1],
      io_MemWr_invInputs[2],
      io_inst[5],
      io_MemWr_invInputs[4]};	// @[src/main/IDU_EXU.scala:8:7, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}]
  assign io_RegWr =
    (|{&{io_inst[0],
         io_inst[1],
         io_RegWr_invInputs[0],
         io_RegWr_invInputs[1],
         io_RegWr_invInputs[3],
         io_RegWr_invInputs[4]},
       &{io_inst[0],
         io_inst[1],
         io_RegWr_invInputs[1],
         io_inst[4],
         io_RegWr_invInputs[4]},
       &{io_inst[0],
         io_inst[1],
         io_inst[2],
         io_RegWr_invInputs[2],
         io_inst[5],
         io_inst[6]}})
    | (|{&{io_inst[0],
           io_inst[1],
           io_RegWr_invInputs_1[0],
           io_RegWr_invInputs_1[1],
           io_inst[4],
           io_inst[5],
           io_inst[6],
           io_inst[12]},
         &{io_inst[0],
           io_inst[1],
           io_RegWr_invInputs_1[0],
           io_RegWr_invInputs_1[1],
           io_inst[4],
           io_inst[5],
           io_inst[6],
           io_inst[13]}});	// @[src/main/IDU_EXU.scala:8:7, :321:41, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}]
  assign io_MemtoReg =
    &{io_inst[0],
      io_inst[1],
      io_MemtoReg_invInputs[0],
      io_MemtoReg_invInputs[1],
      io_MemtoReg_invInputs[2],
      io_MemtoReg_invInputs[3],
      io_MemtoReg_invInputs[4]};	// @[src/main/IDU_EXU.scala:8:7, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}]
  assign io_ebreak =
    &{io_inst[0],
      io_inst[1],
      io_ebreak_invInputs[0],
      io_ebreak_invInputs[1],
      io_inst[4],
      io_inst[5],
      io_inst[6],
      io_ebreak_invInputs[5],
      io_ebreak_invInputs[6],
      io_ebreak_invInputs[7],
      io_ebreak_invInputs[8],
      io_ebreak_invInputs[9],
      io_ebreak_invInputs[10],
      io_ebreak_invInputs[11],
      io_ebreak_invInputs[12],
      io_ebreak_invInputs[13],
      io_ebreak_invInputs[14],
      io_ebreak_invInputs[15],
      io_ebreak_invInputs[16],
      io_ebreak_invInputs[17],
      io_inst[20],
      io_ebreak_invInputs[19],
      io_ebreak_invInputs[20],
      io_ebreak_invInputs[21],
      io_ebreak_invInputs[22],
      io_ebreak_invInputs[23],
      io_ebreak_invInputs[24],
      io_ebreak_invInputs[25],
      io_ebreak_invInputs[26],
      io_ebreak_invInputs[27],
      io_ebreak_invInputs[28],
      io_ebreak_invInputs[29]};	// @[src/main/IDU_EXU.scala:8:7, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}]
endmodule

// external module ysyx_23060336_EBREAK

// external module SRAM_READ

module ysyx_23060336_LSU_WBU(	// @[src/main/LSU_WBU.scala:6:7]
  input         clock,	// @[src/main/LSU_WBU.scala:6:7]
                reset,	// @[src/main/LSU_WBU.scala:6:7]
                io_axi_awready,	// @[src/main/LSU_WBU.scala:7:14]
  output        io_axi_awvalid,	// @[src/main/LSU_WBU.scala:7:14]
  output [31:0] io_axi_awaddr,	// @[src/main/LSU_WBU.scala:7:14]
  output [2:0]  io_axi_awsize,	// @[src/main/LSU_WBU.scala:7:14]
  input         io_axi_wready,	// @[src/main/LSU_WBU.scala:7:14]
  output        io_axi_wvalid,	// @[src/main/LSU_WBU.scala:7:14]
  output [31:0] io_axi_wdata,	// @[src/main/LSU_WBU.scala:7:14]
  output [3:0]  io_axi_wstrb,	// @[src/main/LSU_WBU.scala:7:14]
  output        io_axi_wlast,	// @[src/main/LSU_WBU.scala:7:14]
  input         io_axi_bvalid,	// @[src/main/LSU_WBU.scala:7:14]
                io_axi_arready,	// @[src/main/LSU_WBU.scala:7:14]
  output        io_axi_arvalid,	// @[src/main/LSU_WBU.scala:7:14]
  output [31:0] io_axi_araddr,	// @[src/main/LSU_WBU.scala:7:14]
  output [2:0]  io_axi_arsize,	// @[src/main/LSU_WBU.scala:7:14]
  output        io_axi_rready,	// @[src/main/LSU_WBU.scala:7:14]
  input         io_axi_rvalid,	// @[src/main/LSU_WBU.scala:7:14]
  input  [31:0] io_axi_rdata,	// @[src/main/LSU_WBU.scala:7:14]
  input  [63:0] io_ifu_clk_count,	// @[src/main/LSU_WBU.scala:7:14]
  input  [31:0] io_ifu_psram_count,	// @[src/main/LSU_WBU.scala:7:14]
                io_ifu_flash_count,	// @[src/main/LSU_WBU.scala:7:14]
  input  [63:0] io_ifu_psram_clk,	// @[src/main/LSU_WBU.scala:7:14]
                io_ifu_flash_clk,	// @[src/main/LSU_WBU.scala:7:14]
  input  [31:0] io_result,	// @[src/main/LSU_WBU.scala:7:14]
                io_dnpc_in,	// @[src/main/LSU_WBU.scala:7:14]
                io_src2,	// @[src/main/LSU_WBU.scala:7:14]
                io_Csr,	// @[src/main/LSU_WBU.scala:7:14]
  input  [11:0] io_csr_in,	// @[src/main/LSU_WBU.scala:7:14]
  input  [4:0]  io_rd_in,	// @[src/main/LSU_WBU.scala:7:14]
  input  [3:0]  io_instType,	// @[src/main/LSU_WBU.scala:7:14]
                io_wstrb,	// @[src/main/LSU_WBU.scala:7:14]
  input  [2:0]  io_awsize,	// @[src/main/LSU_WBU.scala:7:14]
                io_RegNum,	// @[src/main/LSU_WBU.scala:7:14]
                io_arsize,	// @[src/main/LSU_WBU.scala:7:14]
  input         io_CsrWr_in,	// @[src/main/LSU_WBU.scala:7:14]
                io_RegWr_in,	// @[src/main/LSU_WBU.scala:7:14]
                io_ecall_in,	// @[src/main/LSU_WBU.scala:7:14]
                io_MemWr,	// @[src/main/LSU_WBU.scala:7:14]
                io_MemtoReg,	// @[src/main/LSU_WBU.scala:7:14]
                io_ebreak,	// @[src/main/LSU_WBU.scala:7:14]
                io_in_valid,	// @[src/main/LSU_WBU.scala:7:14]
  output [31:0] io_dnpc,	// @[src/main/LSU_WBU.scala:7:14]
                io_regdata,	// @[src/main/LSU_WBU.scala:7:14]
                io_csrdata,	// @[src/main/LSU_WBU.scala:7:14]
  output [11:0] io_csr,	// @[src/main/LSU_WBU.scala:7:14]
  output [4:0]  io_rd,	// @[src/main/LSU_WBU.scala:7:14]
  output        io_CsrWr,	// @[src/main/LSU_WBU.scala:7:14]
                io_RegWr,	// @[src/main/LSU_WBU.scala:7:14]
                io_ecall,	// @[src/main/LSU_WBU.scala:7:14]
                io_out_valid	// @[src/main/LSU_WBU.scala:7:14]
);

  wire        prepare;	// @[src/main/LSU_WBU.scala:91:45]
  reg  [31:0] rdata;	// @[src/main/LSU_WBU.scala:57:26]
  reg  [2:0]  state;	// @[src/main/LSU_WBU.scala:62:22]
  reg  [2:0]  casez_tmp;	// @[src/main/LSU_WBU.scala:63:36]
  wire [2:0]  _state_T_10 = {2'h2, ~io_CsrWr_in};	// @[src/main/LSU_WBU.scala:64:76, :74:33]
  wire [2:0]  _state_T_14 =
    ~(|state) & io_in_valid ? (io_MemtoReg ? 3'h1 : io_MemWr ? 3'h2 : _state_T_10) : 3'h0;	// @[src/main/LSU_WBU.scala:6:7, :62:22, :63:36, :64:{25,42,61,76}]
  always_comb begin	// @[src/main/LSU_WBU.scala:63:36]
    casez (state)	// @[src/main/LSU_WBU.scala:62:22, :63:36]
      3'b000:
        casez_tmp = _state_T_14;	// @[src/main/LSU_WBU.scala:63:36, :64:25]
      3'b001:
        casez_tmp = io_axi_arready ? (io_axi_rvalid ? _state_T_10 : 3'h3) : 3'h1;	// @[src/main/LSU_WBU.scala:6:7, :63:36, :64:76, :65:{25,45}]
      3'b010:
        casez_tmp = {2'h1, io_axi_wready};	// @[src/main/LSU_WBU.scala:63:36, :66:25, :78:33]
      3'b011:
        casez_tmp = prepare ? _state_T_10 : 3'h3;	// @[src/main/LSU_WBU.scala:6:7, :63:36, :64:76, :67:25, :91:45]
      3'b100:
        casez_tmp = io_RegWr_in ? 3'h5 : 3'h0;	// @[src/main/LSU_WBU.scala:6:7, :63:36, :68:25]
      3'b101:
        casez_tmp = 3'h0;	// @[src/main/LSU_WBU.scala:6:7, :63:36]
      3'b110:
        casez_tmp = _state_T_14;	// @[src/main/LSU_WBU.scala:63:36, :64:25]
      default:
        casez_tmp = _state_T_14;	// @[src/main/LSU_WBU.scala:63:36, :64:25]
    endcase	// @[src/main/LSU_WBU.scala:62:22, :63:36]
  end // always_comb
  wire        io_out_valid_0 = state == 3'h5;	// @[src/main/LSU_WBU.scala:6:7, :62:22, :72:25]
  reg  [31:0] casez_tmp_0;	// @[src/main/LSU_WBU.scala:76:17]
  always_comb begin	// @[src/main/LSU_WBU.scala:76:{17,33}, :77:{17,33}, :78:{17,33}]
    casez (io_result[1:0])	// @[src/main/LSU_WBU.scala:74:27, :76:{17,33}, :77:{17,33}, :78:{17,33}]
      2'b00:
        casez_tmp_0 = io_axi_rdata;	// @[src/main/LSU_WBU.scala:76:{17,33}, :77:{17,33}, :78:{17,33}]
      2'b01:
        casez_tmp_0 = {24'h0, io_axi_rdata[15:8]};	// @[src/main/LSU_WBU.scala:76:{17,33,50}, :77:{17,33}, :78:{17,33,45,73}]
      2'b10:
        casez_tmp_0 = {24'h0, io_axi_rdata[23:16]};	// @[src/main/LSU_WBU.scala:76:{17,33,50}, :77:{17,33,45,73}, :78:{17,33}]
      default:
        casez_tmp_0 = {24'h0, io_axi_rdata[31:24]};	// @[src/main/LSU_WBU.scala:76:{17,33,45,50,73}, :77:{17,33}, :78:{17,33}]
    endcase	// @[src/main/LSU_WBU.scala:74:27, :76:{17,33}, :77:{17,33}, :78:{17,33}]
  end // always_comb
  reg  [31:0] casez_tmp_1;	// @[src/main/LSU_WBU.scala:82:17]
  always_comb begin	// @[src/main/LSU_WBU.scala:82:{17,33}, :83:{17,33}, :84:{17,33}]
    casez (io_result[1:0])	// @[src/main/LSU_WBU.scala:74:27, :82:{17,33}, :83:{17,33}, :84:{17,33}]
      2'b00:
        casez_tmp_1 = {24'h0, io_src2[7:0]};	// @[src/main/LSU_WBU.scala:76:50, :82:{17,33,57}, :83:{17,33}, :84:{17,33,97}]
      2'b01:
        casez_tmp_1 = {16'h0, io_src2[7:0], 8'h0};	// @[src/main/LSU_WBU.scala:74:50, :82:{17,33,57}, :83:{17,33,54}, :84:{17,33,49}]
      2'b10:
        casez_tmp_1 = {8'h0, io_src2[7:0], 16'h0};	// @[src/main/LSU_WBU.scala:74:50, :82:{17,33,57}, :83:{17,33,49,54}, :84:{17,33}]
      default:
        casez_tmp_1 = {io_src2[7:0], 24'h0};	// @[src/main/LSU_WBU.scala:76:50, :82:{17,33,49,57}, :83:{17,33}, :84:{17,33}]
    endcase	// @[src/main/LSU_WBU.scala:74:27, :82:{17,33}, :83:{17,33}, :84:{17,33}]
  end // always_comb
  wire [3:0]  _GEN = {io_wstrb[1:0], 2'h0};	// @[src/main/LSU_WBU.scala:75:33, :87:51]
  reg  [3:0]  casez_tmp_2;	// @[src/main/LSU_WBU.scala:89:17]
  always_comb begin	// @[src/main/LSU_WBU.scala:89:{17,33,60,76,103,119}]
    casez (io_result[1:0])	// @[src/main/LSU_WBU.scala:74:27, :89:{17,33,60,76,103,119}]
      2'b00:
        casez_tmp_2 = io_wstrb;	// @[src/main/LSU_WBU.scala:89:{17,33,60,76,103,119}]
      2'b01:
        casez_tmp_2 = {io_wstrb[2:0], 1'h0};	// @[src/main/LSU_WBU.scala:64:43, :89:{17,33,60,76,103,119,137}]
      2'b10:
        casez_tmp_2 = _GEN;	// @[src/main/LSU_WBU.scala:87:51, :89:{17,33,60,76,103,119}]
      default:
        casez_tmp_2 = {io_wstrb[0], 3'h0};	// @[src/main/LSU_WBU.scala:6:7, :89:{17,33,51,60,76,103,119}]
    endcase	// @[src/main/LSU_WBU.scala:74:27, :89:{17,33,60,76,103,119}]
  end // always_comb
  assign prepare = io_MemtoReg & io_axi_rvalid | io_MemWr & io_axi_bvalid;	// @[src/main/LSU_WBU.scala:91:{27,45,58}]
  wire [31:0] DataOut = io_out_valid_0 & io_MemtoReg ? rdata : io_result;	// @[src/main/LSU_WBU.scala:57:26, :72:25, :92:{17,38}]
  wire        _io_axi_wlast_T = state == 3'h2;	// @[src/main/LSU_WBU.scala:6:7, :62:22, :111:67]
  wire        io_axi_awvalid_0 = ~reset & io_MemWr & _io_axi_wlast_T;	// @[src/main/LSU_WBU.scala:111:{24,67}]
  wire        _io_axi_wstrb_T = io_awsize == 3'h0;	// @[src/main/LSU_WBU.scala:6:7, :118:35]
  wire        _io_axi_wstrb_T_1 = io_awsize == 3'h1;	// @[src/main/LSU_WBU.scala:6:7, :118:67]
  wire [31:0] io_axi_wdata_0 =
    _io_axi_wstrb_T
      ? casez_tmp_1
      : _io_axi_wstrb_T_1
          ? (io_result[1:0] == 2'h2
               ? {io_src2[15:0], 16'h0}
               : (|(io_result[1:0])) ? 32'h0 : io_src2)
          : io_src2;	// @[src/main/LSU_WBU.scala:57:26, :74:{27,33,50}, :75:33, :80:{17,33,50}, :81:17, :82:17, :118:{24,35,56,67}]
  wire        _io_axi_rready_T_1 = state == 3'h1;	// @[src/main/LSU_WBU.scala:6:7, :62:22, :121:55]
  wire        io_axi_arvalid_0 = ~reset & _io_axi_rready_T_1 & io_MemtoReg;	// @[src/main/LSU_WBU.scala:111:24, :121:{24,55}]
  always @(posedge clock) begin	// @[src/main/LSU_WBU.scala:6:7]
    if (reset) begin	// @[src/main/LSU_WBU.scala:6:7]
      rdata <= 32'h0;	// @[src/main/LSU_WBU.scala:57:26]
      state <= 3'h0;	// @[src/main/LSU_WBU.scala:6:7, :62:22]
    end
    else begin	// @[src/main/LSU_WBU.scala:6:7]
      if (io_axi_rvalid)	// @[src/main/LSU_WBU.scala:7:14]
        rdata <=
          io_arsize == 3'h0
            ? casez_tmp_0
            : io_arsize == 3'h1
                ? (io_result[1:0] == 2'h2
                     ? {16'h0, io_axi_rdata[31:16]}
                     : (|(io_result[1:0])) ? 32'h0 : io_axi_rdata)
                : io_axi_rdata;	// @[src/main/LSU_WBU.scala:6:7, :57:26, :74:{17,27,33,45,50,73}, :75:{17,33}, :76:17, :131:{17,28,49,60}]
      state <= casez_tmp;	// @[src/main/LSU_WBU.scala:62:22, :63:36]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/LSU_WBU.scala:6:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/LSU_WBU.scala:6:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/LSU_WBU.scala:6:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];	// @[src/main/LSU_WBU.scala:6:7]
    initial begin	// @[src/main/LSU_WBU.scala:6:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/LSU_WBU.scala:6:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/LSU_WBU.scala:6:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/LSU_WBU.scala:6:7]
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// @[src/main/LSU_WBU.scala:6:7]
        end	// @[src/main/LSU_WBU.scala:6:7]
        rdata = _RANDOM[3'h0];	// @[src/main/LSU_WBU.scala:6:7, :57:26]
        state = _RANDOM[3'h4][2:0];	// @[src/main/LSU_WBU.scala:6:7, :62:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/LSU_WBU.scala:6:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/LSU_WBU.scala:6:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ysyx_23060336_EBREAK ebreak (	// @[src/main/LSU_WBU.scala:43:25]
    .clock           (clock),
    .ebreak          (io_ebreak),
    .in_valid        (io_in_valid),
    .out_valid       (io_out_valid_0),	// @[src/main/LSU_WBU.scala:72:25]
    .axi_rvalid      (io_axi_rvalid),
    .state           (state),	// @[src/main/LSU_WBU.scala:62:22]
    .instType        (io_instType),
    .ifu_psram_count (io_ifu_psram_count),
    .ifu_flash_count (io_ifu_flash_count),
    .ifu_clk_count   (io_ifu_clk_count),
    .ifu_psram_clk   (io_ifu_psram_clk),
    .ifu_flash_clk   (io_ifu_flash_clk)
  );
  SRAM_READ sram_read (	// @[src/main/LSU_WBU.scala:44:25]
    .clock   (clock),
    .araddr  (io_result),
    .awaddr  (io_result),
    .wdata   (io_axi_wdata_0),	// @[src/main/LSU_WBU.scala:118:24]
    .arsize  ({1'h0, io_arsize}),	// @[src/main/LSU_WBU.scala:64:43, :140:24]
    .wstrb   (io_wstrb),
    .arvalid (io_axi_arvalid_0),	// @[src/main/LSU_WBU.scala:121:24]
    .awvalid (io_axi_awvalid_0),	// @[src/main/LSU_WBU.scala:111:24]
    .arready (io_axi_arready),
    .awready (io_axi_awready)
  );
  assign io_axi_awvalid = io_axi_awvalid_0;	// @[src/main/LSU_WBU.scala:6:7, :111:24]
  assign io_axi_awaddr = io_result;	// @[src/main/LSU_WBU.scala:6:7]
  assign io_axi_awsize = io_awsize;	// @[src/main/LSU_WBU.scala:6:7]
  assign io_axi_wvalid = ~reset & io_MemWr & _io_axi_wlast_T;	// @[src/main/LSU_WBU.scala:6:7, :111:{24,67}, :117:24]
  assign io_axi_wdata = io_axi_wdata_0;	// @[src/main/LSU_WBU.scala:6:7, :118:24]
  assign io_axi_wstrb =
    _io_axi_wstrb_T
      ? casez_tmp_2
      : _io_axi_wstrb_T_1
          ? (io_result[1:0] == 2'h2 ? _GEN : (|(io_result[1:0])) ? 4'h0 : io_wstrb)
          : io_wstrb;	// @[src/main/LSU_WBU.scala:6:7, :74:{27,33}, :75:33, :87:{17,33,51}, :88:17, :89:17, :118:{35,67}, :128:{24,56}]
  assign io_axi_wlast = io_MemWr & _io_axi_wlast_T;	// @[src/main/LSU_WBU.scala:6:7, :111:67, :119:30]
  assign io_axi_arvalid = io_axi_arvalid_0;	// @[src/main/LSU_WBU.scala:6:7, :121:24]
  assign io_axi_araddr = io_result;	// @[src/main/LSU_WBU.scala:6:7]
  assign io_axi_arsize = io_arsize;	// @[src/main/LSU_WBU.scala:6:7]
  assign io_axi_rready = ~(|state) | _io_axi_rready_T_1 | state == 3'h3;	// @[src/main/LSU_WBU.scala:6:7, :62:22, :63:36, :121:55, :127:{27,65,74}]
  assign io_dnpc = io_dnpc_in;	// @[src/main/LSU_WBU.scala:6:7]
  assign io_regdata =
    io_CsrWr_in
      ? io_Csr
      : io_RegNum == 3'h2 | io_RegNum == 3'h5
          ? DataOut
          : io_RegNum == 3'h3
              ? {24'h0, DataOut[7:0]}
              : io_RegNum == 3'h4
                  ? {16'h0, DataOut[15:0]}
                  : io_RegNum == 3'h0
                      ? {{24{DataOut[7]}}, DataOut[7:0]}
                      : io_RegNum == 3'h1 ? {{16{DataOut[15]}}, DataOut[15:0]} : DataOut;	// @[src/main/LSU_WBU.scala:6:7, :74:50, :76:50, :92:17, :102:20, :103:{20,31}, :104:{20,31}, :105:{20,31,48,71}, :106:{20,31,48,71}, :107:{20,31,48,53,65}, :108:{20,31,48,53,65}]
  assign io_csrdata = io_result;	// @[src/main/LSU_WBU.scala:6:7]
  assign io_csr = io_csr_in;	// @[src/main/LSU_WBU.scala:6:7]
  assign io_rd = io_rd_in;	// @[src/main/LSU_WBU.scala:6:7]
  assign io_CsrWr = io_CsrWr_in & state == 3'h4;	// @[src/main/LSU_WBU.scala:6:7, :62:22, :96:{29,39}]
  assign io_RegWr = io_RegWr_in & io_out_valid_0;	// @[src/main/LSU_WBU.scala:6:7, :72:25, :97:29]
  assign io_ecall = io_ecall_in;	// @[src/main/LSU_WBU.scala:6:7]
  assign io_out_valid = io_out_valid_0;	// @[src/main/LSU_WBU.scala:6:7, :72:25]
endmodule

// VCS coverage exclude_file
module ysyx_23060336_regs_16x32(	// @[src/main/REG.scala:17:31]
  input  [3:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [3:0]  R1_addr,
  input         R1_en,
                R1_clk,
  output [31:0] R1_data,
  input  [3:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data
);

  reg [31:0] Memory[0:15];	// @[src/main/REG.scala:17:31]
  always @(posedge W0_clk) begin	// @[src/main/REG.scala:17:31]
    if (W0_en & 1'h1)	// @[src/main/REG.scala:17:31]
      Memory[W0_addr] <= W0_data;	// @[src/main/REG.scala:17:31]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// @[src/main/REG.scala:17:31]
    reg [31:0] _RANDOM_MEM;	// @[src/main/REG.scala:17:31]
    initial begin	// @[src/main/REG.scala:17:31]
      `INIT_RANDOM_PROLOG_	// @[src/main/REG.scala:17:31]
      `ifdef RANDOMIZE_MEM_INIT	// @[src/main/REG.scala:17:31]
        for (logic [4:0] i = 5'h0; i < 5'h10; i += 5'h1) begin
          _RANDOM_MEM = `RANDOM;	// @[src/main/REG.scala:17:31]
          Memory[i[3:0]] = _RANDOM_MEM;	// @[src/main/REG.scala:17:31]
        end	// @[src/main/REG.scala:17:31]
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// @[src/main/REG.scala:17:31]
  assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;	// @[src/main/REG.scala:17:31]
endmodule

module ysyx_23060336_REG(	// @[src/main/REG.scala:6:7]
  input         clock,	// @[src/main/REG.scala:6:7]
  input  [4:0]  io_raddr1,	// @[src/main/REG.scala:7:14]
                io_raddr2,	// @[src/main/REG.scala:7:14]
  output [31:0] io_rdata1,	// @[src/main/REG.scala:7:14]
                io_rdata2,	// @[src/main/REG.scala:7:14]
  input         io_wen,	// @[src/main/REG.scala:7:14]
  input  [4:0]  io_waddr,	// @[src/main/REG.scala:7:14]
  input  [31:0] io_wdata	// @[src/main/REG.scala:7:14]
);

  wire [31:0] _ysyx_23060336_regs_ext_R0_data;	// @[src/main/REG.scala:17:31]
  wire [31:0] _ysyx_23060336_regs_ext_R1_data;	// @[src/main/REG.scala:17:31]
  ysyx_23060336_regs_16x32 ysyx_23060336_regs_ext (	// @[src/main/REG.scala:17:31]
    .R0_addr (io_raddr2[3:0]),	// @[src/main/REG.scala:20:53]
    .R0_en   (1'h1),	// @[src/main/REG.scala:6:7]
    .R0_clk  (clock),
    .R0_data (_ysyx_23060336_regs_ext_R0_data),
    .R1_addr (io_raddr1[3:0]),	// @[src/main/REG.scala:19:53]
    .R1_en   (1'h1),	// @[src/main/REG.scala:6:7]
    .R1_clk  (clock),
    .R1_data (_ysyx_23060336_regs_ext_R1_data),
    .W0_addr (io_waddr[3:0]),	// @[src/main/REG.scala:23:23]
    .W0_en   (io_wen & (|io_waddr)),	// @[src/main/REG.scala:22:{15,27}]
    .W0_clk  (clock),
    .W0_data (io_wdata)
  );
  assign io_rdata1 = (|io_raddr1) ? _ysyx_23060336_regs_ext_R1_data : 32'h0;	// @[src/main/REG.scala:6:7, :17:31, :19:{19,30}, :20:19]
  assign io_rdata2 = (|io_raddr2) ? _ysyx_23060336_regs_ext_R0_data : 32'h0;	// @[src/main/REG.scala:6:7, :17:31, :20:{19,30}]
endmodule

module ysyx_23060336_CSR(	// @[src/main/CSR.scala:6:7]
  input         clock,	// @[src/main/CSR.scala:6:7]
                reset,	// @[src/main/CSR.scala:6:7]
  input  [11:0] io_raddr,	// @[src/main/CSR.scala:7:14]
  output [31:0] io_rdata,	// @[src/main/CSR.scala:7:14]
  input         io_wen,	// @[src/main/CSR.scala:7:14]
  input  [11:0] io_waddr,	// @[src/main/CSR.scala:7:14]
  input  [31:0] io_wdata,	// @[src/main/CSR.scala:7:14]
  input         io_ecall,	// @[src/main/CSR.scala:7:14]
  input  [31:0] io_mepc_in,	// @[src/main/CSR.scala:7:14]
  output [31:0] io_mepc,	// @[src/main/CSR.scala:7:14]
                io_mtvec	// @[src/main/CSR.scala:7:14]
);

  reg  [31:0] mstatus;	// @[src/main/CSR.scala:21:26]
  reg  [31:0] mtvec;	// @[src/main/CSR.scala:22:26]
  reg  [31:0] mepc;	// @[src/main/CSR.scala:23:26]
  reg  [31:0] mcause;	// @[src/main/CSR.scala:24:26]
  wire        _GEN = io_waddr == 12'h305;	// @[src/main/CSR.scala:39:19]
  wire        _GEN_0 = io_waddr == 12'h300;	// @[src/main/CSR.scala:41:26]
  wire        _GEN_1 = io_waddr == 12'h341;	// @[src/main/CSR.scala:43:26]
  always @(posedge clock) begin	// @[src/main/CSR.scala:6:7]
    if (reset) begin	// @[src/main/CSR.scala:6:7]
      mstatus <= 32'h1800;	// @[src/main/CSR.scala:21:26]
      mtvec <= 32'h0;	// @[src/main/CSR.scala:22:26]
      mepc <= 32'h0;	// @[src/main/CSR.scala:22:26, :23:26]
      mcause <= 32'h0;	// @[src/main/CSR.scala:22:26, :24:26]
    end
    else begin	// @[src/main/CSR.scala:6:7]
      if (~io_wen | _GEN | ~_GEN_0) begin	// @[src/main/CSR.scala:21:26, :38:15, :39:{19,29}, :41:{26,39}]
      end
      else	// @[src/main/CSR.scala:21:26, :38:15, :39:29]
        mstatus <= io_wdata;	// @[src/main/CSR.scala:21:26]
      if (io_wen & _GEN)	// @[src/main/CSR.scala:22:26, :38:15, :39:{19,29}, :40:13]
        mtvec <= io_wdata;	// @[src/main/CSR.scala:22:26]
      if (~io_wen | _GEN | _GEN_0 | ~_GEN_1) begin	// @[src/main/CSR.scala:21:26, :33:18, :38:15, :39:{19,29}, :41:{26,39}, :43:{26,36}]
        if (io_ecall)	// @[src/main/CSR.scala:7:14]
          mepc <= io_mepc_in;	// @[src/main/CSR.scala:23:26]
      end
      else	// @[src/main/CSR.scala:33:18, :38:15, :39:29]
        mepc <= io_wdata;	// @[src/main/CSR.scala:23:26]
      if (~io_wen | _GEN | _GEN_0 | _GEN_1 | io_waddr != 12'h342) begin	// @[src/main/CSR.scala:21:26, :33:18, :38:15, :39:{19,29}, :41:26, :43:26, :45:26]
        if (io_ecall)	// @[src/main/CSR.scala:7:14]
          mcause <= 32'hB;	// @[src/main/CSR.scala:24:26, :34:12]
      end
      else	// @[src/main/CSR.scala:33:18, :38:15, :39:29]
        mcause <= io_wdata;	// @[src/main/CSR.scala:24:26]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/CSR.scala:6:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/CSR.scala:6:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/CSR.scala:6:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:5];	// @[src/main/CSR.scala:6:7]
    initial begin	// @[src/main/CSR.scala:6:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/CSR.scala:6:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/CSR.scala:6:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/CSR.scala:6:7]
        for (logic [2:0] i = 3'h0; i < 3'h6; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// @[src/main/CSR.scala:6:7]
        end	// @[src/main/CSR.scala:6:7]
        mstatus = _RANDOM[3'h2];	// @[src/main/CSR.scala:6:7, :21:26]
        mtvec = _RANDOM[3'h3];	// @[src/main/CSR.scala:6:7, :22:26]
        mepc = _RANDOM[3'h4];	// @[src/main/CSR.scala:6:7, :23:26]
        mcause = _RANDOM[3'h5];	// @[src/main/CSR.scala:6:7, :24:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/CSR.scala:6:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/CSR.scala:6:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_rdata =
    io_raddr == 12'h341
      ? mepc
      : io_raddr == 12'h342
          ? mcause
          : io_raddr == 12'h300
              ? mstatus
              : {22'h0, {20'h0, io_raddr} == mtvec ? 10'h305 : 10'h0};	// @[src/main/CSR.scala:6:7, :21:26, :22:26, :23:26, :24:26, :39:19, :41:26, :43:26, :45:26, :50:{18,28,47,57,80,90,115,125}]
  assign io_mepc = mepc;	// @[src/main/CSR.scala:6:7, :23:26]
  assign io_mtvec = mtvec;	// @[src/main/CSR.scala:6:7, :22:26]
endmodule

module ysyx_23060336_ARBITER(	// @[src/main/ARBITER.scala:6:7]
  input         clock,	// @[src/main/ARBITER.scala:6:7]
                reset,	// @[src/main/ARBITER.scala:6:7]
  output        io_ifu_arready,	// @[src/main/ARBITER.scala:7:14]
  input         io_ifu_arvalid,	// @[src/main/ARBITER.scala:7:14]
  input  [31:0] io_ifu_araddr,	// @[src/main/ARBITER.scala:7:14]
  input         io_ifu_rready,	// @[src/main/ARBITER.scala:7:14]
  output        io_ifu_rvalid,	// @[src/main/ARBITER.scala:7:14]
  output [31:0] io_ifu_rdata,	// @[src/main/ARBITER.scala:7:14]
  output        io_lsu_awready,	// @[src/main/ARBITER.scala:7:14]
  input         io_lsu_awvalid,	// @[src/main/ARBITER.scala:7:14]
  input  [31:0] io_lsu_awaddr,	// @[src/main/ARBITER.scala:7:14]
  input  [2:0]  io_lsu_awsize,	// @[src/main/ARBITER.scala:7:14]
  output        io_lsu_wready,	// @[src/main/ARBITER.scala:7:14]
  input         io_lsu_wvalid,	// @[src/main/ARBITER.scala:7:14]
  input  [31:0] io_lsu_wdata,	// @[src/main/ARBITER.scala:7:14]
  input  [3:0]  io_lsu_wstrb,	// @[src/main/ARBITER.scala:7:14]
  input         io_lsu_wlast,	// @[src/main/ARBITER.scala:7:14]
  output        io_lsu_bvalid,	// @[src/main/ARBITER.scala:7:14]
                io_lsu_arready,	// @[src/main/ARBITER.scala:7:14]
  input         io_lsu_arvalid,	// @[src/main/ARBITER.scala:7:14]
  input  [31:0] io_lsu_araddr,	// @[src/main/ARBITER.scala:7:14]
  input  [2:0]  io_lsu_arsize,	// @[src/main/ARBITER.scala:7:14]
  input         io_lsu_rready,	// @[src/main/ARBITER.scala:7:14]
  output        io_lsu_rvalid,	// @[src/main/ARBITER.scala:7:14]
  output [31:0] io_lsu_rdata,	// @[src/main/ARBITER.scala:7:14]
  input         io_axi_awready,	// @[src/main/ARBITER.scala:7:14]
  output        io_axi_awvalid,	// @[src/main/ARBITER.scala:7:14]
  output [31:0] io_axi_awaddr,	// @[src/main/ARBITER.scala:7:14]
  output [2:0]  io_axi_awsize,	// @[src/main/ARBITER.scala:7:14]
  input         io_axi_wready,	// @[src/main/ARBITER.scala:7:14]
  output        io_axi_wvalid,	// @[src/main/ARBITER.scala:7:14]
  output [31:0] io_axi_wdata,	// @[src/main/ARBITER.scala:7:14]
  output [3:0]  io_axi_wstrb,	// @[src/main/ARBITER.scala:7:14]
  output        io_axi_wlast,	// @[src/main/ARBITER.scala:7:14]
  input         io_axi_bvalid,	// @[src/main/ARBITER.scala:7:14]
                io_axi_arready,	// @[src/main/ARBITER.scala:7:14]
  output        io_axi_arvalid,	// @[src/main/ARBITER.scala:7:14]
  output [31:0] io_axi_araddr,	// @[src/main/ARBITER.scala:7:14]
  output [3:0]  io_axi_arid,	// @[src/main/ARBITER.scala:7:14]
  output [2:0]  io_axi_arsize,	// @[src/main/ARBITER.scala:7:14]
  output        io_axi_rready,	// @[src/main/ARBITER.scala:7:14]
  input         io_axi_rvalid,	// @[src/main/ARBITER.scala:7:14]
  input  [31:0] io_axi_rdata	// @[src/main/ARBITER.scala:7:14]
);

  reg  [1:0] state;	// @[src/main/ARBITER.scala:74:22]
  reg  [1:0] casez_tmp;	// @[src/main/ARBITER.scala:75:40]
  always_comb begin	// @[src/main/ARBITER.scala:75:40]
    casez (state)	// @[src/main/ARBITER.scala:74:22, :75:40]
      2'b00:
        casez_tmp = {1'h0, io_lsu_arvalid};	// @[src/main/ARBITER.scala:6:7, :75:40, :76:22]
      2'b01:
        casez_tmp = {io_axi_rvalid, 1'h1};	// @[src/main/ARBITER.scala:6:7, :75:40, :77:22]
      2'b10:
        casez_tmp = {~io_axi_rvalid, 1'h0};	// @[src/main/ARBITER.scala:6:7, :75:40, :79:22]
      default:
        casez_tmp = io_ifu_arvalid ? 2'h2 : {~io_lsu_arvalid, 1'h1};	// @[src/main/ARBITER.scala:6:7, :74:22, :75:40, :78:{22,49}]
    endcase	// @[src/main/ARBITER.scala:74:22, :75:40]
  end // always_comb
  wire       _io_lsu_arready_T = state == 2'h1;	// @[src/main/ARBITER.scala:74:22, :76:22, :114:15]
  always @(posedge clock) begin	// @[src/main/ARBITER.scala:6:7]
    if (reset)	// @[src/main/ARBITER.scala:6:7]
      state <= 2'h2;	// @[src/main/ARBITER.scala:74:22]
    else	// @[src/main/ARBITER.scala:6:7]
      state <= casez_tmp;	// @[src/main/ARBITER.scala:74:22, :75:40]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/ARBITER.scala:6:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/ARBITER.scala:6:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/ARBITER.scala:6:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// @[src/main/ARBITER.scala:6:7]
    initial begin	// @[src/main/ARBITER.scala:6:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/ARBITER.scala:6:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/ARBITER.scala:6:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/ARBITER.scala:6:7]
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// @[src/main/ARBITER.scala:6:7]
        state = _RANDOM[/*Zero width*/ 1'b0][1:0];	// @[src/main/ARBITER.scala:6:7, :74:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/ARBITER.scala:6:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/ARBITER.scala:6:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_ifu_arready = io_axi_arready;	// @[src/main/ARBITER.scala:6:7]
  assign io_ifu_rvalid = ~_io_lsu_arready_T & io_axi_rvalid;	// @[src/main/ARBITER.scala:6:7, :114:{15,27}, :122:21, :132:21]
  assign io_ifu_rdata = io_axi_rdata;	// @[src/main/ARBITER.scala:6:7]
  assign io_lsu_awready = io_axi_awready;	// @[src/main/ARBITER.scala:6:7]
  assign io_lsu_wready = io_axi_wready;	// @[src/main/ARBITER.scala:6:7]
  assign io_lsu_bvalid = io_axi_bvalid;	// @[src/main/ARBITER.scala:6:7]
  assign io_lsu_arready = io_axi_arready & _io_lsu_arready_T;	// @[src/main/ARBITER.scala:6:7, :114:15, :137:28]
  assign io_lsu_rvalid = _io_lsu_arready_T & io_axi_rvalid;	// @[src/main/ARBITER.scala:6:7, :114:{15,27}, :123:21, :133:21]
  assign io_lsu_rdata = io_axi_rdata;	// @[src/main/ARBITER.scala:6:7]
  assign io_axi_awvalid = io_lsu_awvalid;	// @[src/main/ARBITER.scala:6:7]
  assign io_axi_awaddr = io_lsu_awaddr;	// @[src/main/ARBITER.scala:6:7]
  assign io_axi_awsize = io_lsu_awsize;	// @[src/main/ARBITER.scala:6:7]
  assign io_axi_wvalid = io_lsu_wvalid;	// @[src/main/ARBITER.scala:6:7]
  assign io_axi_wdata = io_lsu_wdata;	// @[src/main/ARBITER.scala:6:7]
  assign io_axi_wstrb = io_lsu_wstrb;	// @[src/main/ARBITER.scala:6:7]
  assign io_axi_wlast = io_lsu_wlast;	// @[src/main/ARBITER.scala:6:7]
  assign io_axi_arvalid = _io_lsu_arready_T ? io_lsu_arvalid : io_ifu_arvalid;	// @[src/main/ARBITER.scala:6:7, :114:{15,27}, :119:21, :129:21]
  assign io_axi_araddr = _io_lsu_arready_T ? io_lsu_araddr : io_ifu_araddr;	// @[src/main/ARBITER.scala:6:7, :114:{15,27}, :117:21, :127:21]
  assign io_axi_arid = _io_lsu_arready_T ? 4'h2 : 4'h1;	// @[src/main/ARBITER.scala:6:7, :7:14, :114:{15,27}, :115:21, :125:21]
  assign io_axi_arsize = _io_lsu_arready_T ? io_lsu_arsize : 3'h2;	// @[src/main/ARBITER.scala:6:7, :7:14, :114:{15,27}, :118:21, :128:21]
  assign io_axi_rready = _io_lsu_arready_T ? io_lsu_rready : io_ifu_rready;	// @[src/main/ARBITER.scala:6:7, :114:{15,27}, :121:21, :131:21]
endmodule

module ysyx_23060336_XBAR(	// @[src/main/XBAR.scala:6:7]
  output        io_slave_awready,	// @[src/main/XBAR.scala:7:14]
  input         io_slave_awvalid,	// @[src/main/XBAR.scala:7:14]
  input  [31:0] io_slave_awaddr,	// @[src/main/XBAR.scala:7:14]
  input  [2:0]  io_slave_awsize,	// @[src/main/XBAR.scala:7:14]
  output        io_slave_wready,	// @[src/main/XBAR.scala:7:14]
  input         io_slave_wvalid,	// @[src/main/XBAR.scala:7:14]
  input  [31:0] io_slave_wdata,	// @[src/main/XBAR.scala:7:14]
  input  [3:0]  io_slave_wstrb,	// @[src/main/XBAR.scala:7:14]
  input         io_slave_wlast,	// @[src/main/XBAR.scala:7:14]
  output        io_slave_bvalid,	// @[src/main/XBAR.scala:7:14]
                io_slave_arready,	// @[src/main/XBAR.scala:7:14]
  input         io_slave_arvalid,	// @[src/main/XBAR.scala:7:14]
  input  [31:0] io_slave_araddr,	// @[src/main/XBAR.scala:7:14]
  input  [3:0]  io_slave_arid,	// @[src/main/XBAR.scala:7:14]
  input  [2:0]  io_slave_arsize,	// @[src/main/XBAR.scala:7:14]
  input         io_slave_rready,	// @[src/main/XBAR.scala:7:14]
  output        io_slave_rvalid,	// @[src/main/XBAR.scala:7:14]
  output [31:0] io_slave_rdata,	// @[src/main/XBAR.scala:7:14]
  input         io_master_awready,	// @[src/main/XBAR.scala:7:14]
  output        io_master_awvalid,	// @[src/main/XBAR.scala:7:14]
  output [31:0] io_master_awaddr,	// @[src/main/XBAR.scala:7:14]
  output [2:0]  io_master_awsize,	// @[src/main/XBAR.scala:7:14]
  input         io_master_wready,	// @[src/main/XBAR.scala:7:14]
  output        io_master_wvalid,	// @[src/main/XBAR.scala:7:14]
  output [31:0] io_master_wdata,	// @[src/main/XBAR.scala:7:14]
  output [3:0]  io_master_wstrb,	// @[src/main/XBAR.scala:7:14]
  output        io_master_wlast,	// @[src/main/XBAR.scala:7:14]
  input         io_master_bvalid,	// @[src/main/XBAR.scala:7:14]
                io_master_arready,	// @[src/main/XBAR.scala:7:14]
  output        io_master_arvalid,	// @[src/main/XBAR.scala:7:14]
  output [31:0] io_master_araddr,	// @[src/main/XBAR.scala:7:14]
  output [3:0]  io_master_arid,	// @[src/main/XBAR.scala:7:14]
  output [2:0]  io_master_arsize,	// @[src/main/XBAR.scala:7:14]
  output        io_master_rready,	// @[src/main/XBAR.scala:7:14]
  input         io_master_rvalid,	// @[src/main/XBAR.scala:7:14]
  input  [31:0] io_master_rdata,	// @[src/main/XBAR.scala:7:14]
  input         io_clint_arready,	// @[src/main/XBAR.scala:7:14]
  output        io_clint_arvalid,	// @[src/main/XBAR.scala:7:14]
  output [31:0] io_clint_araddr,	// @[src/main/XBAR.scala:7:14]
  input         io_clint_rvalid,	// @[src/main/XBAR.scala:7:14]
  input  [31:0] io_clint_rdata	// @[src/main/XBAR.scala:7:14]
);

  wire _GEN = (|(io_slave_araddr[31:25])) & io_slave_araddr < 32'h2010000;	// @[src/main/XBAR.scala:19:{24,39,58}]
  assign io_slave_awready = io_master_awready;	// @[src/main/XBAR.scala:6:7]
  assign io_slave_wready = io_master_wready;	// @[src/main/XBAR.scala:6:7]
  assign io_slave_bvalid = io_master_bvalid;	// @[src/main/XBAR.scala:6:7]
  assign io_slave_arready = _GEN ? io_clint_arready : io_master_arready;	// @[src/main/XBAR.scala:6:7, :19:{39,72}, :21:23, :28:23]
  assign io_slave_rvalid = _GEN ? io_clint_rvalid : io_master_rvalid;	// @[src/main/XBAR.scala:6:7, :19:{39,72}, :22:23, :29:23]
  assign io_slave_rdata = _GEN ? io_clint_rdata : io_master_rdata;	// @[src/main/XBAR.scala:6:7, :19:{39,72}, :23:23, :30:23]
  assign io_master_awvalid = io_slave_awvalid;	// @[src/main/XBAR.scala:6:7]
  assign io_master_awaddr = io_slave_awaddr;	// @[src/main/XBAR.scala:6:7]
  assign io_master_awsize = io_slave_awsize;	// @[src/main/XBAR.scala:6:7]
  assign io_master_wvalid = io_slave_wvalid;	// @[src/main/XBAR.scala:6:7]
  assign io_master_wdata = io_slave_wdata;	// @[src/main/XBAR.scala:6:7]
  assign io_master_wstrb = io_slave_wstrb;	// @[src/main/XBAR.scala:6:7]
  assign io_master_wlast = io_slave_wlast;	// @[src/main/XBAR.scala:6:7]
  assign io_master_arvalid = ~_GEN & io_slave_arvalid;	// @[src/main/XBAR.scala:6:7, :19:{39,72}, :25:23, :27:23]
  assign io_master_araddr = io_slave_araddr;	// @[src/main/XBAR.scala:6:7]
  assign io_master_arid = io_slave_arid;	// @[src/main/XBAR.scala:6:7]
  assign io_master_arsize = io_slave_arsize;	// @[src/main/XBAR.scala:6:7]
  assign io_master_rready = io_slave_rready;	// @[src/main/XBAR.scala:6:7]
  assign io_clint_arvalid = _GEN & io_slave_arvalid;	// @[src/main/XBAR.scala:6:7, :19:{39,72}, :20:23, :32:23]
  assign io_clint_araddr = io_slave_araddr;	// @[src/main/XBAR.scala:6:7]
endmodule

module ysyx_23060336_CLINT(	// @[src/main/CLINT.scala:6:7]
  input         clock,	// @[src/main/CLINT.scala:6:7]
                reset,	// @[src/main/CLINT.scala:6:7]
  output        io_axi_arready,	// @[src/main/CLINT.scala:7:14]
  input         io_axi_arvalid,	// @[src/main/CLINT.scala:7:14]
  input  [31:0] io_axi_araddr,	// @[src/main/CLINT.scala:7:14]
  output        io_axi_rvalid,	// @[src/main/CLINT.scala:7:14]
  output [31:0] io_axi_rdata	// @[src/main/CLINT.scala:7:14]
);

  reg [31:0] mtimel;	// @[src/main/CLINT.scala:11:23]
  reg [31:0] mtimeh;	// @[src/main/CLINT.scala:12:23]
  always @(posedge clock) begin	// @[src/main/CLINT.scala:6:7]
    if (reset) begin	// @[src/main/CLINT.scala:6:7]
      mtimel <= 32'h0;	// @[src/main/CLINT.scala:11:23]
      mtimeh <= 32'h0;	// @[src/main/CLINT.scala:11:23, :12:23]
    end
    else begin	// @[src/main/CLINT.scala:6:7]
      mtimel <= mtimel + 32'h1;	// @[src/main/CLINT.scala:11:23, :16:22, :19:20]
      if (&mtimel)	// @[src/main/CLINT.scala:11:23, :14:15]
        mtimeh <= mtimeh + 32'h1;	// @[src/main/CLINT.scala:12:23, :16:22]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/CLINT.scala:6:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/CLINT.scala:6:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/CLINT.scala:6:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];	// @[src/main/CLINT.scala:6:7]
    initial begin	// @[src/main/CLINT.scala:6:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/CLINT.scala:6:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/CLINT.scala:6:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/CLINT.scala:6:7]
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// @[src/main/CLINT.scala:6:7]
        end	// @[src/main/CLINT.scala:6:7]
        mtimel = _RANDOM[1'h0];	// @[src/main/CLINT.scala:6:7, :11:23]
        mtimeh = _RANDOM[1'h1];	// @[src/main/CLINT.scala:6:7, :12:23]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/CLINT.scala:6:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/CLINT.scala:6:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_axi_arready = ~reset;	// @[src/main/CLINT.scala:6:7, :15:12, :16:22, :26:24]
  assign io_axi_rvalid = io_axi_arvalid;	// @[src/main/CLINT.scala:6:7]
  assign io_axi_rdata = io_axi_araddr == 32'h2000000 ? mtimel : mtimeh;	// @[src/main/CLINT.scala:6:7, :11:23, :12:23, :29:{24,39}]
endmodule

// VCS coverage exclude_file
module ysyx_23060336_tag_1024x20(	// @[src/main/ICACHE.scala:100:32]
  input  [9:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [19:0] R0_data,
  input  [9:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [19:0] W0_data
);

  reg [19:0] Memory[0:1023];	// @[src/main/ICACHE.scala:100:32]
  always @(posedge W0_clk) begin	// @[src/main/ICACHE.scala:100:32]
    if (W0_en & 1'h1)	// @[src/main/ICACHE.scala:100:32]
      Memory[W0_addr] <= W0_data;	// @[src/main/ICACHE.scala:100:32]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// @[src/main/ICACHE.scala:100:32]
    reg [31:0] _RANDOM_MEM;	// @[src/main/ICACHE.scala:100:32]
    initial begin	// @[src/main/ICACHE.scala:100:32]
      `INIT_RANDOM_PROLOG_	// @[src/main/ICACHE.scala:100:32]
      `ifdef RANDOMIZE_MEM_INIT	// @[src/main/ICACHE.scala:100:32]
        for (logic [10:0] i = 11'h0; i < 11'h400; i += 11'h1) begin
          _RANDOM_MEM = `RANDOM;	// @[src/main/ICACHE.scala:100:32]
          Memory[i[9:0]] = _RANDOM_MEM[19:0];	// @[src/main/ICACHE.scala:100:32]
        end	// @[src/main/ICACHE.scala:100:32]
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 20'bx;	// @[src/main/ICACHE.scala:100:32]
endmodule

// VCS coverage exclude_file
module ysyx_23060336_data_1024x32(	// @[src/main/ICACHE.scala:101:32]
  input  [9:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [9:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data
);

  reg [31:0] Memory[0:1023];	// @[src/main/ICACHE.scala:101:32]
  always @(posedge W0_clk) begin	// @[src/main/ICACHE.scala:101:32]
    if (W0_en & 1'h1)	// @[src/main/ICACHE.scala:101:32]
      Memory[W0_addr] <= W0_data;	// @[src/main/ICACHE.scala:101:32]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// @[src/main/ICACHE.scala:101:32]
    reg [31:0] _RANDOM_MEM;	// @[src/main/ICACHE.scala:101:32]
    initial begin	// @[src/main/ICACHE.scala:101:32]
      `INIT_RANDOM_PROLOG_	// @[src/main/ICACHE.scala:101:32]
      `ifdef RANDOMIZE_MEM_INIT	// @[src/main/ICACHE.scala:101:32]
        for (logic [10:0] i = 11'h0; i < 11'h400; i += 11'h1) begin
          _RANDOM_MEM = `RANDOM;	// @[src/main/ICACHE.scala:101:32]
          Memory[i[9:0]] = _RANDOM_MEM;	// @[src/main/ICACHE.scala:101:32]
        end	// @[src/main/ICACHE.scala:101:32]
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// @[src/main/ICACHE.scala:101:32]
endmodule

// VCS coverage exclude_file
module ysyx_23060336_valid_1024x1(	// @[src/main/ICACHE.scala:102:32]
  input  [9:0] R0_addr,
  input        R0_en,
               R0_clk,
  output       R0_data,
  input  [9:0] W0_addr,
  input        W0_en,
               W0_clk,
               W0_data
);

  reg Memory[0:1023];	// @[src/main/ICACHE.scala:102:32]
  always @(posedge W0_clk) begin	// @[src/main/ICACHE.scala:102:32]
    if (W0_en & 1'h1)	// @[src/main/ICACHE.scala:102:32]
      Memory[W0_addr] <= W0_data;	// @[src/main/ICACHE.scala:102:32]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// @[src/main/ICACHE.scala:102:32]
    reg [31:0] _RANDOM_MEM;	// @[src/main/ICACHE.scala:102:32]
    initial begin	// @[src/main/ICACHE.scala:102:32]
      `INIT_RANDOM_PROLOG_	// @[src/main/ICACHE.scala:102:32]
      `ifdef RANDOMIZE_MEM_INIT	// @[src/main/ICACHE.scala:102:32]
        for (logic [10:0] i = 11'h0; i < 11'h400; i += 11'h1) begin
          _RANDOM_MEM = `RANDOM;	// @[src/main/ICACHE.scala:102:32]
          Memory[i[9:0]] = _RANDOM_MEM[0];	// @[src/main/ICACHE.scala:102:32]
        end	// @[src/main/ICACHE.scala:102:32]
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 1'bx;	// @[src/main/ICACHE.scala:102:32]
endmodule

module ysyx_23060336_ICACHE_METADATA(	// @[src/main/ICACHE.scala:88:7]
  input           clock,	// @[src/main/ICACHE.scala:88:7]
                  io_wen,	// @[src/main/ICACHE.scala:89:14]
  input  [1023:0] io_in_index,	// @[src/main/ICACHE.scala:89:14]
  input  [31:0]   io_in_data,	// @[src/main/ICACHE.scala:89:14]
  input  [19:0]   io_in_tag,	// @[src/main/ICACHE.scala:89:14]
  input           io_in_valid,	// @[src/main/ICACHE.scala:89:14]
  output [31:0]   io_out_data,	// @[src/main/ICACHE.scala:89:14]
  output [19:0]   io_out_tag,	// @[src/main/ICACHE.scala:89:14]
  output          io_out_valid	// @[src/main/ICACHE.scala:89:14]
);

  ysyx_23060336_tag_1024x20 ysyx_23060336_tag_ext (	// @[src/main/ICACHE.scala:100:32]
    .R0_addr (io_in_index[9:0]),	// @[src/main/ICACHE.scala:110:36]
    .R0_en   (1'h1),	// @[src/main/ICACHE.scala:88:7]
    .R0_clk  (clock),
    .R0_data (io_out_tag),
    .W0_addr (io_in_index[9:0]),	// @[src/main/ICACHE.scala:105:22]
    .W0_en   (io_wen),
    .W0_clk  (clock),
    .W0_data (io_in_tag)
  );
  ysyx_23060336_data_1024x32 ysyx_23060336_data_ext (	// @[src/main/ICACHE.scala:101:32]
    .R0_addr (io_in_index[9:0]),	// @[src/main/ICACHE.scala:110:36]
    .R0_en   (1'h1),	// @[src/main/ICACHE.scala:88:7]
    .R0_clk  (clock),
    .R0_data (io_out_data),
    .W0_addr (io_in_index[9:0]),	// @[src/main/ICACHE.scala:105:22]
    .W0_en   (io_wen),
    .W0_clk  (clock),
    .W0_data (io_in_data)
  );
  ysyx_23060336_valid_1024x1 ysyx_23060336_valid_ext (	// @[src/main/ICACHE.scala:102:32]
    .R0_addr (io_in_index[9:0]),	// @[src/main/ICACHE.scala:110:36]
    .R0_en   (1'h1),	// @[src/main/ICACHE.scala:88:7]
    .R0_clk  (clock),
    .R0_data (io_out_valid),
    .W0_addr (io_in_index[9:0]),	// @[src/main/ICACHE.scala:105:22]
    .W0_en   (io_wen),
    .W0_clk  (clock),
    .W0_data (io_in_valid)
  );
endmodule

// external module ICACHE_COUNTER

module ysyx_23060336_ICACHE(	// @[src/main/ICACHE.scala:6:7]
  input         clock,	// @[src/main/ICACHE.scala:6:7]
                reset,	// @[src/main/ICACHE.scala:6:7]
                io_master_arready,	// @[src/main/ICACHE.scala:7:14]
  output        io_master_arvalid,	// @[src/main/ICACHE.scala:7:14]
  output [31:0] io_master_araddr,	// @[src/main/ICACHE.scala:7:14]
  output        io_master_rready,	// @[src/main/ICACHE.scala:7:14]
  input         io_master_rvalid,	// @[src/main/ICACHE.scala:7:14]
  input  [31:0] io_master_rdata,	// @[src/main/ICACHE.scala:7:14]
  output        io_slave_arready,	// @[src/main/ICACHE.scala:7:14]
  input         io_slave_arvalid,	// @[src/main/ICACHE.scala:7:14]
  input  [31:0] io_slave_araddr,	// @[src/main/ICACHE.scala:7:14]
  input         io_slave_rready,	// @[src/main/ICACHE.scala:7:14]
  output        io_slave_rvalid,	// @[src/main/ICACHE.scala:7:14]
  output [31:0] io_slave_rdata,	// @[src/main/ICACHE.scala:7:14]
  input         io_awvalid,	// @[src/main/ICACHE.scala:7:14]
  input  [31:0] io_awaddr	// @[src/main/ICACHE.scala:7:14]
);

  wire [19:0] slave_tag;	// @[src/main/ICACHE.scala:49:24]
  wire [31:0] _icache_io_out_data;	// @[src/main/ICACHE.scala:14:22]
  wire [19:0] _icache_io_out_tag;	// @[src/main/ICACHE.scala:14:22]
  wire        _icache_io_out_valid;	// @[src/main/ICACHE.scala:14:22]
  reg  [31:0] araddr;	// @[src/main/ICACHE.scala:26:28]
  wire        skip_addr = io_slave_araddr > 32'hEFFFFFF & io_slave_araddr < 32'h10000001;	// @[src/main/ICACHE.scala:28:{37,51,70}]
  reg  [2:0]  state;	// @[src/main/ICACHE.scala:31:22]
  reg  [2:0]  casez_tmp;	// @[src/main/ICACHE.scala:32:36]
  wire [2:0]  _state_T_8 = ~(|state) & io_slave_arvalid ? {skip_addr, 2'h1} : 3'h0;	// @[src/main/ICACHE.scala:6:7, :28:51, :31:22, :32:36, :33:{26,48}]
  always_comb begin	// @[src/main/ICACHE.scala:32:36]
    casez (state)	// @[src/main/ICACHE.scala:31:22, :32:36]
      3'b000:
        casez_tmp = _state_T_8;	// @[src/main/ICACHE.scala:32:36, :33:26]
      3'b001:
        casez_tmp = slave_tag == _icache_io_out_tag & _icache_io_out_valid ? 3'h4 : 3'h2;	// @[src/main/ICACHE.scala:14:22, :27:{31,53}, :32:36, :34:26, :49:24]
      3'b010:
        casez_tmp = {2'h1, io_master_arready};	// @[src/main/ICACHE.scala:6:7, :32:36, :35:26]
      3'b011:
        casez_tmp = io_master_rvalid ? 3'h4 : 3'h3;	// @[src/main/ICACHE.scala:32:36, :34:26, :35:26, :36:26]
      3'b100:
        casez_tmp = {~io_slave_rready, 2'h0};	// @[src/main/ICACHE.scala:6:7, :32:36, :38:26]
      3'b101:
        casez_tmp = io_master_rvalid ? 3'h0 : 3'h5;	// @[src/main/ICACHE.scala:31:22, :32:36, :33:48, :37:26]
      3'b110:
        casez_tmp = _state_T_8;	// @[src/main/ICACHE.scala:32:36, :33:26]
      default:
        casez_tmp = _state_T_8;	// @[src/main/ICACHE.scala:32:36, :33:26]
    endcase	// @[src/main/ICACHE.scala:31:22, :32:36]
  end // always_comb
  wire        _io_master_rready_T = state == 3'h2;	// @[src/main/ICACHE.scala:31:22, :34:26, :43:30]
  wire        _io_master_rready_T_3 = io_slave_arvalid & skip_addr;	// @[src/main/ICACHE.scala:28:51, :43:70]
  wire        io_master_arvalid_0 = _io_master_rready_T | _io_master_rready_T_3;	// @[src/main/ICACHE.scala:43:{30,49,70}]
  wire        _io_master_rready_T_1 = state == 3'h3;	// @[src/main/ICACHE.scala:31:22, :35:26, :44:58]
  wire        _io_master_rready_T_5 = state == 3'h5;	// @[src/main/ICACHE.scala:31:22, :33:48, :44:120]
  wire        _io_slave_rdata_T = state == 3'h4;	// @[src/main/ICACHE.scala:31:22, :34:26, :47:34]
  assign slave_tag = araddr[31:12];	// @[src/main/ICACHE.scala:26:28, :49:24]
  wire        _GEN = _io_master_rready_T_1 & io_master_rvalid;	// @[src/main/ICACHE.scala:44:58, :59:32]
  wire        io_slave_rvalid_0 =
    _io_slave_rdata_T | _io_master_rready_T_5 & io_master_rvalid;	// @[src/main/ICACHE.scala:44:120, :47:34, :73:{32,53}]
  always @(posedge clock) begin	// @[src/main/ICACHE.scala:6:7]
    if (reset) begin	// @[src/main/ICACHE.scala:6:7]
      araddr <= 32'h0;	// @[src/main/ICACHE.scala:26:28]
      state <= 3'h0;	// @[src/main/ICACHE.scala:31:22]
    end
    else begin	// @[src/main/ICACHE.scala:6:7]
      if (io_slave_arvalid)	// @[src/main/ICACHE.scala:7:14]
        araddr <= io_slave_araddr;	// @[src/main/ICACHE.scala:26:28]
      state <= casez_tmp;	// @[src/main/ICACHE.scala:31:22, :32:36]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/ICACHE.scala:6:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/ICACHE.scala:6:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/ICACHE.scala:6:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];	// @[src/main/ICACHE.scala:6:7]
    initial begin	// @[src/main/ICACHE.scala:6:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/ICACHE.scala:6:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/ICACHE.scala:6:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/ICACHE.scala:6:7]
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// @[src/main/ICACHE.scala:6:7]
        end	// @[src/main/ICACHE.scala:6:7]
        araddr = _RANDOM[1'h0];	// @[src/main/ICACHE.scala:6:7, :26:28]
        state = _RANDOM[1'h1][2:0];	// @[src/main/ICACHE.scala:6:7, :31:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/ICACHE.scala:6:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/ICACHE.scala:6:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ysyx_23060336_ICACHE_METADATA icache (	// @[src/main/ICACHE.scala:14:22]
    .clock        (clock),
    .io_wen       (_GEN | io_awvalid),	// @[src/main/ICACHE.scala:59:{32,53}, :62:24, :63:27]
    .io_in_index  ({1014'h0, io_awvalid ? io_awaddr[11:2] : araddr[11:2]}),	// @[src/main/ICACHE.scala:24:30, :26:28, :50:{15,24}, :52:28]
    .io_in_data   (io_master_rdata),
    .io_in_tag    (_GEN | ~io_awvalid ? slave_tag : io_awaddr[31:12]),	// @[src/main/ICACHE.scala:23:30, :49:24, :59:{32,53}, :60:24, :63:27]
    .io_in_valid  (_GEN | ~io_awvalid),	// @[src/main/ICACHE.scala:59:{32,53}, :61:24, :63:27, :65:24, :69:24]
    .io_out_data  (_icache_io_out_data),
    .io_out_tag   (_icache_io_out_tag),
    .io_out_valid (_icache_io_out_valid)
  );
  ICACHE_COUNTER icache_counter (	// @[src/main/ICACHE.scala:15:30]
    .clock          (clock),
    .slave_arvalid  (io_slave_arvalid),
    .slave_rvalid   (io_slave_rvalid_0),	// @[src/main/ICACHE.scala:73:32]
    .master_arvalid (io_master_arvalid_0),	// @[src/main/ICACHE.scala:43:49]
    .master_rvalid  (io_master_rvalid)
  );
  assign io_master_arvalid = io_master_arvalid_0;	// @[src/main/ICACHE.scala:6:7, :43:49]
  assign io_master_araddr = araddr;	// @[src/main/ICACHE.scala:6:7, :26:28]
  assign io_master_rready =
    _io_master_rready_T | _io_master_rready_T_1 | _io_master_rready_T_3
    | _io_master_rready_T_5;	// @[src/main/ICACHE.scala:6:7, :43:{30,70}, :44:{58,111,120}]
  assign io_slave_arready = ~(|state);	// @[src/main/ICACHE.scala:6:7, :31:22, :32:36, :46:30]
  assign io_slave_rvalid = io_slave_rvalid_0;	// @[src/main/ICACHE.scala:6:7, :73:32]
  assign io_slave_rdata = _io_slave_rdata_T ? _icache_io_out_data : io_master_rdata;	// @[src/main/ICACHE.scala:6:7, :14:22, :47:{27,34}]
endmodule

// external module NPC_SIM

module ysyx_23060336(	// @[src/main/ysyx_23060336.scala:8:7]
  input         clock,	// @[src/main/ysyx_23060336.scala:8:7]
                reset,	// @[src/main/ysyx_23060336.scala:8:7]
                io_interrupt,	// @[src/main/ysyx_23060336.scala:9:20]
                io_master_awready,	// @[src/main/ysyx_23060336.scala:9:20]
  output        io_master_awvalid,	// @[src/main/ysyx_23060336.scala:9:20]
  output [31:0] io_master_awaddr,	// @[src/main/ysyx_23060336.scala:9:20]
  output [3:0]  io_master_awid,	// @[src/main/ysyx_23060336.scala:9:20]
  output [7:0]  io_master_awlen,	// @[src/main/ysyx_23060336.scala:9:20]
  output [2:0]  io_master_awsize,	// @[src/main/ysyx_23060336.scala:9:20]
  output [1:0]  io_master_awburst,	// @[src/main/ysyx_23060336.scala:9:20]
  input         io_master_wready,	// @[src/main/ysyx_23060336.scala:9:20]
  output        io_master_wvalid,	// @[src/main/ysyx_23060336.scala:9:20]
  output [31:0] io_master_wdata,	// @[src/main/ysyx_23060336.scala:9:20]
  output [3:0]  io_master_wstrb,	// @[src/main/ysyx_23060336.scala:9:20]
  output        io_master_wlast,	// @[src/main/ysyx_23060336.scala:9:20]
                io_master_bready,	// @[src/main/ysyx_23060336.scala:9:20]
  input         io_master_bvalid,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [1:0]  io_master_bresp,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [3:0]  io_master_bid,	// @[src/main/ysyx_23060336.scala:9:20]
  input         io_master_arready,	// @[src/main/ysyx_23060336.scala:9:20]
  output        io_master_arvalid,	// @[src/main/ysyx_23060336.scala:9:20]
  output [31:0] io_master_araddr,	// @[src/main/ysyx_23060336.scala:9:20]
  output [3:0]  io_master_arid,	// @[src/main/ysyx_23060336.scala:9:20]
  output [7:0]  io_master_arlen,	// @[src/main/ysyx_23060336.scala:9:20]
  output [2:0]  io_master_arsize,	// @[src/main/ysyx_23060336.scala:9:20]
  output [1:0]  io_master_arburst,	// @[src/main/ysyx_23060336.scala:9:20]
  output        io_master_rready,	// @[src/main/ysyx_23060336.scala:9:20]
  input         io_master_rvalid,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [1:0]  io_master_rresp,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [31:0] io_master_rdata,	// @[src/main/ysyx_23060336.scala:9:20]
  input         io_master_rlast,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [3:0]  io_master_rid,	// @[src/main/ysyx_23060336.scala:9:20]
  output        io_slave_awready,	// @[src/main/ysyx_23060336.scala:9:20]
  input         io_slave_awvalid,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [31:0] io_slave_awaddr,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [3:0]  io_slave_awid,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [7:0]  io_slave_awlen,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [2:0]  io_slave_awsize,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [1:0]  io_slave_awburst,	// @[src/main/ysyx_23060336.scala:9:20]
  output        io_slave_wready,	// @[src/main/ysyx_23060336.scala:9:20]
  input         io_slave_wvalid,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [31:0] io_slave_wdata,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [3:0]  io_slave_wstrb,	// @[src/main/ysyx_23060336.scala:9:20]
  input         io_slave_wlast,	// @[src/main/ysyx_23060336.scala:9:20]
                io_slave_bready,	// @[src/main/ysyx_23060336.scala:9:20]
  output        io_slave_bvalid,	// @[src/main/ysyx_23060336.scala:9:20]
  output [1:0]  io_slave_bresp,	// @[src/main/ysyx_23060336.scala:9:20]
  output [3:0]  io_slave_bid,	// @[src/main/ysyx_23060336.scala:9:20]
  output        io_slave_arready,	// @[src/main/ysyx_23060336.scala:9:20]
  input         io_slave_arvalid,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [31:0] io_slave_araddr,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [3:0]  io_slave_arid,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [7:0]  io_slave_arlen,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [2:0]  io_slave_arsize,	// @[src/main/ysyx_23060336.scala:9:20]
  input  [1:0]  io_slave_arburst,	// @[src/main/ysyx_23060336.scala:9:20]
  input         io_slave_rready,	// @[src/main/ysyx_23060336.scala:9:20]
  output        io_slave_rvalid,	// @[src/main/ysyx_23060336.scala:9:20]
  output [1:0]  io_slave_rresp,	// @[src/main/ysyx_23060336.scala:9:20]
  output [31:0] io_slave_rdata,	// @[src/main/ysyx_23060336.scala:9:20]
  output [3:0]  io_slave_rid,	// @[src/main/ysyx_23060336.scala:9:20]
  output        io_slave_rlast	// @[src/main/ysyx_23060336.scala:9:20]
);

  wire        _npc_sim_axi_awready;	// @[src/main/ysyx_23060336.scala:102:25]
  wire        _npc_sim_axi_wready;	// @[src/main/ysyx_23060336.scala:102:25]
  wire        _npc_sim_axi_bvalid;	// @[src/main/ysyx_23060336.scala:102:25]
  wire        _npc_sim_axi_arready;	// @[src/main/ysyx_23060336.scala:102:25]
  wire        _npc_sim_axi_rvalid;	// @[src/main/ysyx_23060336.scala:102:25]
  wire [31:0] _npc_sim_axi_rdata;	// @[src/main/ysyx_23060336.scala:102:25]
  wire        _icache_io_master_arvalid;	// @[src/main/ysyx_23060336.scala:24:23]
  wire [31:0] _icache_io_master_araddr;	// @[src/main/ysyx_23060336.scala:24:23]
  wire        _icache_io_master_rready;	// @[src/main/ysyx_23060336.scala:24:23]
  wire        _icache_io_slave_arready;	// @[src/main/ysyx_23060336.scala:24:23]
  wire        _icache_io_slave_rvalid;	// @[src/main/ysyx_23060336.scala:24:23]
  wire [31:0] _icache_io_slave_rdata;	// @[src/main/ysyx_23060336.scala:24:23]
  wire        _clint_io_axi_arready;	// @[src/main/ysyx_23060336.scala:23:23]
  wire        _clint_io_axi_rvalid;	// @[src/main/ysyx_23060336.scala:23:23]
  wire [31:0] _clint_io_axi_rdata;	// @[src/main/ysyx_23060336.scala:23:23]
  wire        _xbar_io_slave_awready;	// @[src/main/ysyx_23060336.scala:22:23]
  wire        _xbar_io_slave_wready;	// @[src/main/ysyx_23060336.scala:22:23]
  wire        _xbar_io_slave_bvalid;	// @[src/main/ysyx_23060336.scala:22:23]
  wire        _xbar_io_slave_arready;	// @[src/main/ysyx_23060336.scala:22:23]
  wire        _xbar_io_slave_rvalid;	// @[src/main/ysyx_23060336.scala:22:23]
  wire [31:0] _xbar_io_slave_rdata;	// @[src/main/ysyx_23060336.scala:22:23]
  wire        _xbar_io_master_awvalid;	// @[src/main/ysyx_23060336.scala:22:23]
  wire [31:0] _xbar_io_master_awaddr;	// @[src/main/ysyx_23060336.scala:22:23]
  wire [2:0]  _xbar_io_master_awsize;	// @[src/main/ysyx_23060336.scala:22:23]
  wire        _xbar_io_master_wvalid;	// @[src/main/ysyx_23060336.scala:22:23]
  wire [31:0] _xbar_io_master_wdata;	// @[src/main/ysyx_23060336.scala:22:23]
  wire [3:0]  _xbar_io_master_wstrb;	// @[src/main/ysyx_23060336.scala:22:23]
  wire        _xbar_io_master_wlast;	// @[src/main/ysyx_23060336.scala:22:23]
  wire        _xbar_io_master_arvalid;	// @[src/main/ysyx_23060336.scala:22:23]
  wire [31:0] _xbar_io_master_araddr;	// @[src/main/ysyx_23060336.scala:22:23]
  wire [3:0]  _xbar_io_master_arid;	// @[src/main/ysyx_23060336.scala:22:23]
  wire [2:0]  _xbar_io_master_arsize;	// @[src/main/ysyx_23060336.scala:22:23]
  wire        _xbar_io_master_rready;	// @[src/main/ysyx_23060336.scala:22:23]
  wire        _xbar_io_clint_arvalid;	// @[src/main/ysyx_23060336.scala:22:23]
  wire [31:0] _xbar_io_clint_araddr;	// @[src/main/ysyx_23060336.scala:22:23]
  wire        _arbiter_io_ifu_arready;	// @[src/main/ysyx_23060336.scala:21:23]
  wire        _arbiter_io_ifu_rvalid;	// @[src/main/ysyx_23060336.scala:21:23]
  wire [31:0] _arbiter_io_ifu_rdata;	// @[src/main/ysyx_23060336.scala:21:23]
  wire        _arbiter_io_lsu_awready;	// @[src/main/ysyx_23060336.scala:21:23]
  wire        _arbiter_io_lsu_wready;	// @[src/main/ysyx_23060336.scala:21:23]
  wire        _arbiter_io_lsu_bvalid;	// @[src/main/ysyx_23060336.scala:21:23]
  wire        _arbiter_io_lsu_arready;	// @[src/main/ysyx_23060336.scala:21:23]
  wire        _arbiter_io_lsu_rvalid;	// @[src/main/ysyx_23060336.scala:21:23]
  wire [31:0] _arbiter_io_lsu_rdata;	// @[src/main/ysyx_23060336.scala:21:23]
  wire        _arbiter_io_axi_awvalid;	// @[src/main/ysyx_23060336.scala:21:23]
  wire [31:0] _arbiter_io_axi_awaddr;	// @[src/main/ysyx_23060336.scala:21:23]
  wire [2:0]  _arbiter_io_axi_awsize;	// @[src/main/ysyx_23060336.scala:21:23]
  wire        _arbiter_io_axi_wvalid;	// @[src/main/ysyx_23060336.scala:21:23]
  wire [31:0] _arbiter_io_axi_wdata;	// @[src/main/ysyx_23060336.scala:21:23]
  wire [3:0]  _arbiter_io_axi_wstrb;	// @[src/main/ysyx_23060336.scala:21:23]
  wire        _arbiter_io_axi_wlast;	// @[src/main/ysyx_23060336.scala:21:23]
  wire        _arbiter_io_axi_arvalid;	// @[src/main/ysyx_23060336.scala:21:23]
  wire [31:0] _arbiter_io_axi_araddr;	// @[src/main/ysyx_23060336.scala:21:23]
  wire [3:0]  _arbiter_io_axi_arid;	// @[src/main/ysyx_23060336.scala:21:23]
  wire [2:0]  _arbiter_io_axi_arsize;	// @[src/main/ysyx_23060336.scala:21:23]
  wire        _arbiter_io_axi_rready;	// @[src/main/ysyx_23060336.scala:21:23]
  wire [31:0] _csr_io_rdata;	// @[src/main/ysyx_23060336.scala:20:23]
  wire [31:0] _csr_io_mepc;	// @[src/main/ysyx_23060336.scala:20:23]
  wire [31:0] _csr_io_mtvec;	// @[src/main/ysyx_23060336.scala:20:23]
  wire [31:0] _reg_io_rdata1;	// @[src/main/ysyx_23060336.scala:19:23]
  wire [31:0] _reg_io_rdata2;	// @[src/main/ysyx_23060336.scala:19:23]
  wire        _lsu_wbu_io_axi_awvalid;	// @[src/main/ysyx_23060336.scala:18:23]
  wire [31:0] _lsu_wbu_io_axi_awaddr;	// @[src/main/ysyx_23060336.scala:18:23]
  wire [2:0]  _lsu_wbu_io_axi_awsize;	// @[src/main/ysyx_23060336.scala:18:23]
  wire        _lsu_wbu_io_axi_wvalid;	// @[src/main/ysyx_23060336.scala:18:23]
  wire [31:0] _lsu_wbu_io_axi_wdata;	// @[src/main/ysyx_23060336.scala:18:23]
  wire [3:0]  _lsu_wbu_io_axi_wstrb;	// @[src/main/ysyx_23060336.scala:18:23]
  wire        _lsu_wbu_io_axi_wlast;	// @[src/main/ysyx_23060336.scala:18:23]
  wire        _lsu_wbu_io_axi_arvalid;	// @[src/main/ysyx_23060336.scala:18:23]
  wire [31:0] _lsu_wbu_io_axi_araddr;	// @[src/main/ysyx_23060336.scala:18:23]
  wire [2:0]  _lsu_wbu_io_axi_arsize;	// @[src/main/ysyx_23060336.scala:18:23]
  wire        _lsu_wbu_io_axi_rready;	// @[src/main/ysyx_23060336.scala:18:23]
  wire [31:0] _lsu_wbu_io_dnpc;	// @[src/main/ysyx_23060336.scala:18:23]
  wire [31:0] _lsu_wbu_io_regdata;	// @[src/main/ysyx_23060336.scala:18:23]
  wire [31:0] _lsu_wbu_io_csrdata;	// @[src/main/ysyx_23060336.scala:18:23]
  wire [11:0] _lsu_wbu_io_csr;	// @[src/main/ysyx_23060336.scala:18:23]
  wire [4:0]  _lsu_wbu_io_rd;	// @[src/main/ysyx_23060336.scala:18:23]
  wire        _lsu_wbu_io_CsrWr;	// @[src/main/ysyx_23060336.scala:18:23]
  wire        _lsu_wbu_io_RegWr;	// @[src/main/ysyx_23060336.scala:18:23]
  wire        _lsu_wbu_io_ecall;	// @[src/main/ysyx_23060336.scala:18:23]
  wire        _lsu_wbu_io_out_valid;	// @[src/main/ysyx_23060336.scala:18:23]
  wire [31:0] _idu_exu_io_result;	// @[src/main/ysyx_23060336.scala:17:23]
  wire [31:0] _idu_exu_io_dnpc;	// @[src/main/ysyx_23060336.scala:17:23]
  wire [31:0] _idu_exu_io_Csr;	// @[src/main/ysyx_23060336.scala:17:23]
  wire [11:0] _idu_exu_io_csr;	// @[src/main/ysyx_23060336.scala:17:23]
  wire [4:0]  _idu_exu_io_rd;	// @[src/main/ysyx_23060336.scala:17:23]
  wire [4:0]  _idu_exu_io_rs1;	// @[src/main/ysyx_23060336.scala:17:23]
  wire [4:0]  _idu_exu_io_rs2;	// @[src/main/ysyx_23060336.scala:17:23]
  wire [3:0]  _idu_exu_io_instType;	// @[src/main/ysyx_23060336.scala:17:23]
  wire [3:0]  _idu_exu_io_wstrb;	// @[src/main/ysyx_23060336.scala:17:23]
  wire [2:0]  _idu_exu_io_awsize;	// @[src/main/ysyx_23060336.scala:17:23]
  wire [2:0]  _idu_exu_io_RegNum;	// @[src/main/ysyx_23060336.scala:17:23]
  wire [2:0]  _idu_exu_io_arsize;	// @[src/main/ysyx_23060336.scala:17:23]
  wire        _idu_exu_io_ecall;	// @[src/main/ysyx_23060336.scala:17:23]
  wire        _idu_exu_io_CsrWr;	// @[src/main/ysyx_23060336.scala:17:23]
  wire        _idu_exu_io_MemWr;	// @[src/main/ysyx_23060336.scala:17:23]
  wire        _idu_exu_io_RegWr;	// @[src/main/ysyx_23060336.scala:17:23]
  wire        _idu_exu_io_MemtoReg;	// @[src/main/ysyx_23060336.scala:17:23]
  wire        _idu_exu_io_ebreak;	// @[src/main/ysyx_23060336.scala:17:23]
  wire        _ifu_io_axi_arvalid;	// @[src/main/ysyx_23060336.scala:16:23]
  wire [31:0] _ifu_io_axi_araddr;	// @[src/main/ysyx_23060336.scala:16:23]
  wire        _ifu_io_axi_rready;	// @[src/main/ysyx_23060336.scala:16:23]
  wire [31:0] _ifu_io_inst;	// @[src/main/ysyx_23060336.scala:16:23]
  wire [31:0] _ifu_io_pc;	// @[src/main/ysyx_23060336.scala:16:23]
  wire [31:0] _ifu_io_ifu_flash_count;	// @[src/main/ysyx_23060336.scala:16:23]
  wire [31:0] _ifu_io_ifu_psram_count;	// @[src/main/ysyx_23060336.scala:16:23]
  wire [63:0] _ifu_io_ifu_clk_count;	// @[src/main/ysyx_23060336.scala:16:23]
  wire [63:0] _ifu_io_ifu_psram_clk;	// @[src/main/ysyx_23060336.scala:16:23]
  wire [63:0] _ifu_io_ifu_flash_clk;	// @[src/main/ysyx_23060336.scala:16:23]
  wire        _ifu_io_out_valid;	// @[src/main/ysyx_23060336.scala:16:23]
  ysyx_23060336_IFU ifu (	// @[src/main/ysyx_23060336.scala:16:23]
    .clock              (clock),
    .reset              (reset),
    .io_axi_arready     (_icache_io_slave_arready),	// @[src/main/ysyx_23060336.scala:24:23]
    .io_axi_arvalid     (_ifu_io_axi_arvalid),
    .io_axi_araddr      (_ifu_io_axi_araddr),
    .io_axi_rready      (_ifu_io_axi_rready),
    .io_axi_rvalid      (_icache_io_slave_rvalid),	// @[src/main/ysyx_23060336.scala:24:23]
    .io_axi_rdata       (_icache_io_slave_rdata),	// @[src/main/ysyx_23060336.scala:24:23]
    .io_ifu_idle        (_lsu_wbu_io_out_valid),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_dnpc            (_lsu_wbu_io_dnpc),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_inst            (_ifu_io_inst),
    .io_pc              (_ifu_io_pc),
    .io_ifu_flash_count (_ifu_io_ifu_flash_count),
    .io_ifu_psram_count (_ifu_io_ifu_psram_count),
    .io_ifu_clk_count   (_ifu_io_ifu_clk_count),
    .io_ifu_psram_clk   (_ifu_io_ifu_psram_clk),
    .io_ifu_flash_clk   (_ifu_io_ifu_flash_clk),
    .io_out_valid       (_ifu_io_out_valid)
  );
  ysyx_23060336_IDU_EXU idu_exu (	// @[src/main/ysyx_23060336.scala:17:23]
    .reset       (reset),
    .io_pc       (_ifu_io_pc),	// @[src/main/ysyx_23060336.scala:16:23]
    .io_inst     (_ifu_io_inst),	// @[src/main/ysyx_23060336.scala:16:23]
    .io_src1     (_reg_io_rdata1),	// @[src/main/ysyx_23060336.scala:19:23]
    .io_src2     (_reg_io_rdata2),	// @[src/main/ysyx_23060336.scala:19:23]
    .io_Csr_in   (_csr_io_rdata),	// @[src/main/ysyx_23060336.scala:20:23]
    .io_mepc     (_csr_io_mepc),	// @[src/main/ysyx_23060336.scala:20:23]
    .io_mtvec    (_csr_io_mtvec),	// @[src/main/ysyx_23060336.scala:20:23]
    .io_result   (_idu_exu_io_result),
    .io_dnpc     (_idu_exu_io_dnpc),
    .io_Csr      (_idu_exu_io_Csr),
    .io_csr      (_idu_exu_io_csr),
    .io_rd       (_idu_exu_io_rd),
    .io_rs1      (_idu_exu_io_rs1),
    .io_rs2      (_idu_exu_io_rs2),
    .io_instType (_idu_exu_io_instType),
    .io_wstrb    (_idu_exu_io_wstrb),
    .io_awsize   (_idu_exu_io_awsize),
    .io_RegNum   (_idu_exu_io_RegNum),
    .io_arsize   (_idu_exu_io_arsize),
    .io_ecall    (_idu_exu_io_ecall),
    .io_CsrWr    (_idu_exu_io_CsrWr),
    .io_MemWr    (_idu_exu_io_MemWr),
    .io_RegWr    (_idu_exu_io_RegWr),
    .io_MemtoReg (_idu_exu_io_MemtoReg),
    .io_ebreak   (_idu_exu_io_ebreak)
  );
  ysyx_23060336_LSU_WBU lsu_wbu (	// @[src/main/ysyx_23060336.scala:18:23]
    .clock              (clock),
    .reset              (reset),
    .io_axi_awready     (_arbiter_io_lsu_awready),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_axi_awvalid     (_lsu_wbu_io_axi_awvalid),
    .io_axi_awaddr      (_lsu_wbu_io_axi_awaddr),
    .io_axi_awsize      (_lsu_wbu_io_axi_awsize),
    .io_axi_wready      (_arbiter_io_lsu_wready),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_axi_wvalid      (_lsu_wbu_io_axi_wvalid),
    .io_axi_wdata       (_lsu_wbu_io_axi_wdata),
    .io_axi_wstrb       (_lsu_wbu_io_axi_wstrb),
    .io_axi_wlast       (_lsu_wbu_io_axi_wlast),
    .io_axi_bvalid      (_arbiter_io_lsu_bvalid),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_axi_arready     (_arbiter_io_lsu_arready),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_axi_arvalid     (_lsu_wbu_io_axi_arvalid),
    .io_axi_araddr      (_lsu_wbu_io_axi_araddr),
    .io_axi_arsize      (_lsu_wbu_io_axi_arsize),
    .io_axi_rready      (_lsu_wbu_io_axi_rready),
    .io_axi_rvalid      (_arbiter_io_lsu_rvalid),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_axi_rdata       (_arbiter_io_lsu_rdata),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_ifu_clk_count   (_ifu_io_ifu_clk_count),	// @[src/main/ysyx_23060336.scala:16:23]
    .io_ifu_psram_count (_ifu_io_ifu_psram_count),	// @[src/main/ysyx_23060336.scala:16:23]
    .io_ifu_flash_count (_ifu_io_ifu_flash_count),	// @[src/main/ysyx_23060336.scala:16:23]
    .io_ifu_psram_clk   (_ifu_io_ifu_psram_clk),	// @[src/main/ysyx_23060336.scala:16:23]
    .io_ifu_flash_clk   (_ifu_io_ifu_flash_clk),	// @[src/main/ysyx_23060336.scala:16:23]
    .io_result          (_idu_exu_io_result),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_dnpc_in         (_idu_exu_io_dnpc),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_src2            (_reg_io_rdata2),	// @[src/main/ysyx_23060336.scala:19:23]
    .io_Csr             (_idu_exu_io_Csr),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_csr_in          (_idu_exu_io_csr),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_rd_in           (_idu_exu_io_rd),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_instType        (_idu_exu_io_instType),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_wstrb           (_idu_exu_io_wstrb),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_awsize          (_idu_exu_io_awsize),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_RegNum          (_idu_exu_io_RegNum),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_arsize          (_idu_exu_io_arsize),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_CsrWr_in        (_idu_exu_io_CsrWr),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_RegWr_in        (_idu_exu_io_RegWr),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_ecall_in        (_idu_exu_io_ecall),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_MemWr           (_idu_exu_io_MemWr),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_MemtoReg        (_idu_exu_io_MemtoReg),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_ebreak          (_idu_exu_io_ebreak),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_in_valid        (_ifu_io_out_valid),	// @[src/main/ysyx_23060336.scala:16:23]
    .io_dnpc            (_lsu_wbu_io_dnpc),
    .io_regdata         (_lsu_wbu_io_regdata),
    .io_csrdata         (_lsu_wbu_io_csrdata),
    .io_csr             (_lsu_wbu_io_csr),
    .io_rd              (_lsu_wbu_io_rd),
    .io_CsrWr           (_lsu_wbu_io_CsrWr),
    .io_RegWr           (_lsu_wbu_io_RegWr),
    .io_ecall           (_lsu_wbu_io_ecall),
    .io_out_valid       (_lsu_wbu_io_out_valid)
  );
  ysyx_23060336_REG reg_0 (	// @[src/main/ysyx_23060336.scala:19:23]
    .clock     (clock),
    .io_raddr1 (_idu_exu_io_rs1),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_raddr2 (_idu_exu_io_rs2),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_rdata1 (_reg_io_rdata1),
    .io_rdata2 (_reg_io_rdata2),
    .io_wen    (_lsu_wbu_io_RegWr),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_waddr  (_lsu_wbu_io_rd),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_wdata  (_lsu_wbu_io_regdata)	// @[src/main/ysyx_23060336.scala:18:23]
  );
  ysyx_23060336_CSR csr (	// @[src/main/ysyx_23060336.scala:20:23]
    .clock      (clock),
    .reset      (reset),
    .io_raddr   (_idu_exu_io_csr),	// @[src/main/ysyx_23060336.scala:17:23]
    .io_rdata   (_csr_io_rdata),
    .io_wen     (_lsu_wbu_io_CsrWr),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_waddr   (_lsu_wbu_io_csr),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_wdata   (_lsu_wbu_io_csrdata),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_ecall   (_lsu_wbu_io_ecall & _lsu_wbu_io_out_valid),	// @[src/main/ysyx_23060336.scala:18:23, :183:36]
    .io_mepc_in (_ifu_io_pc),	// @[src/main/ysyx_23060336.scala:16:23]
    .io_mepc    (_csr_io_mepc),
    .io_mtvec   (_csr_io_mtvec)
  );
  ysyx_23060336_ARBITER arbiter (	// @[src/main/ysyx_23060336.scala:21:23]
    .clock          (clock),
    .reset          (reset),
    .io_ifu_arready (_arbiter_io_ifu_arready),
    .io_ifu_arvalid (_icache_io_master_arvalid),	// @[src/main/ysyx_23060336.scala:24:23]
    .io_ifu_araddr  (_icache_io_master_araddr),	// @[src/main/ysyx_23060336.scala:24:23]
    .io_ifu_rready  (_icache_io_master_rready),	// @[src/main/ysyx_23060336.scala:24:23]
    .io_ifu_rvalid  (_arbiter_io_ifu_rvalid),
    .io_ifu_rdata   (_arbiter_io_ifu_rdata),
    .io_lsu_awready (_arbiter_io_lsu_awready),
    .io_lsu_awvalid (_lsu_wbu_io_axi_awvalid),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_lsu_awaddr  (_lsu_wbu_io_axi_awaddr),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_lsu_awsize  (_lsu_wbu_io_axi_awsize),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_lsu_wready  (_arbiter_io_lsu_wready),
    .io_lsu_wvalid  (_lsu_wbu_io_axi_wvalid),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_lsu_wdata   (_lsu_wbu_io_axi_wdata),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_lsu_wstrb   (_lsu_wbu_io_axi_wstrb),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_lsu_wlast   (_lsu_wbu_io_axi_wlast),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_lsu_bvalid  (_arbiter_io_lsu_bvalid),
    .io_lsu_arready (_arbiter_io_lsu_arready),
    .io_lsu_arvalid (_lsu_wbu_io_axi_arvalid),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_lsu_araddr  (_lsu_wbu_io_axi_araddr),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_lsu_arsize  (_lsu_wbu_io_axi_arsize),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_lsu_rready  (_lsu_wbu_io_axi_rready),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_lsu_rvalid  (_arbiter_io_lsu_rvalid),
    .io_lsu_rdata   (_arbiter_io_lsu_rdata),
    .io_axi_awready (_xbar_io_slave_awready),	// @[src/main/ysyx_23060336.scala:22:23]
    .io_axi_awvalid (_arbiter_io_axi_awvalid),
    .io_axi_awaddr  (_arbiter_io_axi_awaddr),
    .io_axi_awsize  (_arbiter_io_axi_awsize),
    .io_axi_wready  (_xbar_io_slave_wready),	// @[src/main/ysyx_23060336.scala:22:23]
    .io_axi_wvalid  (_arbiter_io_axi_wvalid),
    .io_axi_wdata   (_arbiter_io_axi_wdata),
    .io_axi_wstrb   (_arbiter_io_axi_wstrb),
    .io_axi_wlast   (_arbiter_io_axi_wlast),
    .io_axi_bvalid  (_xbar_io_slave_bvalid),	// @[src/main/ysyx_23060336.scala:22:23]
    .io_axi_arready (_xbar_io_slave_arready),	// @[src/main/ysyx_23060336.scala:22:23]
    .io_axi_arvalid (_arbiter_io_axi_arvalid),
    .io_axi_araddr  (_arbiter_io_axi_araddr),
    .io_axi_arid    (_arbiter_io_axi_arid),
    .io_axi_arsize  (_arbiter_io_axi_arsize),
    .io_axi_rready  (_arbiter_io_axi_rready),
    .io_axi_rvalid  (_xbar_io_slave_rvalid),	// @[src/main/ysyx_23060336.scala:22:23]
    .io_axi_rdata   (_xbar_io_slave_rdata)	// @[src/main/ysyx_23060336.scala:22:23]
  );
  ysyx_23060336_XBAR xbar (	// @[src/main/ysyx_23060336.scala:22:23]
    .io_slave_awready  (_xbar_io_slave_awready),
    .io_slave_awvalid  (_arbiter_io_axi_awvalid),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_slave_awaddr   (_arbiter_io_axi_awaddr),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_slave_awsize   (_arbiter_io_axi_awsize),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_slave_wready   (_xbar_io_slave_wready),
    .io_slave_wvalid   (_arbiter_io_axi_wvalid),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_slave_wdata    (_arbiter_io_axi_wdata),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_slave_wstrb    (_arbiter_io_axi_wstrb),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_slave_wlast    (_arbiter_io_axi_wlast),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_slave_bvalid   (_xbar_io_slave_bvalid),
    .io_slave_arready  (_xbar_io_slave_arready),
    .io_slave_arvalid  (_arbiter_io_axi_arvalid),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_slave_araddr   (_arbiter_io_axi_araddr),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_slave_arid     (_arbiter_io_axi_arid),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_slave_arsize   (_arbiter_io_axi_arsize),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_slave_rready   (_arbiter_io_axi_rready),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_slave_rvalid   (_xbar_io_slave_rvalid),
    .io_slave_rdata    (_xbar_io_slave_rdata),
    .io_master_awready (_npc_sim_axi_awready),	// @[src/main/ysyx_23060336.scala:102:25]
    .io_master_awvalid (_xbar_io_master_awvalid),
    .io_master_awaddr  (_xbar_io_master_awaddr),
    .io_master_awsize  (_xbar_io_master_awsize),
    .io_master_wready  (_npc_sim_axi_wready),	// @[src/main/ysyx_23060336.scala:102:25]
    .io_master_wvalid  (_xbar_io_master_wvalid),
    .io_master_wdata   (_xbar_io_master_wdata),
    .io_master_wstrb   (_xbar_io_master_wstrb),
    .io_master_wlast   (_xbar_io_master_wlast),
    .io_master_bvalid  (_npc_sim_axi_bvalid),	// @[src/main/ysyx_23060336.scala:102:25]
    .io_master_arready (_npc_sim_axi_arready),	// @[src/main/ysyx_23060336.scala:102:25]
    .io_master_arvalid (_xbar_io_master_arvalid),
    .io_master_araddr  (_xbar_io_master_araddr),
    .io_master_arid    (_xbar_io_master_arid),
    .io_master_arsize  (_xbar_io_master_arsize),
    .io_master_rready  (_xbar_io_master_rready),
    .io_master_rvalid  (_npc_sim_axi_rvalid),	// @[src/main/ysyx_23060336.scala:102:25]
    .io_master_rdata   (_npc_sim_axi_rdata),	// @[src/main/ysyx_23060336.scala:102:25]
    .io_clint_arready  (_clint_io_axi_arready),	// @[src/main/ysyx_23060336.scala:23:23]
    .io_clint_arvalid  (_xbar_io_clint_arvalid),
    .io_clint_araddr   (_xbar_io_clint_araddr),
    .io_clint_rvalid   (_clint_io_axi_rvalid),	// @[src/main/ysyx_23060336.scala:23:23]
    .io_clint_rdata    (_clint_io_axi_rdata)	// @[src/main/ysyx_23060336.scala:23:23]
  );
  ysyx_23060336_CLINT clint (	// @[src/main/ysyx_23060336.scala:23:23]
    .clock          (clock),
    .reset          (reset),
    .io_axi_arready (_clint_io_axi_arready),
    .io_axi_arvalid (_xbar_io_clint_arvalid),	// @[src/main/ysyx_23060336.scala:22:23]
    .io_axi_araddr  (_xbar_io_clint_araddr),	// @[src/main/ysyx_23060336.scala:22:23]
    .io_axi_rvalid  (_clint_io_axi_rvalid),
    .io_axi_rdata   (_clint_io_axi_rdata)
  );
  ysyx_23060336_ICACHE icache (	// @[src/main/ysyx_23060336.scala:24:23]
    .clock             (clock),
    .reset             (reset),
    .io_master_arready (_arbiter_io_ifu_arready),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_master_arvalid (_icache_io_master_arvalid),
    .io_master_araddr  (_icache_io_master_araddr),
    .io_master_rready  (_icache_io_master_rready),
    .io_master_rvalid  (_arbiter_io_ifu_rvalid),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_master_rdata   (_arbiter_io_ifu_rdata),	// @[src/main/ysyx_23060336.scala:21:23]
    .io_slave_arready  (_icache_io_slave_arready),
    .io_slave_arvalid  (_ifu_io_axi_arvalid),	// @[src/main/ysyx_23060336.scala:16:23]
    .io_slave_araddr   (_ifu_io_axi_araddr),	// @[src/main/ysyx_23060336.scala:16:23]
    .io_slave_rready   (_ifu_io_axi_rready),	// @[src/main/ysyx_23060336.scala:16:23]
    .io_slave_rvalid   (_icache_io_slave_rvalid),
    .io_slave_rdata    (_icache_io_slave_rdata),
    .io_awvalid        (_lsu_wbu_io_axi_awvalid),	// @[src/main/ysyx_23060336.scala:18:23]
    .io_awaddr         (_lsu_wbu_io_axi_awaddr)	// @[src/main/ysyx_23060336.scala:18:23]
  );
  NPC_SIM npc_sim (	// @[src/main/ysyx_23060336.scala:102:25]
    .clock       (clock),
    .axi_awready (_npc_sim_axi_awready),
    .axi_awvalid (_xbar_io_master_awvalid),	// @[src/main/ysyx_23060336.scala:22:23]
    .axi_awaddr  (_xbar_io_master_awaddr),	// @[src/main/ysyx_23060336.scala:22:23]
    .axi_awid    (4'h2),	// @[src/main/ysyx_23060336.scala:8:7, :18:23, :21:23, :22:23, :23:23, :102:25]
    .axi_awlen   (8'h0),	// @[src/main/ysyx_23060336.scala:8:7, :16:23, :18:23, :21:23, :22:23, :23:23, :24:23, :102:25]
    .axi_awsize  (_xbar_io_master_awsize),	// @[src/main/ysyx_23060336.scala:22:23]
    .axi_awburst (2'h1),	// @[src/main/ysyx_23060336.scala:8:7, :16:23, :18:23, :21:23, :22:23, :23:23, :24:23, :102:25]
    .axi_wready  (_npc_sim_axi_wready),
    .axi_wvalid  (_xbar_io_master_wvalid),	// @[src/main/ysyx_23060336.scala:22:23]
    .axi_wdata   (_xbar_io_master_wdata),	// @[src/main/ysyx_23060336.scala:22:23]
    .axi_wstrb   (_xbar_io_master_wstrb),	// @[src/main/ysyx_23060336.scala:22:23]
    .axi_wlast   (_xbar_io_master_wlast),	// @[src/main/ysyx_23060336.scala:22:23]
    .axi_bready  (1'h1),	// @[src/main/ysyx_23060336.scala:8:7, :18:23, :21:23, :22:23, :23:23, :102:25]
    .axi_bvalid  (_npc_sim_axi_bvalid),
    .axi_bresp   (/* unused */),
    .axi_bid     (/* unused */),
    .axi_arready (_npc_sim_axi_arready),
    .axi_arvalid (_xbar_io_master_arvalid),	// @[src/main/ysyx_23060336.scala:22:23]
    .axi_araddr  (_xbar_io_master_araddr),	// @[src/main/ysyx_23060336.scala:22:23]
    .axi_arid    (_xbar_io_master_arid),	// @[src/main/ysyx_23060336.scala:22:23]
    .axi_arlen   (8'h0),	// @[src/main/ysyx_23060336.scala:8:7, :16:23, :18:23, :21:23, :22:23, :23:23, :24:23, :102:25]
    .axi_arsize  (_xbar_io_master_arsize),	// @[src/main/ysyx_23060336.scala:22:23]
    .axi_arburst (2'h1),	// @[src/main/ysyx_23060336.scala:8:7, :16:23, :18:23, :21:23, :22:23, :23:23, :24:23, :102:25]
    .axi_rready  (_xbar_io_master_rready),	// @[src/main/ysyx_23060336.scala:22:23]
    .axi_rvalid  (_npc_sim_axi_rvalid),
    .axi_rresp   (/* unused */),
    .axi_rdata   (_npc_sim_axi_rdata),
    .axi_rid     (/* unused */),
    .axi_rlast   (/* unused */)
  );
  assign io_master_awvalid = _xbar_io_master_awvalid;	// @[src/main/ysyx_23060336.scala:8:7, :22:23]
  assign io_master_awaddr = _xbar_io_master_awaddr;	// @[src/main/ysyx_23060336.scala:8:7, :22:23]
  assign io_master_awid = 4'h2;	// @[src/main/ysyx_23060336.scala:8:7, :18:23, :21:23, :22:23, :23:23, :102:25]
  assign io_master_awlen = 8'h0;	// @[src/main/ysyx_23060336.scala:8:7, :16:23, :18:23, :21:23, :22:23, :23:23, :24:23, :102:25]
  assign io_master_awsize = _xbar_io_master_awsize;	// @[src/main/ysyx_23060336.scala:8:7, :22:23]
  assign io_master_awburst = 2'h1;	// @[src/main/ysyx_23060336.scala:8:7, :16:23, :18:23, :21:23, :22:23, :23:23, :24:23, :102:25]
  assign io_master_wvalid = _xbar_io_master_wvalid;	// @[src/main/ysyx_23060336.scala:8:7, :22:23]
  assign io_master_wdata = _xbar_io_master_wdata;	// @[src/main/ysyx_23060336.scala:8:7, :22:23]
  assign io_master_wstrb = _xbar_io_master_wstrb;	// @[src/main/ysyx_23060336.scala:8:7, :22:23]
  assign io_master_wlast = _xbar_io_master_wlast;	// @[src/main/ysyx_23060336.scala:8:7, :22:23]
  assign io_master_bready = 1'h1;	// @[src/main/ysyx_23060336.scala:8:7, :18:23, :21:23, :22:23, :23:23, :102:25]
  assign io_master_arvalid = _xbar_io_master_arvalid;	// @[src/main/ysyx_23060336.scala:8:7, :22:23]
  assign io_master_araddr = _xbar_io_master_araddr;	// @[src/main/ysyx_23060336.scala:8:7, :22:23]
  assign io_master_arid = _xbar_io_master_arid;	// @[src/main/ysyx_23060336.scala:8:7, :22:23]
  assign io_master_arlen = 8'h0;	// @[src/main/ysyx_23060336.scala:8:7, :16:23, :18:23, :21:23, :22:23, :23:23, :24:23, :102:25]
  assign io_master_arsize = _xbar_io_master_arsize;	// @[src/main/ysyx_23060336.scala:8:7, :22:23]
  assign io_master_arburst = 2'h1;	// @[src/main/ysyx_23060336.scala:8:7, :16:23, :18:23, :21:23, :22:23, :23:23, :24:23, :102:25]
  assign io_master_rready = _xbar_io_master_rready;	// @[src/main/ysyx_23060336.scala:8:7, :22:23]
  assign io_slave_awready = 1'h0;	// @[src/main/ysyx_23060336.scala:8:7, :88:11]
  assign io_slave_wready = 1'h0;	// @[src/main/ysyx_23060336.scala:8:7, :88:11]
  assign io_slave_bvalid = 1'h0;	// @[src/main/ysyx_23060336.scala:8:7, :88:11]
  assign io_slave_bresp = 2'h0;	// @[src/main/ysyx_23060336.scala:8:7, :93:11]
  assign io_slave_bid = 4'h0;	// @[src/main/ysyx_23060336.scala:8:7, :94:11]
  assign io_slave_arready = 1'h0;	// @[src/main/ysyx_23060336.scala:8:7, :88:11]
  assign io_slave_rvalid = 1'h0;	// @[src/main/ysyx_23060336.scala:8:7, :88:11]
  assign io_slave_rresp = 2'h0;	// @[src/main/ysyx_23060336.scala:8:7, :93:11]
  assign io_slave_rdata = 32'h0;	// @[src/main/ysyx_23060336.scala:8:7, :96:11]
  assign io_slave_rid = 4'h0;	// @[src/main/ysyx_23060336.scala:8:7, :94:11]
  assign io_slave_rlast = 1'h0;	// @[src/main/ysyx_23060336.scala:8:7, :88:11]
endmodule


// ----- 8< ----- FILE "./ifu_counter.sv" ----- 8< -----

// Generated by CIRCT firtool-1.62.0

 module IFU_COUNTER(
   input         clock,
   input         arvalid,
   input  [1:0]  state,
   input  [31:0] araddr,
   output [31:0] ifu_flash_count,
   output [31:0] ifu_psram_count,
   output [63:0] ifu_flash_clk,
   output [63:0] ifu_psram_clk,
   output [63:0] ifu_clk_count
 );

 `ifdef VERILATOR
 reg [63:0] _ifu_clk_count, _ifu_flash_clk, _ifu_psram_clk;
 reg [31:0] _ifu_flash_count, _ifu_psram_count;

 assign ifu_clk_count = _ifu_clk_count;
 assign ifu_psram_clk = _ifu_psram_clk;
 assign ifu_flash_clk = _ifu_flash_clk;
 assign ifu_flash_count = _ifu_flash_count;
 assign ifu_psram_count = _ifu_psram_count;

 always@(posedge arvalid) begin
   if(araddr >= 32'h30000000 && araddr < 32'h32000000) begin
     _ifu_flash_count++;
   end else if(araddr >= 32'h80000000 && araddr < 32'h80400000) begin
     _ifu_psram_count++;
   end 
 end
 

 always@(posedge clock) begin
   if(state == 1) begin
     _ifu_clk_count++;

     if(araddr >= 32'h30000000 && araddr < 32'h32000000) begin
       _ifu_flash_clk++;
     end else if(araddr >= 32'h80000000 && araddr < 32'h80400000) begin
       _ifu_psram_clk++;
     end 

   end
 end
 `endif

 endmodule
  

// ----- 8< ----- FILE "./ebreak.sv" ----- 8< -----

// Generated by CIRCT firtool-1.62.0
`ifdef VERILATOR
import "DPI-C" function void set_npc_state(input int ebreak, input int ifu_count, input int lsu_count, input int i_type_count, input int s_type_count, input int u_type_count, input int b_type_count, input int r_type_count, input int j_type_count, input int c_type_count, input int w_type_count, input int ifu_clk_count_h, input int ifu_clk_count_l, input int lsu_clk_count_h, input int lsu_clk_count_l, input int ifu_psram_clk_h, input int ifu_psram_clk_l, input int ifu_flash_clk_h, input int ifu_flash_clk_l, input int i_clk, input int s_clk, input int u_clk, input int b_clk, input int r_clk, input int j_clk, input int c_clk, input int w_clk, input int backend_clk_h, input int backend_clk_l, input int ifu_flash_count, input int ifu_psram_count);
`endif
 module ysyx_23060336_EBREAK(
   input        clock,
   input        ebreak,
   input        in_valid,
   input        out_valid,
   input        axi_rvalid,
   input [2:0]  state,
   input [3:0]  instType,
   input [31:0] ifu_psram_count,
   input [31:0] ifu_flash_count,
   input [63:0] ifu_psram_clk,
   input [63:0] ifu_flash_clk,
   input [63:0] ifu_clk_count
 );

`ifdef VERILATOR
 parameter idle = 0, work = 1;

 reg [31:0] ifu_count, lsu_count; 
 reg [31:0] i_type_count, s_type_count, u_type_count, b_type_count, r_type_count, j_type_count, c_type_count, w_type_count;
 reg [31:0] i_clk, s_clk, u_clk, b_clk, r_clk, j_clk, c_clk, w_clk;
 reg [63:0] lsu_clk_count, backend_clk;
 reg        clk_state = idle;

 always@(posedge clock) begin
   case(clk_state)
     idle: clk_state <= in_valid  ? work : idle;
     work: clk_state <= out_valid ? idle : work;
   endcase
 end

 always@(posedge clock) begin 
   if(clk_state == work) begin
     backend_clk++;

     if(instType == 0) i_clk++;
     else if(instType == 1) s_clk++;
     else if(instType == 2) b_clk++;
     else if(instType == 3) u_clk++;
     else if(instType == 4) j_clk++;
     else if(instType == 5) r_clk++;
     else if(instType == 6) c_clk++;
     else w_clk++;

   end
 end

 always@(posedge axi_rvalid) begin
   lsu_count++;
 end

 always@(posedge clock) begin
   if(state == 1 || state == 2) begin
     lsu_clk_count++;
   end
 end

 always@(posedge in_valid) begin
   ifu_count++;
   if(instType == 0) i_type_count++;
   else if(instType == 1) s_type_count++;
   else if(instType == 2) b_type_count++;
   else if(instType == 3) u_type_count++;
   else if(instType == 4) j_type_count++;
   else if(instType == 5) r_type_count++;
   else if(instType == 6) c_type_count++;
   else w_type_count++;
 end

 always@(posedge clock) begin
   set_npc_state({31'b0, ebreak}, ifu_count, lsu_count, i_type_count, s_type_count, u_type_count, b_type_count, r_type_count, j_type_count, c_type_count, w_type_count, ifu_clk_count[63:32], ifu_clk_count[31:0], lsu_clk_count[63:32], lsu_clk_count[31:0], ifu_psram_clk[63:32], ifu_psram_clk[31:0], ifu_flash_clk[63:32], ifu_flash_clk[31:0], i_clk, s_clk, b_clk, u_clk, j_clk, r_clk, c_clk, w_clk, backend_clk[63:32], backend_clk[31:0], ifu_flash_count, ifu_psram_count);
 end
`endif

 endmodule
  

// ----- 8< ----- FILE "./sram_read.sv" ----- 8< -----

// Generated by CIRCT firtool-1.62.0
`ifdef VERILATOR
import "DPI-C" function void sram_read(input int araddr, input int arvalid, input int arready, input int arsize, input int awaddr, input int wdata, input int awvalid, input int awready, input int wstrb);
 `endif
 module SRAM_READ(
   input clock,
   input [31:0] araddr,
   input [31:0] awaddr,
   input [31:0] wdata,
   input [3:0]  arsize,
   input [3:0]  wstrb,
   input        arready,
   input        awready,
   input        arvalid,
   input        awvalid
 );

`ifdef VERILATOR
 always@(posedge clock) begin
   sram_read(araddr, {31'b0, arvalid}, {31'b0, arready}, {28'b0, arsize}, awaddr, wdata, {31'b0, awvalid}, {31'b0, awready}, {28'b0, wstrb});
 end
`endif

 endmodule
  

// ----- 8< ----- FILE "./icache_counter.sv" ----- 8< -----

// Generated by CIRCT firtool-1.62.0
 `ifdef VERILATOR
 import "DPI-C" function void icache_counter(input int icache_count, input int icache_miss_count, input int access_time_h, input int access_time_l, input int miss_penalty_h, input int miss_penalty_l);
 `endif
 module ICACHE_COUNTER(
   input clock,
   input slave_arvalid,
   input slave_rvalid,
   input master_arvalid,
   input master_rvalid
 );

 `ifdef VERILATOR
 parameter idle = 0, access_start = 1, miss = 2, access_end = 3;

 reg [63:0] _access_time, _miss_penalty;
 reg [31:0] _icache_count, _icache_miss_count;
 reg [1:0]  state = idle;

 always@(posedge slave_arvalid) begin
   _icache_count++;
 end
   
 always@(posedge master_arvalid) begin
   _icache_miss_count++;
 end

 always@(posedge clock) begin
   case(state)
     idle         : state <= slave_arvalid ? access_start : idle;
     access_start : state <= slave_rvalid  ? access_end   : master_arvalid ? miss : access_start;
     miss         : state <= master_rvalid ? access_end   : miss;
     access_end   : state <= slave_rvalid  ? idle         : access_end;
   endcase
 end

 always@(posedge clock) begin
   if(state != idle) begin
     _access_time++;
   end

   if(state == miss) begin
     _miss_penalty++;
   end
 end

 always@(posedge clock) begin
   icache_counter(_icache_count, _icache_miss_count, _access_time[63:32], _access_time[31:0], _miss_penalty[63:32], _miss_penalty[31:0]);
 end

 `endif

 endmodule
  

// ----- 8< ----- FILE "./npc_sim.sv" ----- 8< -----

// Generated by CIRCT firtool-1.62.0
 `ifdef VERILATOR
import "DPI-C" function int pmem_read(input int araddr);
import "DPI-C" function int pmem_write(input int awaddr, int wdata, int wstrb);
 `endif
 
 module NPC_SIM(
   input         clock,
   input         axi_wlast,
   input         axi_wvalid,
   input         axi_bready,
   input         axi_rready,
   input         axi_awvalid,
   input         axi_arvalid,
   input  [1:0]  axi_awburst,
   input  [1:0]  axi_arburst,
   input  [2:0]  axi_awsize,
   input  [2:0]  axi_arsize,
   input  [3:0]  axi_awid,
   input  [3:0]  axi_arid,
   input  [3:0]  axi_wstrb,
   input  [7:0]  axi_awlen,
   input  [7:0]  axi_arlen,
   input  [31:0] axi_wdata,
   input  [31:0] axi_araddr,
   input  [31:0] axi_awaddr,
   output        axi_awready,
   output        axi_wready,
   output        axi_bvalid,
   output        axi_arready,
   output        axi_rvalid,
   output        axi_rlast,
   output [1:0]  axi_bresp,
   output [3:0]  axi_bid,
   output [1:0]  axi_rresp,
   output [3:0]  axi_rid,
   output [31:0] axi_rdata
 );

 `ifdef VERILATOR
 reg npc_rvalid, npc_bvalid;
 reg [1:0]  npc_bresp;
 reg [31:0] npc_rdata;

 always@(posedge clock) begin
   if(axi_arvalid) begin
     npc_rvalid <= 1;
     npc_rdata  <= pmem_read(axi_araddr);
   end else begin
     npc_rvalid <= 0;
     npc_rdata  <= 0;
   end

   if(axi_awvalid) begin
     npc_bvalid <= 1;
     {30'b0, npc_bresp}  <= pmem_write(axi_awaddr, axi_wdata, {28'b0, axi_wstrb});
   end else begin
     npc_bvalid <= 0;
   end
 end

 assign axi_rdata   = npc_rdata;
 assign axi_rvalid  = npc_rvalid;
 assign axi_bvalid  = npc_bvalid;
 assign axi_bresp   = npc_bresp;
 assign axi_arready = 1;
 assign axi_awready = 1;
 assign axi_wready  = 1;
 `endif

 endmodule
  

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----

