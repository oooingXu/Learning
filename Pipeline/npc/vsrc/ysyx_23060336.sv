// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ysyx_23060336_IFU(	// @[src/main/IFU.scala:12:7]
  input         clock,	// @[src/main/IFU.scala:12:7]
                reset,	// @[src/main/IFU.scala:12:7]
                io_halt,	// @[src/main/IFU.scala:13:14]
                io_wen,	// @[src/main/IFU.scala:13:14]
  output        io_out_valid,	// @[src/main/IFU.scala:13:14]
  output [31:0] io_out_bits_inst,	// @[src/main/IFU.scala:13:14]
                io_out_bits_pc,	// @[src/main/IFU.scala:13:14]
  output        io_out_bits_halt,	// @[src/main/IFU.scala:13:14]
  output [31:0] io_inst,	// @[src/main/IFU.scala:13:14]
                io_pc,	// @[src/main/IFU.scala:13:14]
  input  [31:0] io_dnpc,	// @[src/main/IFU.scala:13:14]
  output        io_valid,	// @[src/main/IFU.scala:13:14]
                io_ready,	// @[src/main/IFU.scala:13:14]
  input         io_axi_wready,	// @[src/main/IFU.scala:13:14]
  output [31:0] io_axi_araddr,	// @[src/main/IFU.scala:13:14]
  output        io_axi_rready,	// @[src/main/IFU.scala:13:14]
  input         io_axi_rvalid,	// @[src/main/IFU.scala:13:14]
  input  [31:0] io_axi_rdata	// @[src/main/IFU.scala:13:14]
);

  reg         delay1;	// @[src/main/IFU.scala:30:23]
  reg         delay2;	// @[src/main/IFU.scala:31:23]
  reg         delay3;	// @[src/main/IFU.scala:32:23]
  reg  [31:0] PC;	// @[src/main/IFU.scala:40:19]
  wire        _io_out_bits_pc_T_1 = io_dnpc == 32'h4;	// @[src/main/IFU.scala:48:21]
  wire        io_valid_0 =
    (~io_wen & io_axi_rvalid | io_wen & io_axi_wready & delay3 | io_wen & io_axi_rvalid
     & delay3) & ~io_halt;	// @[src/main/IFU.scala:32:23, :74:31, :76:{25,33,79,89,117,128}]
  wire [31:0] io_inst_0 = io_valid_0 ? io_axi_rdata : 32'h0;	// @[src/main/IFU.scala:76:128, :77:26]
  always @(posedge clock) begin	// @[src/main/IFU.scala:12:7]
    if (reset) begin	// @[src/main/IFU.scala:12:7]
      delay1 <= 1'h0;	// @[src/main/IFU.scala:12:7, :30:23]
      delay2 <= 1'h0;	// @[src/main/IFU.scala:12:7, :31:23]
      delay3 <= 1'h0;	// @[src/main/IFU.scala:12:7, :32:23]
      PC <= 32'h80000000;	// @[src/main/IFU.scala:40:19]
    end
    else begin	// @[src/main/IFU.scala:12:7]
      delay1 <= io_axi_rvalid;	// @[src/main/IFU.scala:30:23]
      delay2 <= delay1;	// @[src/main/IFU.scala:30:23, :31:23]
      delay3 <= delay2;	// @[src/main/IFU.scala:31:23, :32:23]
      if (reset)	// @[src/main/IFU.scala:12:7]
        PC <= 32'h80000000;	// @[src/main/IFU.scala:40:19]
      else if (~(_io_out_bits_pc_T_1 | ~io_valid_0 | io_halt))	// @[src/main/IFU.scala:48:{12,21}, :49:{12,13}, :50:12, :76:128]
        PC <= io_dnpc;	// @[src/main/IFU.scala:40:19]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/IFU.scala:12:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/IFU.scala:12:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/IFU.scala:12:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];	// @[src/main/IFU.scala:12:7]
    initial begin	// @[src/main/IFU.scala:12:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/IFU.scala:12:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/IFU.scala:12:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/IFU.scala:12:7]
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// @[src/main/IFU.scala:12:7]
        end	// @[src/main/IFU.scala:12:7]
        delay1 = _RANDOM[1'h0][1];	// @[src/main/IFU.scala:12:7, :30:23]
        delay2 = _RANDOM[1'h0][2];	// @[src/main/IFU.scala:12:7, :30:23, :31:23]
        delay3 = _RANDOM[1'h0][3];	// @[src/main/IFU.scala:12:7, :30:23, :32:23]
        PC = {_RANDOM[1'h0][31:4], _RANDOM[1'h1][3:0]};	// @[src/main/IFU.scala:12:7, :30:23, :40:19]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/IFU.scala:12:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/IFU.scala:12:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_valid = io_valid_0;	// @[src/main/IFU.scala:12:7, :76:128]
  assign io_out_bits_inst = io_inst_0;	// @[src/main/IFU.scala:12:7, :77:26]
  assign io_out_bits_pc = reset ? 32'h80000000 : _io_out_bits_pc_T_1 ? PC : io_dnpc;	// @[src/main/IFU.scala:12:7, :40:19, :48:21, :55:24, :56:24]
  assign io_out_bits_halt = io_halt;	// @[src/main/IFU.scala:12:7]
  assign io_inst = io_inst_0;	// @[src/main/IFU.scala:12:7, :77:26]
  assign io_pc = PC;	// @[src/main/IFU.scala:12:7, :40:19]
  assign io_valid = io_valid_0;	// @[src/main/IFU.scala:12:7, :76:128]
  assign io_ready = ~io_halt;	// @[src/main/IFU.scala:12:7, :74:31]
  assign io_axi_araddr = reset ? 32'h80000000 : _io_out_bits_pc_T_1 ? PC : io_dnpc;	// @[src/main/IFU.scala:12:7, :40:19, :48:21, :52:23, :53:23]
  assign io_axi_rready = ~io_halt;	// @[src/main/IFU.scala:12:7, :74:31]
endmodule

module ysyx_23060336_IDU(	// @[src/main/IDU.scala:33:7]
  input         clock,	// @[src/main/IDU.scala:33:7]
                reset,	// @[src/main/IDU.scala:33:7]
  output        io_in_ready,	// @[src/main/IDU.scala:34:20]
  input  [31:0] io_in_bits_inst,	// @[src/main/IDU.scala:34:20]
                io_in_bits_pc,	// @[src/main/IDU.scala:34:20]
  input         io_in_bits_halt,	// @[src/main/IDU.scala:34:20]
  output        io_out_valid,	// @[src/main/IDU.scala:34:20]
  output [4:0]  io_out_bits_rd,	// @[src/main/IDU.scala:34:20]
  output [31:0] io_out_bits_pc,	// @[src/main/IDU.scala:34:20]
                io_out_bits_imm,	// @[src/main/IDU.scala:34:20]
                io_out_bits_zimm,	// @[src/main/IDU.scala:34:20]
                io_out_bits_src1,	// @[src/main/IDU.scala:34:20]
                io_out_bits_src2,	// @[src/main/IDU.scala:34:20]
  output [11:0] io_out_bits_csr,	// @[src/main/IDU.scala:34:20]
  output [31:0] io_out_bits_Csr,	// @[src/main/IDU.scala:34:20]
  output [1:0]  io_out_bits_PcMux,	// @[src/main/IDU.scala:34:20]
  output [3:0]  io_out_bits_AluMux,	// @[src/main/IDU.scala:34:20]
                io_out_bits_AluSel,	// @[src/main/IDU.scala:34:20]
  output [2:0]  io_out_bits_MemNum,	// @[src/main/IDU.scala:34:20]
                io_out_bits_RegNum,	// @[src/main/IDU.scala:34:20]
  output        io_out_bits_CsrWr,	// @[src/main/IDU.scala:34:20]
                io_out_bits_MemWr,	// @[src/main/IDU.scala:34:20]
                io_out_bits_RegWr,	// @[src/main/IDU.scala:34:20]
                io_out_bits_MemtoReg,	// @[src/main/IDU.scala:34:20]
                io_out_bits_Branch,	// @[src/main/IDU.scala:34:20]
                io_out_bits_mret,	// @[src/main/IDU.scala:34:20]
                io_out_bits_ecall,	// @[src/main/IDU.scala:34:20]
                io_out_bits_Recsr,	// @[src/main/IDU.scala:34:20]
                io_out_bits_halt,	// @[src/main/IDU.scala:34:20]
  input  [31:0] io_Csr,	// @[src/main/IDU.scala:34:20]
                io_src1,	// @[src/main/IDU.scala:34:20]
                io_src2,	// @[src/main/IDU.scala:34:20]
  input  [4:0]  io_exu_rd,	// @[src/main/IDU.scala:34:20]
                io_lsu_rd,	// @[src/main/IDU.scala:34:20]
                io_wbu_rd,	// @[src/main/IDU.scala:34:20]
  output [4:0]  io_rs1,	// @[src/main/IDU.scala:34:20]
                io_rs2,	// @[src/main/IDU.scala:34:20]
  output [11:0] io_csr,	// @[src/main/IDU.scala:34:20]
  output [31:0] io_pc,	// @[src/main/IDU.scala:34:20]
  output [1:0]  io_pcmux,	// @[src/main/IDU.scala:34:20]
  output [6:0]  io_opcode,	// @[src/main/IDU.scala:34:20]
  output [31:0] io_inst,	// @[src/main/IDU.scala:34:20]
                io_imm,	// @[src/main/IDU.scala:34:20]
  output        io_valid,	// @[src/main/IDU.scala:34:20]
                io_ready,	// @[src/main/IDU.scala:34:20]
                io_iduMemWr	// @[src/main/IDU.scala:34:20]
);

  wire [6:0]  immNum_invInputs = ~{io_in_bits_inst[13:12], io_in_bits_inst[6:2]};	// @[src/main/IDU.scala:275:33, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [4:0]  instType_invInputs = ~(io_in_bits_inst[6:2]);	// @[src/main/IDU.scala:275:33, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [5:0]  _instType_andMatrixOutputs_T_2 =
    {io_in_bits_inst[0],
     io_in_bits_inst[1],
     instType_invInputs[0],
     instType_invInputs[1],
     instType_invInputs[3],
     instType_invInputs[4]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [6:0]  _instType_andMatrixOutputs_T_3 =
    {io_in_bits_inst[0],
     io_in_bits_inst[1],
     io_in_bits_inst[2],
     io_in_bits_inst[3],
     instType_invInputs[2],
     instType_invInputs[3],
     instType_invInputs[4]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [5:0]  _instType_andMatrixOutputs_T_6 =
    {io_in_bits_inst[0],
     io_in_bits_inst[1],
     instType_invInputs[0],
     instType_invInputs[1],
     io_in_bits_inst[5],
     io_in_bits_inst[6]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [5:0]  _instType_andMatrixOutputs_T_8 =
    {io_in_bits_inst[0],
     io_in_bits_inst[1],
     io_in_bits_inst[2],
     instType_invInputs[2],
     io_in_bits_inst[5],
     io_in_bits_inst[6]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [29:0] io_out_bits_ecall_invInputs = ~(io_in_bits_inst[31:2]);	// @[src/main/IDU.scala:34:20, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [29:0] io_out_bits_mret_invInputs = ~(io_in_bits_inst[31:2]);	// @[src/main/IDU.scala:34:20, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [2:0]  io_out_bits_Branch_invInputs = ~(io_in_bits_inst[4:2]);	// @[src/main/scala/chisel3/util/experimental/decode/decoder.scala:39:16, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [2:0]  io_out_bits_PcMux_invInputs = ~(io_in_bits_inst[4:2]);	// @[src/main/scala/chisel3/util/experimental/decode/decoder.scala:39:16, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [1:0]  io_out_bits_PcMux_plaOutput =
    {&{io_in_bits_inst[0],
       io_in_bits_inst[1],
       io_in_bits_inst[2],
       io_out_bits_PcMux_invInputs[1],
       io_out_bits_PcMux_invInputs[2],
       io_in_bits_inst[5],
       io_in_bits_inst[6]},
     |{&{io_in_bits_inst[0],
         io_in_bits_inst[1],
         io_out_bits_PcMux_invInputs[0],
         io_out_bits_PcMux_invInputs[1],
         io_out_bits_PcMux_invInputs[2],
         io_in_bits_inst[5],
         io_in_bits_inst[6]},
       &{io_in_bits_inst[0],
         io_in_bits_inst[1],
         io_in_bits_inst[2],
         io_in_bits_inst[3],
         io_out_bits_PcMux_invInputs[2],
         io_in_bits_inst[5],
         io_in_bits_inst[6]}}};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :102:36, :114:{19,36}]
  wire [4:0]  io_out_bits_MemWr_invInputs = ~(io_in_bits_inst[6:2]);	// @[src/main/IDU.scala:275:33, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [6:0]  _io_out_bits_MemWr_andMatrixOutputs_T =
    {io_in_bits_inst[0],
     io_in_bits_inst[1],
     io_out_bits_MemWr_invInputs[0],
     io_out_bits_MemWr_invInputs[1],
     io_out_bits_MemWr_invInputs[2],
     io_in_bits_inst[5],
     io_out_bits_MemWr_invInputs[4]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [4:0]  io_out_bits_MemtoReg_invInputs = ~(io_in_bits_inst[6:2]);	// @[src/main/IDU.scala:275:33, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [4:0]  io_out_bits_RegWr_invInputs = ~(io_in_bits_inst[6:2]);	// @[src/main/IDU.scala:275:33, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [1:0]  io_out_bits_RegWr_invInputs_1 = ~(io_in_bits_inst[3:2]);	// @[src/main/IDU.scala:275:33, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [1:0]  io_out_bits_CsrWr_invInputs = ~(io_in_bits_inst[3:2]);	// @[src/main/IDU.scala:275:33, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [1:0]  io_out_bits_Recsr_invInputs = ~(io_in_bits_inst[3:2]);	// @[src/main/IDU.scala:275:33, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [7:0]  _GEN = {io_in_bits_inst[14:12], io_in_bits_inst[6:2]};	// @[src/main/IDU.scala:272:31, :275:33]
  wire [7:0]  io_out_bits_MemNum_invInputs = ~_GEN;	// @[src/main/IDU.scala:275:33, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [7:0]  io_out_bits_RegNum_invInputs = ~_GEN;	// @[src/main/IDU.scala:275:33, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [8:0]  _io_out_bits_RegNum_andMatrixOutputs_T_1 =
    {io_in_bits_inst[0],
     io_in_bits_inst[1],
     io_out_bits_RegNum_invInputs[0],
     io_out_bits_RegNum_invInputs[1],
     io_out_bits_RegNum_invInputs[2],
     io_out_bits_RegNum_invInputs[3],
     io_out_bits_RegNum_invInputs[4],
     io_out_bits_RegNum_invInputs[5],
     io_out_bits_RegNum_invInputs[7]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [8:0]  _io_out_bits_RegNum_andMatrixOutputs_T_2 =
    {io_in_bits_inst[0],
     io_in_bits_inst[1],
     io_out_bits_RegNum_invInputs[0],
     io_out_bits_RegNum_invInputs[1],
     io_out_bits_RegNum_invInputs[2],
     io_out_bits_RegNum_invInputs[3],
     io_out_bits_RegNum_invInputs[4],
     io_out_bits_RegNum_invInputs[6],
     io_out_bits_RegNum_invInputs[7]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [4:0]  AluMuxa_invInputs = ~(io_in_bits_inst[6:2]);	// @[src/main/IDU.scala:275:33, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [5:0]  _AluMuxa_andMatrixOutputs_T_3 =
    {io_in_bits_inst[0],
     io_in_bits_inst[1],
     AluMuxa_invInputs[1],
     io_in_bits_inst[4],
     io_in_bits_inst[5],
     AluMuxa_invInputs[4]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [7:0]  AluMuxb_invInputs = ~_GEN;	// @[src/main/IDU.scala:275:33, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [14:0] AluSela_invInputs =
    ~{io_in_bits_inst[31:25], io_in_bits_inst[14:12], io_in_bits_inst[6:2]};	// @[src/main/IDU.scala:271:31, :272:31, :275:33, :300:29, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [15:0] _AluSela_andMatrixOutputs_T =
    {io_in_bits_inst[0],
     io_in_bits_inst[1],
     AluSela_invInputs[0],
     AluSela_invInputs[1],
     io_in_bits_inst[4],
     AluSela_invInputs[4],
     io_in_bits_inst[12],
     AluSela_invInputs[6],
     AluSela_invInputs[7],
     AluSela_invInputs[8],
     AluSela_invInputs[9],
     AluSela_invInputs[10],
     AluSela_invInputs[11],
     AluSela_invInputs[12],
     AluSela_invInputs[13],
     AluSela_invInputs[14]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [15:0] _AluSela_andMatrixOutputs_T_9 =
    {io_in_bits_inst[0],
     io_in_bits_inst[1],
     AluSela_invInputs[0],
     AluSela_invInputs[1],
     io_in_bits_inst[4],
     AluSela_invInputs[4],
     io_in_bits_inst[12],
     AluSela_invInputs[6],
     io_in_bits_inst[14],
     AluSela_invInputs[8],
     AluSela_invInputs[9],
     AluSela_invInputs[10],
     AluSela_invInputs[11],
     AluSela_invInputs[12],
     io_in_bits_inst[30],
     AluSela_invInputs[14]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [7:0]  AluSelb_invInputs = ~_GEN;	// @[src/main/IDU.scala:275:33, src/main/scala/chisel3/util/pla.scala:78:21]
  wire [8:0]  _AluSelb_andMatrixOutputs_T_8 =
    {io_in_bits_inst[0],
     io_in_bits_inst[1],
     AluSelb_invInputs[0],
     AluSelb_invInputs[1],
     io_in_bits_inst[4],
     io_in_bits_inst[5],
     io_in_bits_inst[6],
     io_in_bits_inst[12],
     io_in_bits_inst[13]};	// @[src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:53]
  wire [2:0]  _GEN_0 =
    {{&{io_in_bits_inst[0],
        io_in_bits_inst[1],
        instType_invInputs[0],
        instType_invInputs[1],
        instType_invInputs[2],
        instType_invInputs[4]},
      &_instType_andMatrixOutputs_T_2,
      &_instType_andMatrixOutputs_T_3,
      &{io_in_bits_inst[0],
        io_in_bits_inst[1],
        io_in_bits_inst[2],
        instType_invInputs[1],
        io_in_bits_inst[4],
        instType_invInputs[4]},
      &_instType_andMatrixOutputs_T_6,
      &{io_in_bits_inst[0],
        io_in_bits_inst[1],
        instType_invInputs[1],
        instType_invInputs[2],
        io_in_bits_inst[5],
        io_in_bits_inst[6]}} == 6'h0,
     {&{io_in_bits_inst[0],
        io_in_bits_inst[1],
        instType_invInputs[0],
        instType_invInputs[1],
        instType_invInputs[4]},
      &_instType_andMatrixOutputs_T_3,
      &{io_in_bits_inst[0],
        io_in_bits_inst[1],
        instType_invInputs[0],
        instType_invInputs[1],
        io_in_bits_inst[4],
        io_in_bits_inst[5]},
      &_instType_andMatrixOutputs_T_8} == 4'h0,
     {&_instType_andMatrixOutputs_T_2,
      &_instType_andMatrixOutputs_T_3,
      &_instType_andMatrixOutputs_T_6,
      &_instType_andMatrixOutputs_T_8} == 4'h0};	// @[src/main/IDU.scala:276:19, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}]
  wire        _isRAWb_T_14 = _GEN_0 == 3'h1;	// @[src/main/IDU.scala:276:19, :322:23]
  wire        _isRAWb_T_15 = _GEN_0 == 3'h2;	// @[src/main/IDU.scala:276:19, :323:23]
  reg  [31:0] casez_tmp;	// @[src/main/IDU.scala:321:13]
  always_comb begin	// @[src/main/IDU.scala:321:{13,23}, :322:{13,23}, :323:{13,23}, :324:{13,23}, :325:{13,23}]
    casez (_GEN_0)	// @[src/main/IDU.scala:276:19, :321:{13,23}, :322:{13,23}, :323:{13,23}, :324:{13,23}, :325:{13,23}]
      3'b000:
        casez_tmp = {{20{io_in_bits_inst[31]}}, io_in_bits_inst[31:20]};	// @[src/main/IDU.scala:306:31, :314:{18,23,34}, :321:{13,23}, :322:{13,23}, :323:{13,23}, :324:{13,23}, :325:{13,23}]
      3'b001:
        casez_tmp =
          {{20{io_in_bits_inst[31]}}, io_in_bits_inst[31:25], io_in_bits_inst[11:7]};	// @[src/main/IDU.scala:268:31, :271:31, :315:{18,23,34}, :321:{13,23}, :322:{13,23}, :323:{13,23}, :324:{13,23}, :325:{13,23}]
      3'b010:
        casez_tmp =
          {{20{io_in_bits_inst[31]}},
           io_in_bits_inst[7],
           io_in_bits_inst[30:25],
           io_in_bits_inst[11:8],
           1'h0};	// @[src/main/IDU.scala:33:7, :310:{35,56,76,101}, :316:18, :321:{13,23}, :322:{13,23}, :323:{13,23}, :324:{13,23}, :325:{13,23}]
      3'b011:
        casez_tmp = {io_in_bits_inst[31:12], 12'h0};	// @[src/main/IDU.scala:308:31, :313:{18,31}, :321:{13,23}, :322:{13,23}, :323:{13,23}, :324:{13,23}, :325:{13,23}]
      3'b100:
        casez_tmp =
          {{12{io_in_bits_inst[31]}},
           io_in_bits_inst[19:12],
           io_in_bits_inst[20],
           io_in_bits_inst[30:21],
           1'h0};	// @[src/main/IDU.scala:33:7, :310:35, :311:{56,81,102}, :317:18, :321:{13,23}, :322:{13,23}, :323:{13,23}, :324:{13,23}, :325:{13,23}]
      3'b101:
        casez_tmp = 32'h0;	// @[src/main/IDU.scala:321:{13,23}, :322:{13,23}, :323:{13,23}, :324:{13,23}, :325:{13,23}]
      3'b110:
        casez_tmp = 32'h0;	// @[src/main/IDU.scala:321:{13,23}, :322:{13,23}, :323:{13,23}, :324:{13,23}, :325:{13,23}]
      default:
        casez_tmp = 32'h0;	// @[src/main/IDU.scala:321:{13,23}, :322:{13,23}, :323:{13,23}, :324:{13,23}, :325:{13,23}]
    endcase	// @[src/main/IDU.scala:276:19, :321:{13,23}, :322:{13,23}, :323:{13,23}, :324:{13,23}, :325:{13,23}]
  end // always_comb
  wire        _isRAWn_T_14 = io_in_bits_inst[19:15] == io_exu_rd;	// @[src/main/IDU.scala:269:31, :339:42]
  wire        _isRAWn_T_18 = io_in_bits_inst[19:15] == io_lsu_rd;	// @[src/main/IDU.scala:269:31, :339:42]
  wire        _isRAWn_T_23 = io_in_bits_inst[19:15] == io_wbu_rd;	// @[src/main/IDU.scala:269:31, :339:42]
  wire        _isRAWb_T_17 = _GEN_0 == 3'h5;	// @[src/main/IDU.scala:276:19, :347:27]
  wire        _isRAWn_T = io_in_bits_inst[24:20] == io_exu_rd;	// @[src/main/IDU.scala:270:31, :339:42]
  wire        _isRAWn_T_4 = io_in_bits_inst[24:20] == io_lsu_rd;	// @[src/main/IDU.scala:270:31, :339:42]
  wire        _isRAWn_T_9 = io_in_bits_inst[24:20] == io_wbu_rd;	// @[src/main/IDU.scala:270:31, :339:42]
  reg         isRAWn;	// @[src/main/IDU.scala:356:23]
  wire        isRAW =
    ((_isRAWn_T_14 & (|(io_in_bits_inst[19:15])) | _isRAWn_T_18
      & (|(io_in_bits_inst[19:15])) | _isRAWn_T_23 & (|(io_in_bits_inst[19:15])))
     & (_GEN_0 == 3'h0 | _isRAWb_T_14 | _isRAWb_T_15 | _isRAWb_T_17)
     | (_isRAWn_T & (|(io_in_bits_inst[24:20])) | _isRAWn_T_4
        & (|(io_in_bits_inst[24:20])) | _isRAWn_T_9 & (|(io_in_bits_inst[24:20])))
     & (_isRAWb_T_14 | _isRAWb_T_15 | _isRAWb_T_17)) & ~isRAWn;	// @[src/main/IDU.scala:269:31, :270:31, :276:19, :321:23, :322:23, :323:23, :339:{42,50,58}, :342:44, :343:44, :346:42, :347:27, :350:44, :351:44, :353:42, :356:23, :367:{20,31,34}, src/main/scala/chisel3/util/pla.scala:114:36]
  always @(posedge clock) begin	// @[src/main/IDU.scala:33:7]
    if (reset)	// @[src/main/IDU.scala:33:7]
      isRAWn <= 1'h0;	// @[src/main/IDU.scala:33:7, :356:23]
    else	// @[src/main/IDU.scala:33:7]
      isRAWn <=
        _isRAWn_T & (|(io_in_bits_inst[24:20])) & _isRAWn_T_4 & _isRAWn_T_9 | _isRAWn_T_14
        & (|(io_in_bits_inst[19:15])) & _isRAWn_T_18 & _isRAWn_T_23;	// @[src/main/IDU.scala:269:31, :270:31, :339:{42,58}, :356:23, :359:40, :360:40, :362:40]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/IDU.scala:33:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/IDU.scala:33:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/IDU.scala:33:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// @[src/main/IDU.scala:33:7]
    initial begin	// @[src/main/IDU.scala:33:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/IDU.scala:33:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/IDU.scala:33:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/IDU.scala:33:7]
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// @[src/main/IDU.scala:33:7]
        isRAWn = _RANDOM[/*Zero width*/ 1'b0][1];	// @[src/main/IDU.scala:33:7, :356:23]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/IDU.scala:33:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/IDU.scala:33:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = ~isRAW;	// @[src/main/IDU.scala:33:7, :254:19, :367:31]
  assign io_out_valid = ~isRAW;	// @[src/main/IDU.scala:33:7, :254:19, :367:31]
  assign io_out_bits_rd = io_in_bits_inst[11:7];	// @[src/main/IDU.scala:33:7, :268:31]
  assign io_out_bits_pc = io_in_bits_pc;	// @[src/main/IDU.scala:33:7]
  assign io_out_bits_imm =
    (&{io_in_bits_inst[0],
       io_in_bits_inst[1],
       immNum_invInputs[0],
       immNum_invInputs[1],
       io_in_bits_inst[4],
       immNum_invInputs[3],
       immNum_invInputs[4],
       io_in_bits_inst[12],
       immNum_invInputs[6]})
      ? {{27{casez_tmp[4]}}, casez_tmp[4:0]}
      : casez_tmp;	// @[src/main/IDU.scala:33:7, :321:13, :327:{25,37,42,50,59}, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}]
  assign io_out_bits_zimm = {27'h0, io_in_bits_inst[19:15]};	// @[src/main/IDU.scala:33:7, :269:31, :282:{30,35}]
  assign io_out_bits_src1 = io_src1;	// @[src/main/IDU.scala:33:7]
  assign io_out_bits_src2 = io_src2;	// @[src/main/IDU.scala:33:7]
  assign io_out_bits_csr = io_in_bits_inst[31:20];	// @[src/main/IDU.scala:33:7, :306:31]
  assign io_out_bits_Csr = io_Csr;	// @[src/main/IDU.scala:33:7]
  assign io_out_bits_PcMux = io_out_bits_PcMux_plaOutput;	// @[src/main/IDU.scala:33:7, src/main/scala/chisel3/util/pla.scala:102:36]
  assign io_out_bits_AluMux =
    {&{io_in_bits_inst[0],
       io_in_bits_inst[1],
       AluMuxb_invInputs[0],
       AluMuxb_invInputs[1],
       io_in_bits_inst[4],
       io_in_bits_inst[5],
       io_in_bits_inst[6],
       io_in_bits_inst[12],
       AluMuxb_invInputs[6]},
     (|{&{io_in_bits_inst[0],
          io_in_bits_inst[1],
          io_in_bits_inst[2],
          AluMuxa_invInputs[1],
          io_in_bits_inst[4],
          AluMuxa_invInputs[3],
          AluMuxa_invInputs[4]},
        &{io_in_bits_inst[0],
          io_in_bits_inst[1],
          AluMuxa_invInputs[0],
          AluMuxa_invInputs[1],
          io_in_bits_inst[4],
          io_in_bits_inst[5],
          AluMuxa_invInputs[4]},
        &{io_in_bits_inst[0],
          io_in_bits_inst[1],
          AluMuxa_invInputs[0],
          AluMuxa_invInputs[1],
          AluMuxa_invInputs[2],
          io_in_bits_inst[5],
          io_in_bits_inst[6]}})
       | (&{io_in_bits_inst[0],
            io_in_bits_inst[1],
            AluMuxb_invInputs[0],
            AluMuxb_invInputs[1],
            io_in_bits_inst[4],
            io_in_bits_inst[5],
            io_in_bits_inst[6],
            io_in_bits_inst[13]}),
     (|{&_AluMuxa_andMatrixOutputs_T_3,
        &{io_in_bits_inst[0],
          io_in_bits_inst[1],
          AluMuxa_invInputs[1],
          AluMuxa_invInputs[2],
          io_in_bits_inst[5],
          io_in_bits_inst[6]},
        &{io_in_bits_inst[0],
          io_in_bits_inst[1],
          io_in_bits_inst[2],
          AluMuxa_invInputs[2],
          io_in_bits_inst[5],
          io_in_bits_inst[6]}})
       | (&{io_in_bits_inst[0],
            io_in_bits_inst[1],
            AluMuxb_invInputs[0],
            AluMuxb_invInputs[1],
            io_in_bits_inst[4],
            io_in_bits_inst[5],
            io_in_bits_inst[6],
            io_in_bits_inst[13],
            io_in_bits_inst[14]}),
     (|{&{io_in_bits_inst[0],
          io_in_bits_inst[1],
          AluMuxa_invInputs[0],
          AluMuxa_invInputs[1],
          AluMuxa_invInputs[4]},
        &{io_in_bits_inst[0],
          io_in_bits_inst[1],
          AluMuxa_invInputs[0],
          AluMuxa_invInputs[1],
          AluMuxa_invInputs[2],
          io_in_bits_inst[5]},
        &_AluMuxa_andMatrixOutputs_T_3})
       | (|{&{io_in_bits_inst[0],
              io_in_bits_inst[1],
              AluMuxb_invInputs[0],
              AluMuxb_invInputs[1],
              io_in_bits_inst[4],
              io_in_bits_inst[5],
              io_in_bits_inst[6],
              io_in_bits_inst[13],
              AluMuxb_invInputs[7]},
            &{io_in_bits_inst[0],
              io_in_bits_inst[1],
              AluMuxb_invInputs[0],
              AluMuxb_invInputs[1],
              io_in_bits_inst[4],
              io_in_bits_inst[5],
              io_in_bits_inst[6],
              io_in_bits_inst[12],
              AluMuxb_invInputs[6],
              io_in_bits_inst[14]}})};	// @[src/main/IDU.scala:33:7, :303:36, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}]
  assign io_out_bits_AluSel =
    {|{&{io_in_bits_inst[0],
         io_in_bits_inst[1],
         AluSela_invInputs[0],
         AluSela_invInputs[1],
         io_in_bits_inst[4],
         io_in_bits_inst[5],
         AluSela_invInputs[4],
         io_in_bits_inst[13],
         AluSela_invInputs[7],
         AluSela_invInputs[8],
         AluSela_invInputs[9],
         AluSela_invInputs[10],
         AluSela_invInputs[11],
         AluSela_invInputs[12],
         AluSela_invInputs[13],
         AluSela_invInputs[14]},
       &{io_in_bits_inst[0],
         io_in_bits_inst[1],
         AluSela_invInputs[0],
         AluSela_invInputs[1],
         io_in_bits_inst[4],
         AluSela_invInputs[4],
         io_in_bits_inst[12],
         AluSela_invInputs[6],
         io_in_bits_inst[14],
         AluSela_invInputs[8],
         AluSela_invInputs[9],
         AluSela_invInputs[10],
         AluSela_invInputs[11],
         AluSela_invInputs[12],
         AluSela_invInputs[13],
         AluSela_invInputs[14]}},
     |{&_AluSela_andMatrixOutputs_T,
       &{io_in_bits_inst[0],
         io_in_bits_inst[1],
         AluSela_invInputs[0],
         AluSela_invInputs[1],
         io_in_bits_inst[4],
         io_in_bits_inst[5],
         AluSela_invInputs[4],
         AluSela_invInputs[5],
         io_in_bits_inst[14],
         AluSela_invInputs[8],
         AluSela_invInputs[9],
         AluSela_invInputs[10],
         AluSela_invInputs[11],
         AluSela_invInputs[12],
         AluSela_invInputs[13],
         AluSela_invInputs[14]},
       &_AluSela_andMatrixOutputs_T_9},
     |{&_AluSela_andMatrixOutputs_T,
       &{io_in_bits_inst[0],
         io_in_bits_inst[1],
         AluSela_invInputs[0],
         AluSela_invInputs[1],
         io_in_bits_inst[4],
         io_in_bits_inst[5],
         AluSela_invInputs[4],
         io_in_bits_inst[12],
         io_in_bits_inst[13],
         AluSela_invInputs[8],
         AluSela_invInputs[9],
         AluSela_invInputs[10],
         AluSela_invInputs[11],
         AluSela_invInputs[12],
         AluSela_invInputs[13],
         AluSela_invInputs[14]},
       &_AluSela_andMatrixOutputs_T_9},
     |{&_AluSela_andMatrixOutputs_T,
       &{io_in_bits_inst[0],
         io_in_bits_inst[1],
         AluSela_invInputs[0],
         AluSela_invInputs[1],
         io_in_bits_inst[4],
         io_in_bits_inst[5],
         AluSela_invInputs[4],
         AluSela_invInputs[5],
         io_in_bits_inst[13],
         AluSela_invInputs[7],
         AluSela_invInputs[8],
         AluSela_invInputs[9],
         AluSela_invInputs[10],
         AluSela_invInputs[11],
         AluSela_invInputs[12],
         AluSela_invInputs[13],
         AluSela_invInputs[14]},
       &{io_in_bits_inst[0],
         io_in_bits_inst[1],
         AluSela_invInputs[0],
         AluSela_invInputs[1],
         io_in_bits_inst[4],
         io_in_bits_inst[5],
         AluSela_invInputs[4],
         AluSela_invInputs[5],
         AluSela_invInputs[6],
         io_in_bits_inst[14],
         AluSela_invInputs[8],
         AluSela_invInputs[9],
         AluSela_invInputs[10],
         AluSela_invInputs[11],
         AluSela_invInputs[12],
         AluSela_invInputs[13],
         AluSela_invInputs[14]},
       &{io_in_bits_inst[0],
         io_in_bits_inst[1],
         AluSela_invInputs[0],
         AluSela_invInputs[1],
         io_in_bits_inst[4],
         io_in_bits_inst[5],
         AluSela_invInputs[4],
         io_in_bits_inst[12],
         io_in_bits_inst[13],
         io_in_bits_inst[14],
         AluSela_invInputs[8],
         AluSela_invInputs[9],
         AluSela_invInputs[10],
         AluSela_invInputs[11],
         AluSela_invInputs[12],
         AluSela_invInputs[13],
         AluSela_invInputs[14]},
       &{io_in_bits_inst[0],
         io_in_bits_inst[1],
         AluSela_invInputs[0],
         AluSela_invInputs[1],
         io_in_bits_inst[4],
         io_in_bits_inst[5],
         AluSela_invInputs[4],
         AluSela_invInputs[5],
         AluSela_invInputs[6],
         AluSela_invInputs[7],
         AluSela_invInputs[8],
         AluSela_invInputs[9],
         AluSela_invInputs[10],
         AluSela_invInputs[11],
         AluSela_invInputs[12],
         io_in_bits_inst[30],
         AluSela_invInputs[14]}}}
    | {|{&{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           AluSelb_invInputs[2],
           io_in_bits_inst[5],
           io_in_bits_inst[6],
           AluSelb_invInputs[6]},
         &{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           io_in_bits_inst[4],
           AluSelb_invInputs[3],
           AluSelb_invInputs[4],
           io_in_bits_inst[13],
           AluSelb_invInputs[7]},
         &{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           AluSelb_invInputs[2],
           io_in_bits_inst[5],
           io_in_bits_inst[6],
           io_in_bits_inst[14]}},
       |{&{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           AluSelb_invInputs[2],
           io_in_bits_inst[5],
           io_in_bits_inst[6],
           AluSelb_invInputs[6],
           AluSelb_invInputs[7]},
         &{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           io_in_bits_inst[4],
           io_in_bits_inst[5],
           io_in_bits_inst[6],
           AluSelb_invInputs[5],
           io_in_bits_inst[13]},
         &{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           io_in_bits_inst[4],
           AluSelb_invInputs[3],
           AluSelb_invInputs[4],
           AluSelb_invInputs[5],
           io_in_bits_inst[14]},
         &{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           AluSelb_invInputs[2],
           io_in_bits_inst[5],
           io_in_bits_inst[6],
           io_in_bits_inst[12],
           io_in_bits_inst[13],
           io_in_bits_inst[14]}},
       |{&{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           AluSelb_invInputs[2],
           io_in_bits_inst[5],
           io_in_bits_inst[6],
           io_in_bits_inst[12],
           AluSelb_invInputs[6]},
         &{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           io_in_bits_inst[4],
           AluSelb_invInputs[3],
           AluSelb_invInputs[4],
           io_in_bits_inst[12],
           io_in_bits_inst[13]},
         &_AluSelb_andMatrixOutputs_T_8,
         &{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           AluSelb_invInputs[2],
           io_in_bits_inst[5],
           io_in_bits_inst[6],
           AluSelb_invInputs[5],
           io_in_bits_inst[13],
           io_in_bits_inst[14]}},
       |{&{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           AluSelb_invInputs[2],
           io_in_bits_inst[5],
           io_in_bits_inst[6],
           AluSelb_invInputs[5],
           AluSelb_invInputs[6]},
         &{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           io_in_bits_inst[4],
           AluSelb_invInputs[3],
           AluSelb_invInputs[4],
           AluSelb_invInputs[5],
           io_in_bits_inst[13],
           AluSelb_invInputs[7]},
         &_AluSelb_andMatrixOutputs_T_8,
         &{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           io_in_bits_inst[4],
           AluSelb_invInputs[3],
           AluSelb_invInputs[4],
           AluSelb_invInputs[5],
           AluSelb_invInputs[6],
           io_in_bits_inst[14]},
         &{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           AluSelb_invInputs[2],
           io_in_bits_inst[5],
           io_in_bits_inst[6],
           AluSelb_invInputs[6],
           io_in_bits_inst[14]},
         &{io_in_bits_inst[0],
           io_in_bits_inst[1],
           AluSelb_invInputs[0],
           AluSelb_invInputs[1],
           io_in_bits_inst[4],
           AluSelb_invInputs[3],
           AluSelb_invInputs[4],
           io_in_bits_inst[12],
           io_in_bits_inst[13],
           io_in_bits_inst[14]}}};	// @[src/main/IDU.scala:33:7, :304:36, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :102:36, :114:{19,36}]
  assign io_out_bits_MemNum =
    {{io_in_bits_inst[0],
      io_in_bits_inst[1],
      io_out_bits_MemNum_invInputs[0],
      io_out_bits_MemNum_invInputs[1],
      io_out_bits_MemNum_invInputs[2],
      io_in_bits_inst[5],
      io_out_bits_MemNum_invInputs[4],
      io_out_bits_MemNum_invInputs[6],
      io_out_bits_MemNum_invInputs[7]} != 9'h1FF,
     {io_in_bits_inst[0],
      io_in_bits_inst[1],
      io_out_bits_MemNum_invInputs[0],
      io_out_bits_MemNum_invInputs[1],
      io_out_bits_MemNum_invInputs[2],
      io_in_bits_inst[5],
      io_out_bits_MemNum_invInputs[4],
      io_out_bits_MemNum_invInputs[5],
      io_out_bits_MemNum_invInputs[7]} != 9'h1FF,
     {&{io_in_bits_inst[0],
        io_in_bits_inst[1],
        io_out_bits_MemNum_invInputs[0],
        io_out_bits_MemNum_invInputs[1],
        io_out_bits_MemNum_invInputs[2],
        io_in_bits_inst[5],
        io_out_bits_MemNum_invInputs[4],
        io_in_bits_inst[12],
        io_out_bits_MemNum_invInputs[6],
        io_out_bits_MemNum_invInputs[7]},
      &{io_in_bits_inst[0],
        io_in_bits_inst[1],
        io_out_bits_MemNum_invInputs[0],
        io_out_bits_MemNum_invInputs[1],
        io_out_bits_MemNum_invInputs[2],
        io_in_bits_inst[5],
        io_out_bits_MemNum_invInputs[4],
        io_out_bits_MemNum_invInputs[5],
        io_in_bits_inst[13],
        io_out_bits_MemNum_invInputs[7]}} == 2'h0};	// @[src/main/IDU.scala:33:7, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}, :120:37]
  assign io_out_bits_RegNum =
    {{&{io_in_bits_inst[0],
        io_in_bits_inst[1],
        io_out_bits_RegNum_invInputs[0],
        io_out_bits_RegNum_invInputs[1],
        io_out_bits_RegNum_invInputs[2],
        io_out_bits_RegNum_invInputs[3],
        io_out_bits_RegNum_invInputs[4],
        io_out_bits_RegNum_invInputs[5],
        io_out_bits_RegNum_invInputs[6]},
      &_io_out_bits_RegNum_andMatrixOutputs_T_1,
      &_io_out_bits_RegNum_andMatrixOutputs_T_2} == 3'h0,
     {&_io_out_bits_RegNum_andMatrixOutputs_T_2,
      &{io_in_bits_inst[0],
        io_in_bits_inst[1],
        io_out_bits_RegNum_invInputs[0],
        io_out_bits_RegNum_invInputs[1],
        io_out_bits_RegNum_invInputs[2],
        io_out_bits_RegNum_invInputs[3],
        io_out_bits_RegNum_invInputs[4],
        io_in_bits_inst[12],
        io_out_bits_RegNum_invInputs[6]},
      &{io_in_bits_inst[0],
        io_in_bits_inst[1],
        io_out_bits_RegNum_invInputs[0],
        io_out_bits_RegNum_invInputs[1],
        io_out_bits_RegNum_invInputs[2],
        io_out_bits_RegNum_invInputs[3],
        io_out_bits_RegNum_invInputs[4],
        io_out_bits_RegNum_invInputs[5],
        io_in_bits_inst[13],
        io_in_bits_inst[14]}} == 3'h0,
     {&_io_out_bits_RegNum_andMatrixOutputs_T_1,
      &{io_in_bits_inst[0],
        io_in_bits_inst[1],
        io_out_bits_RegNum_invInputs[0],
        io_out_bits_RegNum_invInputs[1],
        io_out_bits_RegNum_invInputs[2],
        io_out_bits_RegNum_invInputs[3],
        io_out_bits_RegNum_invInputs[4],
        io_in_bits_inst[12],
        io_out_bits_RegNum_invInputs[6],
        io_in_bits_inst[14]}} == 2'h0};	// @[src/main/IDU.scala:33:7, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}, :120:37]
  assign io_out_bits_CsrWr =
    |{&{io_in_bits_inst[0],
        io_in_bits_inst[1],
        io_out_bits_CsrWr_invInputs[0],
        io_out_bits_CsrWr_invInputs[1],
        io_in_bits_inst[4],
        io_in_bits_inst[5],
        io_in_bits_inst[6],
        io_in_bits_inst[12]},
      &{io_in_bits_inst[0],
        io_in_bits_inst[1],
        io_out_bits_CsrWr_invInputs[0],
        io_out_bits_CsrWr_invInputs[1],
        io_in_bits_inst[4],
        io_in_bits_inst[5],
        io_in_bits_inst[6],
        io_in_bits_inst[13]}};	// @[src/main/IDU.scala:33:7, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}]
  assign io_out_bits_MemWr = &_io_out_bits_MemWr_andMatrixOutputs_T;	// @[src/main/IDU.scala:33:7, src/main/scala/chisel3/util/pla.scala:98:{53,70}]
  assign io_out_bits_RegWr =
    (|{&{io_in_bits_inst[0],
         io_in_bits_inst[1],
         io_out_bits_RegWr_invInputs[0],
         io_out_bits_RegWr_invInputs[1],
         io_out_bits_RegWr_invInputs[3],
         io_out_bits_RegWr_invInputs[4]},
       &{io_in_bits_inst[0],
         io_in_bits_inst[1],
         io_out_bits_RegWr_invInputs[1],
         io_in_bits_inst[4],
         io_out_bits_RegWr_invInputs[4]},
       &{io_in_bits_inst[0],
         io_in_bits_inst[1],
         io_in_bits_inst[2],
         io_out_bits_RegWr_invInputs[2],
         io_in_bits_inst[5],
         io_in_bits_inst[6]}})
    | (|{&{io_in_bits_inst[0],
           io_in_bits_inst[1],
           io_out_bits_RegWr_invInputs_1[0],
           io_out_bits_RegWr_invInputs_1[1],
           io_in_bits_inst[4],
           io_in_bits_inst[5],
           io_in_bits_inst[6],
           io_in_bits_inst[12]},
         &{io_in_bits_inst[0],
           io_in_bits_inst[1],
           io_out_bits_RegWr_invInputs_1[0],
           io_out_bits_RegWr_invInputs_1[1],
           io_in_bits_inst[4],
           io_in_bits_inst[5],
           io_in_bits_inst[6],
           io_in_bits_inst[13]}});	// @[src/main/IDU.scala:33:7, :289:50, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}, :114:{19,36}]
  assign io_out_bits_MemtoReg =
    &{io_in_bits_inst[0],
      io_in_bits_inst[1],
      io_out_bits_MemtoReg_invInputs[0],
      io_out_bits_MemtoReg_invInputs[1],
      io_out_bits_MemtoReg_invInputs[2],
      io_out_bits_MemtoReg_invInputs[3],
      io_out_bits_MemtoReg_invInputs[4]};	// @[src/main/IDU.scala:33:7, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}]
  assign io_out_bits_Branch =
    &{io_in_bits_inst[0],
      io_in_bits_inst[1],
      io_out_bits_Branch_invInputs[0],
      io_out_bits_Branch_invInputs[1],
      io_out_bits_Branch_invInputs[2],
      io_in_bits_inst[5],
      io_in_bits_inst[6]};	// @[src/main/IDU.scala:33:7, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}]
  assign io_out_bits_mret =
    &{io_in_bits_inst[0],
      io_in_bits_inst[1],
      io_out_bits_mret_invInputs[0],
      io_out_bits_mret_invInputs[1],
      io_in_bits_inst[4],
      io_in_bits_inst[5],
      io_in_bits_inst[6],
      io_out_bits_mret_invInputs[5],
      io_out_bits_mret_invInputs[6],
      io_out_bits_mret_invInputs[7],
      io_out_bits_mret_invInputs[8],
      io_out_bits_mret_invInputs[9],
      io_out_bits_mret_invInputs[10],
      io_out_bits_mret_invInputs[11],
      io_out_bits_mret_invInputs[12],
      io_out_bits_mret_invInputs[13],
      io_out_bits_mret_invInputs[14],
      io_out_bits_mret_invInputs[15],
      io_out_bits_mret_invInputs[16],
      io_out_bits_mret_invInputs[17],
      io_out_bits_mret_invInputs[18],
      io_in_bits_inst[21],
      io_out_bits_mret_invInputs[20],
      io_out_bits_mret_invInputs[21],
      io_out_bits_mret_invInputs[22],
      io_out_bits_mret_invInputs[23],
      io_out_bits_mret_invInputs[24],
      io_out_bits_mret_invInputs[25],
      io_in_bits_inst[28],
      io_in_bits_inst[29],
      io_out_bits_mret_invInputs[28],
      io_out_bits_mret_invInputs[29]};	// @[src/main/IDU.scala:33:7, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}]
  assign io_out_bits_ecall =
    &{io_in_bits_inst[0],
      io_in_bits_inst[1],
      io_out_bits_ecall_invInputs[0],
      io_out_bits_ecall_invInputs[1],
      io_in_bits_inst[4],
      io_in_bits_inst[5],
      io_in_bits_inst[6],
      io_out_bits_ecall_invInputs[5],
      io_out_bits_ecall_invInputs[6],
      io_out_bits_ecall_invInputs[7],
      io_out_bits_ecall_invInputs[8],
      io_out_bits_ecall_invInputs[9],
      io_out_bits_ecall_invInputs[10],
      io_out_bits_ecall_invInputs[11],
      io_out_bits_ecall_invInputs[12],
      io_out_bits_ecall_invInputs[13],
      io_out_bits_ecall_invInputs[14],
      io_out_bits_ecall_invInputs[15],
      io_out_bits_ecall_invInputs[16],
      io_out_bits_ecall_invInputs[17],
      io_out_bits_ecall_invInputs[18],
      io_out_bits_ecall_invInputs[19],
      io_out_bits_ecall_invInputs[20],
      io_out_bits_ecall_invInputs[21],
      io_out_bits_ecall_invInputs[22],
      io_out_bits_ecall_invInputs[23],
      io_out_bits_ecall_invInputs[24],
      io_out_bits_ecall_invInputs[25],
      io_out_bits_ecall_invInputs[26],
      io_out_bits_ecall_invInputs[27],
      io_out_bits_ecall_invInputs[28],
      io_out_bits_ecall_invInputs[29]};	// @[src/main/IDU.scala:33:7, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}]
  assign io_out_bits_Recsr =
    &{io_in_bits_inst[0],
      io_in_bits_inst[1],
      io_out_bits_Recsr_invInputs[0],
      io_out_bits_Recsr_invInputs[1],
      io_in_bits_inst[4],
      io_in_bits_inst[5],
      io_in_bits_inst[6],
      io_in_bits_inst[12],
      io_in_bits_inst[13]};	// @[src/main/IDU.scala:33:7, src/main/scala/chisel3/util/pla.scala:78:21, :90:45, :91:29, :98:{53,70}]
  assign io_out_bits_halt = io_in_bits_halt;	// @[src/main/IDU.scala:33:7]
  assign io_rs1 = io_in_bits_inst[19:15];	// @[src/main/IDU.scala:33:7, :269:31]
  assign io_rs2 = io_in_bits_inst[24:20];	// @[src/main/IDU.scala:33:7, :270:31]
  assign io_csr = io_in_bits_inst[31:20];	// @[src/main/IDU.scala:33:7, :306:31]
  assign io_pc = io_in_bits_pc;	// @[src/main/IDU.scala:33:7]
  assign io_pcmux = io_out_bits_PcMux_plaOutput;	// @[src/main/IDU.scala:33:7, src/main/scala/chisel3/util/pla.scala:102:36]
  assign io_opcode = io_in_bits_inst[6:0];	// @[src/main/IDU.scala:33:7, :273:31]
  assign io_inst = io_in_bits_inst;	// @[src/main/IDU.scala:33:7]
  assign io_imm = casez_tmp;	// @[src/main/IDU.scala:33:7, :321:13]
  assign io_valid = ~isRAW;	// @[src/main/IDU.scala:33:7, :254:19, :367:31]
  assign io_ready = ~isRAW;	// @[src/main/IDU.scala:33:7, :254:19, :367:31]
  assign io_iduMemWr = &_io_out_bits_MemWr_andMatrixOutputs_T;	// @[src/main/IDU.scala:33:7, src/main/scala/chisel3/util/pla.scala:98:{53,70}]
endmodule

module ysyx_23060336_AddSub(	// @[src/main/ALU.scala:72:7]
  input         io_cin,	// @[src/main/ALU.scala:73:20]
  input  [31:0] io_ina,	// @[src/main/ALU.scala:73:20]
                io_inb,	// @[src/main/ALU.scala:73:20]
  output [31:0] io_result,	// @[src/main/ALU.scala:73:20]
  output        io_zero,	// @[src/main/ALU.scala:73:20]
                io_carry,	// @[src/main/ALU.scala:73:20]
                io_overflow	// @[src/main/ALU.scala:73:20]
);

  wire [31:0] t_no_cin = {32{io_cin}} ^ io_inb;	// @[src/main/ALU.scala:86:{26,38}]
  wire [32:0] _sum_T_1 = {1'h0, io_ina} + {1'h0, t_no_cin} + {32'h0, io_cin};	// @[src/main/ALU.scala:86:{26,38}, :87:{29,41}]
  assign io_result = _sum_T_1[31:0];	// @[src/main/ALU.scala:72:7, :87:41, :89:21]
  assign io_zero = _sum_T_1[31:0] == 32'h0;	// @[src/main/ALU.scala:72:7, :86:26, :87:41, :89:21, :92:29]
  assign io_carry = _sum_T_1[32];	// @[src/main/ALU.scala:72:7, :87:41, :90:21]
  assign io_overflow = io_ina[31] == t_no_cin[31] & _sum_T_1[31] != io_ina[31];	// @[src/main/ALU.scala:72:7, :86:38, :87:41, :91:{25,31,43,49,61,67}]
endmodule

module ysyx_23060336_SHIFT(	// @[src/main/SHIFT.scala:6:7]
  input  [31:0] io_in,	// @[src/main/SHIFT.scala:7:20]
  input  [4:0]  io_shamt,	// @[src/main/SHIFT.scala:7:20]
  input         io_isLeft,	// @[src/main/SHIFT.scala:7:20]
                io_izArith,	// @[src/main/SHIFT.scala:7:20]
  output [31:0] io_out	// @[src/main/SHIFT.scala:7:20]
);

  wire       leftIn = io_izArith & io_in[31];	// @[src/main/SHIFT.scala:14:{25,43}]
  wire [1:0] io_out_sel = {io_isLeft, io_shamt[4]};	// @[src/main/SHIFT.scala:19:{30,50}]
  wire [1:0] io_out_sel_1 = {io_isLeft, io_shamt[3]};	// @[src/main/SHIFT.scala:19:{30,50}]
  reg        casez_tmp;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp = io_in[0];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp = io_in[16];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp = io_in[0];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_0;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_0 = io_in[8];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_0 = io_in[24];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_0 = io_in[8];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_0 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_1;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_1 = io_in[1];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_1 = io_in[17];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_1 = io_in[1];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_1 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_2;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_2 = io_in[9];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_2 = io_in[25];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_2 = io_in[9];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_2 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_3;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_3 = io_in[2];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_3 = io_in[18];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_3 = io_in[2];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_3 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_4;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_4 = io_in[10];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_4 = io_in[26];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_4 = io_in[10];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_4 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_5;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_5 = io_in[3];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_5 = io_in[19];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_5 = io_in[3];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_5 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_6;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_6 = io_in[11];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_6 = io_in[27];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_6 = io_in[11];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_6 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_7;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_7 = io_in[4];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_7 = io_in[20];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_7 = io_in[4];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_7 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_8;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_8 = io_in[12];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_8 = io_in[28];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_8 = io_in[12];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_8 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_9;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_9 = io_in[5];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_9 = io_in[21];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_9 = io_in[5];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_9 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_10;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_10 = io_in[13];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_10 = io_in[29];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_10 = io_in[13];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_10 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_11;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_11 = io_in[6];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_11 = io_in[22];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_11 = io_in[6];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_11 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_12;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_12 = io_in[14];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_12 = io_in[30];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_12 = io_in[14];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_12 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_13;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_13 = io_in[7];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_13 = io_in[23];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b10:
        casez_tmp_13 = io_in[7];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_13 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_14;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_14 = io_in[15];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_14 = io_in[31];	// @[src/main/SHIFT.scala:14:43, :21:32]
      2'b10:
        casez_tmp_14 = io_in[15];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_14 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_15;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_15 = io_in[16];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_15 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_15 = io_in[16];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_15 = io_in[0];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_16;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_16 = io_in[17];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_16 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_16 = io_in[17];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_16 = io_in[1];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_17;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_17 = io_in[18];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_17 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_17 = io_in[18];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_17 = io_in[2];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_18;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_18 = io_in[19];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_18 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_18 = io_in[19];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_18 = io_in[3];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_19;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_19 = io_in[20];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_19 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_19 = io_in[20];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_19 = io_in[4];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_20;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_20 = io_in[21];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_20 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_20 = io_in[21];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_20 = io_in[5];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_21;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_21 = io_in[22];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_21 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_21 = io_in[22];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_21 = io_in[6];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_22;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_22 = io_in[23];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_22 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_22 = io_in[23];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_22 = io_in[7];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_23;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_23 = io_in[24];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_23 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_23 = io_in[24];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_23 = io_in[8];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_24;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_24 = io_in[25];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_24 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_24 = io_in[25];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_24 = io_in[9];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_25;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_25 = io_in[26];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_25 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_25 = io_in[26];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_25 = io_in[10];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_26;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_26 = io_in[27];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_26 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_26 = io_in[27];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_26 = io_in[11];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_27;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_27 = io_in[28];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_27 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_27 = io_in[28];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_27 = io_in[12];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_28;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_28 = io_in[29];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_28 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_28 = io_in[29];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_28 = io_in[13];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_29;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_29 = io_in[30];	// @[src/main/SHIFT.scala:21:32, :26:41]
      2'b01:
        casez_tmp_29 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_29 = io_in[30];	// @[src/main/SHIFT.scala:21:32, :26:41]
      default:
        casez_tmp_29 = io_in[14];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_30;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_30 = io_in[31];	// @[src/main/SHIFT.scala:14:43, :21:32]
      2'b01:
        casez_tmp_30 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_30 = io_in[31];	// @[src/main/SHIFT.scala:14:43, :21:32]
      default:
        casez_tmp_30 = io_in[15];	// @[src/main/SHIFT.scala:21:32, :26:41]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  wire [1:0] io_out_sel_2 = {io_isLeft, io_shamt[2]};	// @[src/main/SHIFT.scala:19:{30,50}]
  reg        casez_tmp_31;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_31 = casez_tmp;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_31 = casez_tmp_0;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_31 = casez_tmp;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_31 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_32;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_32 = casez_tmp_7;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_32 = casez_tmp_8;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_32 = casez_tmp_7;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_32 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_33;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_33 = casez_tmp_1;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_33 = casez_tmp_2;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_33 = casez_tmp_1;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_33 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_34;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_34 = casez_tmp_9;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_34 = casez_tmp_10;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_34 = casez_tmp_9;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_34 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_35;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_35 = casez_tmp_3;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_35 = casez_tmp_4;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_35 = casez_tmp_3;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_35 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_36;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_36 = casez_tmp_11;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_36 = casez_tmp_12;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_36 = casez_tmp_11;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_36 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_37;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_37 = casez_tmp_5;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_37 = casez_tmp_6;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_37 = casez_tmp_5;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_37 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_38;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_38 = casez_tmp_13;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_38 = casez_tmp_14;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_38 = casez_tmp_13;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_38 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_39;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_39 = casez_tmp_0;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_39 = casez_tmp_15;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_39 = casez_tmp_0;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_39 = casez_tmp;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_40;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_40 = casez_tmp_2;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_40 = casez_tmp_16;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_40 = casez_tmp_2;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_40 = casez_tmp_1;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_41;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_41 = casez_tmp_4;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_41 = casez_tmp_17;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_41 = casez_tmp_4;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_41 = casez_tmp_3;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_42;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_42 = casez_tmp_6;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_42 = casez_tmp_18;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_42 = casez_tmp_6;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_42 = casez_tmp_5;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_43;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_43 = casez_tmp_8;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_43 = casez_tmp_19;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_43 = casez_tmp_8;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_43 = casez_tmp_7;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_44;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_44 = casez_tmp_10;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_44 = casez_tmp_20;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_44 = casez_tmp_10;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_44 = casez_tmp_9;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_45;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_45 = casez_tmp_12;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_45 = casez_tmp_21;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_45 = casez_tmp_12;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_45 = casez_tmp_11;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_46;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_46 = casez_tmp_14;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_46 = casez_tmp_22;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_46 = casez_tmp_14;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_46 = casez_tmp_13;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_47;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_47 = casez_tmp_15;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_47 = casez_tmp_23;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_47 = casez_tmp_15;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_47 = casez_tmp_0;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_48;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_48 = casez_tmp_16;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_48 = casez_tmp_24;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_48 = casez_tmp_16;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_48 = casez_tmp_2;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_49;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_49 = casez_tmp_17;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_49 = casez_tmp_25;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_49 = casez_tmp_17;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_49 = casez_tmp_4;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_50;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_50 = casez_tmp_18;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_50 = casez_tmp_26;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_50 = casez_tmp_18;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_50 = casez_tmp_6;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_51;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_51 = casez_tmp_19;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_51 = casez_tmp_27;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_51 = casez_tmp_19;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_51 = casez_tmp_8;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_52;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_52 = casez_tmp_20;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_52 = casez_tmp_28;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_52 = casez_tmp_20;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_52 = casez_tmp_10;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_53;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_53 = casez_tmp_21;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_53 = casez_tmp_29;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_53 = casez_tmp_21;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_53 = casez_tmp_12;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_54;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_54 = casez_tmp_22;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_54 = casez_tmp_30;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_54 = casez_tmp_22;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_54 = casez_tmp_14;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_55;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_55 = casez_tmp_23;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_55 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_55 = casez_tmp_23;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_55 = casez_tmp_15;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_56;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_56 = casez_tmp_24;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_56 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_56 = casez_tmp_24;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_56 = casez_tmp_16;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_57;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_57 = casez_tmp_25;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_57 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_57 = casez_tmp_25;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_57 = casez_tmp_17;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_58;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_58 = casez_tmp_26;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_58 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_58 = casez_tmp_26;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_58 = casez_tmp_18;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_59;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_59 = casez_tmp_27;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_59 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_59 = casez_tmp_27;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_59 = casez_tmp_19;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_60;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_60 = casez_tmp_28;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_60 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_60 = casez_tmp_28;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_60 = casez_tmp_20;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_61;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_61 = casez_tmp_29;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_61 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_61 = casez_tmp_29;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_61 = casez_tmp_21;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_62;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_1)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_62 = casez_tmp_30;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_62 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_62 = casez_tmp_30;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_62 = casez_tmp_22;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  wire [1:0] io_out_sel_3 = {io_isLeft, io_shamt[1]};	// @[src/main/SHIFT.scala:19:{30,50}]
  reg        casez_tmp_63;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_63 = casez_tmp_31;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_63 = casez_tmp_32;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_63 = casez_tmp_31;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_63 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_64;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_64 = casez_tmp_35;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_64 = casez_tmp_36;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_64 = casez_tmp_35;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_64 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_65;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_65 = casez_tmp_33;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_65 = casez_tmp_34;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_65 = casez_tmp_33;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_65 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_66;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_66 = casez_tmp_37;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_66 = casez_tmp_38;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_66 = casez_tmp_37;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_66 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_67;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_67 = casez_tmp_32;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_67 = casez_tmp_39;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_67 = casez_tmp_32;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_67 = casez_tmp_31;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_68;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_68 = casez_tmp_34;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_68 = casez_tmp_40;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_68 = casez_tmp_34;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_68 = casez_tmp_33;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_69;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_69 = casez_tmp_36;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_69 = casez_tmp_41;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_69 = casez_tmp_36;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_69 = casez_tmp_35;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_70;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_70 = casez_tmp_38;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_70 = casez_tmp_42;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_70 = casez_tmp_38;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_70 = casez_tmp_37;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_71;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_71 = casez_tmp_39;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_71 = casez_tmp_43;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_71 = casez_tmp_39;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_71 = casez_tmp_32;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_72;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_72 = casez_tmp_40;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_72 = casez_tmp_44;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_72 = casez_tmp_40;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_72 = casez_tmp_34;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_73;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_73 = casez_tmp_41;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_73 = casez_tmp_45;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_73 = casez_tmp_41;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_73 = casez_tmp_36;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_74;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_74 = casez_tmp_42;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_74 = casez_tmp_46;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_74 = casez_tmp_42;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_74 = casez_tmp_38;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_75;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_75 = casez_tmp_43;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_75 = casez_tmp_47;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_75 = casez_tmp_43;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_75 = casez_tmp_39;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_76;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_76 = casez_tmp_44;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_76 = casez_tmp_48;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_76 = casez_tmp_44;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_76 = casez_tmp_40;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_77;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_77 = casez_tmp_45;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_77 = casez_tmp_49;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_77 = casez_tmp_45;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_77 = casez_tmp_41;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_78;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_78 = casez_tmp_46;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_78 = casez_tmp_50;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_78 = casez_tmp_46;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_78 = casez_tmp_42;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_79;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_79 = casez_tmp_47;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_79 = casez_tmp_51;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_79 = casez_tmp_47;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_79 = casez_tmp_43;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_80;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_80 = casez_tmp_48;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_80 = casez_tmp_52;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_80 = casez_tmp_48;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_80 = casez_tmp_44;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_81;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_81 = casez_tmp_49;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_81 = casez_tmp_53;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_81 = casez_tmp_49;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_81 = casez_tmp_45;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_82;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_82 = casez_tmp_50;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_82 = casez_tmp_54;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_82 = casez_tmp_50;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_82 = casez_tmp_46;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_83;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_83 = casez_tmp_51;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_83 = casez_tmp_55;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_83 = casez_tmp_51;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_83 = casez_tmp_47;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_84;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_84 = casez_tmp_52;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_84 = casez_tmp_56;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_84 = casez_tmp_52;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_84 = casez_tmp_48;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_85;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_85 = casez_tmp_53;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_85 = casez_tmp_57;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_85 = casez_tmp_53;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_85 = casez_tmp_49;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_86;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_86 = casez_tmp_54;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_86 = casez_tmp_58;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_86 = casez_tmp_54;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_86 = casez_tmp_50;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_87;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_87 = casez_tmp_55;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_87 = casez_tmp_59;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_87 = casez_tmp_55;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_87 = casez_tmp_51;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_88;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_88 = casez_tmp_56;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_88 = casez_tmp_60;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_88 = casez_tmp_56;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_88 = casez_tmp_52;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_89;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_89 = casez_tmp_57;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_89 = casez_tmp_61;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_89 = casez_tmp_57;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_89 = casez_tmp_53;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_90;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_90 = casez_tmp_58;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_90 = casez_tmp_62;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_90 = casez_tmp_58;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_90 = casez_tmp_54;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_91;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_91 = casez_tmp_59;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_91 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_91 = casez_tmp_59;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_91 = casez_tmp_55;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_92;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_92 = casez_tmp_60;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_92 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_92 = casez_tmp_60;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_92 = casez_tmp_56;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_93;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_93 = casez_tmp_61;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_93 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_93 = casez_tmp_61;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_93 = casez_tmp_57;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_94;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_2)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_94 = casez_tmp_62;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_94 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_94 = casez_tmp_62;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_94 = casez_tmp_58;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  wire [1:0] io_out_sel_4 = {io_isLeft, io_shamt[0]};	// @[src/main/SHIFT.scala:19:{30,50}]
  reg        casez_tmp_95;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_95 = casez_tmp_63;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_95 = casez_tmp_64;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_95 = casez_tmp_63;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_95 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_96;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_96 = casez_tmp_65;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_96 = casez_tmp_66;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_96 = casez_tmp_65;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_96 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_97;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_97 = casez_tmp_64;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_97 = casez_tmp_67;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_97 = casez_tmp_64;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_97 = casez_tmp_63;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_98;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_98 = casez_tmp_66;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_98 = casez_tmp_68;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_98 = casez_tmp_66;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_98 = casez_tmp_65;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_99;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_99 = casez_tmp_67;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_99 = casez_tmp_69;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_99 = casez_tmp_67;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_99 = casez_tmp_64;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_100;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_100 = casez_tmp_68;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_100 = casez_tmp_70;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_100 = casez_tmp_68;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_100 = casez_tmp_66;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_101;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_101 = casez_tmp_69;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_101 = casez_tmp_71;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_101 = casez_tmp_69;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_101 = casez_tmp_67;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_102;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_102 = casez_tmp_70;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_102 = casez_tmp_72;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_102 = casez_tmp_70;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_102 = casez_tmp_68;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_103;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_103 = casez_tmp_71;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_103 = casez_tmp_73;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_103 = casez_tmp_71;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_103 = casez_tmp_69;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_104;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_104 = casez_tmp_72;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_104 = casez_tmp_74;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_104 = casez_tmp_72;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_104 = casez_tmp_70;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_105;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_105 = casez_tmp_73;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_105 = casez_tmp_75;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_105 = casez_tmp_73;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_105 = casez_tmp_71;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_106;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_106 = casez_tmp_74;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_106 = casez_tmp_76;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_106 = casez_tmp_74;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_106 = casez_tmp_72;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_107;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_107 = casez_tmp_75;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_107 = casez_tmp_77;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_107 = casez_tmp_75;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_107 = casez_tmp_73;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_108;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_108 = casez_tmp_76;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_108 = casez_tmp_78;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_108 = casez_tmp_76;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_108 = casez_tmp_74;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_109;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_109 = casez_tmp_77;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_109 = casez_tmp_79;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_109 = casez_tmp_77;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_109 = casez_tmp_75;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_110;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_110 = casez_tmp_78;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_110 = casez_tmp_80;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_110 = casez_tmp_78;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_110 = casez_tmp_76;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_111;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_111 = casez_tmp_79;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_111 = casez_tmp_81;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_111 = casez_tmp_79;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_111 = casez_tmp_77;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_112;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_112 = casez_tmp_80;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_112 = casez_tmp_82;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_112 = casez_tmp_80;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_112 = casez_tmp_78;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_113;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_113 = casez_tmp_81;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_113 = casez_tmp_83;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_113 = casez_tmp_81;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_113 = casez_tmp_79;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_114;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_114 = casez_tmp_82;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_114 = casez_tmp_84;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_114 = casez_tmp_82;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_114 = casez_tmp_80;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_115;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_115 = casez_tmp_83;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_115 = casez_tmp_85;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_115 = casez_tmp_83;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_115 = casez_tmp_81;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_116;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_116 = casez_tmp_84;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_116 = casez_tmp_86;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_116 = casez_tmp_84;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_116 = casez_tmp_82;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_117;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_117 = casez_tmp_85;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_117 = casez_tmp_87;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_117 = casez_tmp_85;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_117 = casez_tmp_83;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_118;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_118 = casez_tmp_86;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_118 = casez_tmp_88;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_118 = casez_tmp_86;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_118 = casez_tmp_84;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_119;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_119 = casez_tmp_87;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_119 = casez_tmp_89;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_119 = casez_tmp_87;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_119 = casez_tmp_85;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_120;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_120 = casez_tmp_88;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_120 = casez_tmp_90;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_120 = casez_tmp_88;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_120 = casez_tmp_86;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_121;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_121 = casez_tmp_89;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_121 = casez_tmp_91;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_121 = casez_tmp_89;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_121 = casez_tmp_87;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_122;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_122 = casez_tmp_90;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_122 = casez_tmp_92;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_122 = casez_tmp_90;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_122 = casez_tmp_88;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_123;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_123 = casez_tmp_91;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_123 = casez_tmp_93;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_123 = casez_tmp_91;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_123 = casez_tmp_89;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_124;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_124 = casez_tmp_92;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_124 = casez_tmp_94;	// @[src/main/SHIFT.scala:21:32]
      2'b10:
        casez_tmp_124 = casez_tmp_92;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_124 = casez_tmp_90;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_125;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_125 = casez_tmp_93;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_125 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_125 = casez_tmp_93;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_125 = casez_tmp_91;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_126;	// @[src/main/SHIFT.scala:21:32]
  always_comb begin	// @[src/main/SHIFT.scala:21:32]
    casez (io_out_sel_3)	// @[src/main/SHIFT.scala:19:30, :21:32]
      2'b00:
        casez_tmp_126 = casez_tmp_94;	// @[src/main/SHIFT.scala:21:32]
      2'b01:
        casez_tmp_126 = leftIn;	// @[src/main/SHIFT.scala:14:25, :21:32]
      2'b10:
        casez_tmp_126 = casez_tmp_94;	// @[src/main/SHIFT.scala:21:32]
      default:
        casez_tmp_126 = casez_tmp_92;	// @[src/main/SHIFT.scala:21:32]
    endcase	// @[src/main/SHIFT.scala:19:30, :21:32]
  end // always_comb
  reg        casez_tmp_127;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_127 = casez_tmp_96;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_127 = casez_tmp_97;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_127 = casez_tmp_96;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_127 = casez_tmp_95;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_128;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_128 = casez_tmp_95;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_128 = casez_tmp_96;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_128 = casez_tmp_95;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_128 = 1'h0;	// @[src/main/SHIFT.scala:14:25, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_129;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_129 = casez_tmp_98;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_129 = casez_tmp_99;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_129 = casez_tmp_98;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_129 = casez_tmp_97;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_130;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_130 = casez_tmp_97;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_130 = casez_tmp_98;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_130 = casez_tmp_97;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_130 = casez_tmp_96;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_131;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_131 = casez_tmp_100;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_131 = casez_tmp_101;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_131 = casez_tmp_100;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_131 = casez_tmp_99;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_132;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_132 = casez_tmp_99;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_132 = casez_tmp_100;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_132 = casez_tmp_99;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_132 = casez_tmp_98;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_133;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_133 = casez_tmp_102;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_133 = casez_tmp_103;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_133 = casez_tmp_102;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_133 = casez_tmp_101;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_134;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_134 = casez_tmp_101;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_134 = casez_tmp_102;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_134 = casez_tmp_101;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_134 = casez_tmp_100;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_135;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_135 = casez_tmp_104;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_135 = casez_tmp_105;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_135 = casez_tmp_104;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_135 = casez_tmp_103;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_136;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_136 = casez_tmp_103;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_136 = casez_tmp_104;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_136 = casez_tmp_103;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_136 = casez_tmp_102;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_137;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_137 = casez_tmp_106;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_137 = casez_tmp_107;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_137 = casez_tmp_106;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_137 = casez_tmp_105;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_138;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_138 = casez_tmp_105;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_138 = casez_tmp_106;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_138 = casez_tmp_105;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_138 = casez_tmp_104;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_139;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_139 = casez_tmp_108;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_139 = casez_tmp_109;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_139 = casez_tmp_108;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_139 = casez_tmp_107;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_140;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_140 = casez_tmp_107;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_140 = casez_tmp_108;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_140 = casez_tmp_107;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_140 = casez_tmp_106;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_141;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_141 = casez_tmp_110;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_141 = casez_tmp_111;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_141 = casez_tmp_110;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_141 = casez_tmp_109;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_142;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_142 = casez_tmp_109;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_142 = casez_tmp_110;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_142 = casez_tmp_109;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_142 = casez_tmp_108;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_143;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_143 = casez_tmp_112;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_143 = casez_tmp_113;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_143 = casez_tmp_112;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_143 = casez_tmp_111;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_144;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_144 = casez_tmp_111;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_144 = casez_tmp_112;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_144 = casez_tmp_111;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_144 = casez_tmp_110;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_145;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_145 = casez_tmp_114;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_145 = casez_tmp_115;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_145 = casez_tmp_114;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_145 = casez_tmp_113;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_146;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_146 = casez_tmp_113;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_146 = casez_tmp_114;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_146 = casez_tmp_113;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_146 = casez_tmp_112;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_147;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_147 = casez_tmp_116;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_147 = casez_tmp_117;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_147 = casez_tmp_116;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_147 = casez_tmp_115;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_148;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_148 = casez_tmp_115;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_148 = casez_tmp_116;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_148 = casez_tmp_115;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_148 = casez_tmp_114;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_149;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_149 = casez_tmp_118;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_149 = casez_tmp_119;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_149 = casez_tmp_118;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_149 = casez_tmp_117;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_150;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_150 = casez_tmp_117;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_150 = casez_tmp_118;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_150 = casez_tmp_117;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_150 = casez_tmp_116;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_151;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_151 = casez_tmp_120;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_151 = casez_tmp_121;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_151 = casez_tmp_120;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_151 = casez_tmp_119;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_152;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_152 = casez_tmp_119;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_152 = casez_tmp_120;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_152 = casez_tmp_119;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_152 = casez_tmp_118;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_153;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_153 = casez_tmp_122;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_153 = casez_tmp_123;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_153 = casez_tmp_122;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_153 = casez_tmp_121;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_154;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_154 = casez_tmp_121;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_154 = casez_tmp_122;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_154 = casez_tmp_121;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_154 = casez_tmp_120;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_155;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_155 = casez_tmp_124;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_155 = casez_tmp_125;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_155 = casez_tmp_124;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_155 = casez_tmp_123;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_156;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_156 = casez_tmp_123;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_156 = casez_tmp_124;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_156 = casez_tmp_123;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_156 = casez_tmp_122;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_157;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_157 = casez_tmp_126;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_157 = leftIn;	// @[src/main/SHIFT.scala:14:25, :26:22]
      2'b10:
        casez_tmp_157 = casez_tmp_126;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_157 = casez_tmp_125;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  reg        casez_tmp_158;	// @[src/main/SHIFT.scala:26:22]
  always_comb begin	// @[src/main/SHIFT.scala:26:22]
    casez (io_out_sel_4)	// @[src/main/SHIFT.scala:19:30, :26:22]
      2'b00:
        casez_tmp_158 = casez_tmp_125;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b01:
        casez_tmp_158 = casez_tmp_126;	// @[src/main/SHIFT.scala:21:32, :26:22]
      2'b10:
        casez_tmp_158 = casez_tmp_125;	// @[src/main/SHIFT.scala:21:32, :26:22]
      default:
        casez_tmp_158 = casez_tmp_124;	// @[src/main/SHIFT.scala:21:32, :26:22]
    endcase	// @[src/main/SHIFT.scala:19:30, :26:22]
  end // always_comb
  assign io_out =
    {casez_tmp_157,
     casez_tmp_158,
     casez_tmp_155,
     casez_tmp_156,
     casez_tmp_153,
     casez_tmp_154,
     casez_tmp_151,
     casez_tmp_152,
     casez_tmp_149,
     casez_tmp_150,
     casez_tmp_147,
     casez_tmp_148,
     casez_tmp_145,
     casez_tmp_146,
     casez_tmp_143,
     casez_tmp_144,
     casez_tmp_141,
     casez_tmp_142,
     casez_tmp_139,
     casez_tmp_140,
     casez_tmp_137,
     casez_tmp_138,
     casez_tmp_135,
     casez_tmp_136,
     casez_tmp_133,
     casez_tmp_134,
     casez_tmp_131,
     casez_tmp_132,
     casez_tmp_129,
     casez_tmp_130,
     casez_tmp_127,
     casez_tmp_128};	// @[src/main/SHIFT.scala:6:7, :26:22]
endmodule

module ysyx_23060336_ALU(	// @[src/main/ALU.scala:6:7]
  input  [3:0]  io_sel,	// @[src/main/ALU.scala:7:20]
  input  [31:0] io_ina,	// @[src/main/ALU.scala:7:20]
                io_inb,	// @[src/main/ALU.scala:7:20]
  output [31:0] io_result	// @[src/main/ALU.scala:7:20]
);

  wire [31:0] _shift_io_out;	// @[src/main/ALU.scala:43:27]
  wire [31:0] _addsub_io_result;	// @[src/main/ALU.scala:32:28]
  wire        _addsub_io_zero;	// @[src/main/ALU.scala:32:28]
  wire        _addsub_io_carry;	// @[src/main/ALU.scala:32:28]
  wire        _addsub_io_overflow;	// @[src/main/ALU.scala:32:28]
  wire        cin = io_sel[0] | io_sel[3];	// @[src/main/ALU.scala:17:{41,45,53}]
  wire        _out13_T_1 = cin ^ _addsub_io_carry;	// @[src/main/ALU.scala:17:45, :32:28, :40:50]
  ysyx_23060336_AddSub addsub (	// @[src/main/ALU.scala:32:28]
    .io_cin      (cin),	// @[src/main/ALU.scala:17:45]
    .io_ina      (io_ina),
    .io_inb      (io_inb),
    .io_result   (_addsub_io_result),
    .io_zero     (_addsub_io_zero),
    .io_carry    (_addsub_io_carry),
    .io_overflow (_addsub_io_overflow)
  );
  ysyx_23060336_SHIFT shift (	// @[src/main/ALU.scala:43:27]
    .io_in      (io_ina),
    .io_shamt   (io_inb[4:0]),	// @[src/main/ALU.scala:45:20]
    .io_isLeft  (io_sel[0]),	// @[src/main/ALU.scala:17:41]
    .io_izArith (io_sel[1]),	// @[src/main/ALU.scala:47:29]
    .io_out     (_shift_io_out)
  );
  assign io_result =
    io_sel == 4'h0 | io_sel == 4'h1
      ? _addsub_io_result
      : io_sel == 4'h2
          ? ~io_ina
          : io_sel == 4'h3
              ? io_ina & io_inb
              : io_sel == 4'h4
                  ? io_ina | io_inb
                  : io_sel == 4'h5
                      ? io_ina ^ io_inb
                      : io_sel == 4'h6 | io_sel == 4'h7 | io_sel == 4'h8
                          ? _shift_io_out
                          : {31'h0,
                             io_sel == 4'h9
                               ? _addsub_io_result[31] ^ _addsub_io_overflow
                               : io_sel == 4'hA
                                   ? _out13_T_1
                                   : io_sel == 4'hB
                                       ? _addsub_io_result[31] ^ ~_addsub_io_overflow
                                         | _addsub_io_zero
                                       : io_sel == 4'hC
                                           ? ~_out13_T_1
                                           : _addsub_io_zero ^ io_sel != 4'hD};	// @[src/main/ALU.scala:6:7, :20:21, :21:28, :22:28, :23:28, :32:28, :40:{34,50}, :41:46, :43:27, :50:{54,60}, :51:{38,74}, :55:{25,33}, :56:{61,69}, :57:{61,69}, :58:{61,69}, :59:{61,69}, :60:{61,69}, :61:{19,27}, :62:{61,69}, :63:{19,27}, :64:{61,69}, :65:{19,27}, :66:{19,27}, :67:{19,27}, :68:{61,69}]
endmodule

module ysyx_23060336_EXU(	// @[src/main/EXU.scala:21:7]
  input  [4:0]  io_in_bits_rd,	// @[src/main/EXU.scala:22:14]
  input  [31:0] io_in_bits_pc,	// @[src/main/EXU.scala:22:14]
                io_in_bits_imm,	// @[src/main/EXU.scala:22:14]
                io_in_bits_zimm,	// @[src/main/EXU.scala:22:14]
                io_in_bits_src1,	// @[src/main/EXU.scala:22:14]
                io_in_bits_src2,	// @[src/main/EXU.scala:22:14]
  input  [11:0] io_in_bits_csr,	// @[src/main/EXU.scala:22:14]
  input  [31:0] io_in_bits_Csr,	// @[src/main/EXU.scala:22:14]
  input  [1:0]  io_in_bits_PcMux,	// @[src/main/EXU.scala:22:14]
  input  [3:0]  io_in_bits_AluMux,	// @[src/main/EXU.scala:22:14]
                io_in_bits_AluSel,	// @[src/main/EXU.scala:22:14]
  input  [2:0]  io_in_bits_MemNum,	// @[src/main/EXU.scala:22:14]
                io_in_bits_RegNum,	// @[src/main/EXU.scala:22:14]
  input         io_in_bits_CsrWr,	// @[src/main/EXU.scala:22:14]
                io_in_bits_MemWr,	// @[src/main/EXU.scala:22:14]
                io_in_bits_RegWr,	// @[src/main/EXU.scala:22:14]
                io_in_bits_MemtoReg,	// @[src/main/EXU.scala:22:14]
                io_in_bits_Branch,	// @[src/main/EXU.scala:22:14]
                io_in_bits_mret,	// @[src/main/EXU.scala:22:14]
                io_in_bits_ecall,	// @[src/main/EXU.scala:22:14]
                io_in_bits_Recsr,	// @[src/main/EXU.scala:22:14]
                io_in_bits_halt,	// @[src/main/EXU.scala:22:14]
  output [31:0] io_out_bits_result,	// @[src/main/EXU.scala:22:14]
                io_out_bits_src2,	// @[src/main/EXU.scala:22:14]
                io_out_bits_Csr,	// @[src/main/EXU.scala:22:14]
  output [11:0] io_out_bits_csr,	// @[src/main/EXU.scala:22:14]
  output [2:0]  io_out_bits_MemNum,	// @[src/main/EXU.scala:22:14]
                io_out_bits_RegNum,	// @[src/main/EXU.scala:22:14]
  output [4:0]  io_out_bits_rd,	// @[src/main/EXU.scala:22:14]
  output        io_out_bits_MemtoReg,	// @[src/main/EXU.scala:22:14]
                io_out_bits_MemWr,	// @[src/main/EXU.scala:22:14]
                io_out_bits_RegWr,	// @[src/main/EXU.scala:22:14]
                io_out_bits_CsrWr,	// @[src/main/EXU.scala:22:14]
                io_out_bits_halt,	// @[src/main/EXU.scala:22:14]
  input  [31:0] io_mepc,	// @[src/main/EXU.scala:22:14]
                io_mtvec,	// @[src/main/EXU.scala:22:14]
  output [1:0]  io_ecall,	// @[src/main/EXU.scala:22:14]
                io_pcmux,	// @[src/main/EXU.scala:22:14]
  output [3:0]  io_alumux,	// @[src/main/EXU.scala:22:14]
  output [4:0]  io_rd,	// @[src/main/EXU.scala:22:14]
  output [31:0] io_pcadd,	// @[src/main/EXU.scala:22:14]
                io_ina,	// @[src/main/EXU.scala:22:14]
                io_inb,	// @[src/main/EXU.scala:22:14]
                io_pca,	// @[src/main/EXU.scala:22:14]
                io_pcb,	// @[src/main/EXU.scala:22:14]
                io_pc,	// @[src/main/EXU.scala:22:14]
                io_dnpc,	// @[src/main/EXU.scala:22:14]
                io_mepc_in,	// @[src/main/EXU.scala:22:14]
  output        io_exuMemWr	// @[src/main/EXU.scala:22:14]
);

  wire [31:0] _alu_io_result;	// @[src/main/EXU.scala:103:19]
  wire [31:0] _GEN = {32{io_in_bits_Recsr}};	// @[src/main/EXU.scala:70:14]
  wire        _inb_T = io_in_bits_AluMux == 4'h7;	// @[src/main/EXU.scala:73:32]
  wire        _inb_T_1 = io_in_bits_AluMux == 4'h1;	// @[src/main/EXU.scala:74:39]
  wire        _inb_T_2 = io_in_bits_AluMux == 4'h2;	// @[src/main/EXU.scala:75:39]
  wire        _inb_T_3 = io_in_bits_AluMux == 4'h3;	// @[src/main/EXU.scala:76:39]
  wire        _inb_T_6 = io_in_bits_AluMux == 4'h4;	// @[src/main/EXU.scala:77:39]
  wire        _inb_T_4 = io_in_bits_AluMux == 4'h5;	// @[src/main/EXU.scala:78:39]
  wire        _inb_T_5 = io_in_bits_AluMux == 4'h6;	// @[src/main/EXU.scala:81:39]
  wire [31:0] ina =
    _inb_T | _inb_T_1
      ? io_in_bits_src1
      : _inb_T_2
          ? io_in_bits_pc
          : _inb_T_3
              ? 32'h0
              : _inb_T_6
                  ? io_in_bits_pc
                  : _inb_T_4 | io_in_bits_AluMux == 4'h8
                      ? _GEN ^ io_in_bits_src1
                      : io_in_bits_AluMux == 4'h9 | _inb_T_5
                          ? _GEN ^ io_in_bits_zimm
                          : 32'h0;	// @[src/main/EXU.scala:70:14, :71:14, :73:{13,32}, :74:{20,39}, :75:{20,39}, :76:{20,39}, :77:{20,39}, :78:{20,39}, :79:{20,39}, :80:{20,39}, :81:{20,39}]
  wire [31:0] inb =
    _inb_T
      ? io_in_bits_src2
      : _inb_T_1
          ? io_in_bits_imm
          : _inb_T_2
              ? 32'h4
              : _inb_T_3
                  ? io_in_bits_imm
                  : _inb_T_4 | _inb_T_5
                      ? io_in_bits_Csr
                      : _inb_T_6 ? io_in_bits_imm : 32'h0;	// @[src/main/EXU.scala:73:32, :74:39, :75:39, :76:39, :77:39, :78:39, :81:{20,39}, :83:13, :84:20, :85:20, :86:20, :87:20, :88:20, :89:20]
  wire [3:0]  PCMux = {io_in_bits_Branch, _alu_io_result[0], io_in_bits_PcMux};	// @[src/main/EXU.scala:103:19, :109:{15,53}]
  wire        _pcb_T = PCMux == 4'h2;	// @[src/main/EXU.scala:75:39, :109:15, :111:22]
  wire        _pcb_T_1 = PCMux == 4'h6;	// @[src/main/EXU.scala:81:39, :109:15, :112:22]
  wire [31:0] pca = _pcb_T | _pcb_T_1 ? io_in_bits_src1 : io_in_bits_pc;	// @[src/main/EXU.scala:111:{15,22}, :112:{15,22}]
  wire [31:0] pcb =
    _pcb_T | _pcb_T_1 | PCMux == 4'h1 | PCMux == 4'h5 | PCMux == 4'hD
      ? io_in_bits_imm
      : 32'h4;	// @[src/main/EXU.scala:74:39, :78:39, :85:20, :109:15, :111:22, :112:22, :114:15, :115:15, :116:{15,22}, :117:{15,22}, :118:{15,22}]
  wire [31:0] _pcadd_T = pca + pcb;	// @[src/main/EXU.scala:111:15, :112:15, :114:15, :115:15, :116:15, :117:15, :118:15, :120:20]
  ysyx_23060336_ALU alu (	// @[src/main/EXU.scala:103:19]
    .io_sel    (io_in_bits_AluSel),
    .io_ina    (ina),	// @[src/main/EXU.scala:73:13, :74:20]
    .io_inb    (inb),	// @[src/main/EXU.scala:83:13]
    .io_result (_alu_io_result)
  );
  assign io_out_bits_result = _alu_io_result;	// @[src/main/EXU.scala:21:7, :103:19]
  assign io_out_bits_src2 = io_in_bits_src2;	// @[src/main/EXU.scala:21:7]
  assign io_out_bits_Csr = io_in_bits_Csr;	// @[src/main/EXU.scala:21:7]
  assign io_out_bits_csr = io_in_bits_csr;	// @[src/main/EXU.scala:21:7]
  assign io_out_bits_MemNum = io_in_bits_MemNum;	// @[src/main/EXU.scala:21:7]
  assign io_out_bits_RegNum = io_in_bits_RegNum;	// @[src/main/EXU.scala:21:7]
  assign io_out_bits_rd = io_in_bits_rd;	// @[src/main/EXU.scala:21:7]
  assign io_out_bits_MemtoReg = io_in_bits_MemtoReg;	// @[src/main/EXU.scala:21:7]
  assign io_out_bits_MemWr = io_in_bits_MemWr;	// @[src/main/EXU.scala:21:7]
  assign io_out_bits_RegWr = io_in_bits_RegWr;	// @[src/main/EXU.scala:21:7]
  assign io_out_bits_CsrWr = io_in_bits_CsrWr;	// @[src/main/EXU.scala:21:7]
  assign io_out_bits_halt = io_in_bits_halt;	// @[src/main/EXU.scala:21:7]
  assign io_ecall = {1'h0, io_in_bits_ecall};	// @[src/main/EXU.scala:21:7, :73:32, :132:15]
  assign io_pcmux = io_in_bits_PcMux;	// @[src/main/EXU.scala:21:7]
  assign io_alumux = io_in_bits_AluMux;	// @[src/main/EXU.scala:21:7]
  assign io_rd = io_in_bits_rd;	// @[src/main/EXU.scala:21:7]
  assign io_pcadd = _pcadd_T;	// @[src/main/EXU.scala:21:7, :120:20]
  assign io_ina = ina;	// @[src/main/EXU.scala:21:7, :73:13, :74:20]
  assign io_inb = inb;	// @[src/main/EXU.scala:21:7, :83:13]
  assign io_pca = pca;	// @[src/main/EXU.scala:21:7, :111:15, :112:15]
  assign io_pcb = pcb;	// @[src/main/EXU.scala:21:7, :114:15, :115:15, :116:15, :117:15, :118:15]
  assign io_pc = io_in_bits_pc;	// @[src/main/EXU.scala:21:7]
  assign io_dnpc =
    io_in_bits_halt
      ? io_in_bits_pc
      : io_in_bits_ecall ? io_mtvec : io_in_bits_mret ? io_mepc : _pcadd_T;	// @[src/main/EXU.scala:21:7, :120:20, :136:17, :137:17, :138:17]
  assign io_mepc_in = io_in_bits_pc;	// @[src/main/EXU.scala:21:7]
  assign io_exuMemWr = io_in_bits_MemWr;	// @[src/main/EXU.scala:21:7]
endmodule

module ysyx_23060336_LSU(	// @[src/main/LSU.scala:17:7]
  output        io_out_valid,	// @[src/main/LSU.scala:18:14]
  output [31:0] io_out_bits_DataOut,	// @[src/main/LSU.scala:18:14]
                io_out_bits_result,	// @[src/main/LSU.scala:18:14]
  output [11:0] io_out_bits_csr,	// @[src/main/LSU.scala:18:14]
  output [31:0] io_out_bits_Csr,	// @[src/main/LSU.scala:18:14]
  output [4:0]  io_out_bits_rd,	// @[src/main/LSU.scala:18:14]
  output [2:0]  io_out_bits_RegNum,	// @[src/main/LSU.scala:18:14]
  output        io_out_bits_CsrWr,	// @[src/main/LSU.scala:18:14]
                io_out_bits_RegWr,	// @[src/main/LSU.scala:18:14]
                io_in_ready,	// @[src/main/LSU.scala:18:14]
  input  [31:0] io_in_bits_result,	// @[src/main/LSU.scala:18:14]
                io_in_bits_src2,	// @[src/main/LSU.scala:18:14]
                io_in_bits_Csr,	// @[src/main/LSU.scala:18:14]
  input  [11:0] io_in_bits_csr,	// @[src/main/LSU.scala:18:14]
  input  [2:0]  io_in_bits_MemNum,	// @[src/main/LSU.scala:18:14]
                io_in_bits_RegNum,	// @[src/main/LSU.scala:18:14]
  input  [4:0]  io_in_bits_rd,	// @[src/main/LSU.scala:18:14]
  input         io_in_bits_MemtoReg,	// @[src/main/LSU.scala:18:14]
                io_in_bits_MemWr,	// @[src/main/LSU.scala:18:14]
                io_in_bits_RegWr,	// @[src/main/LSU.scala:18:14]
                io_in_bits_CsrWr,	// @[src/main/LSU.scala:18:14]
                io_in_bits_halt,	// @[src/main/LSU.scala:18:14]
  output        io_valid,	// @[src/main/LSU.scala:18:14]
                io_ready,	// @[src/main/LSU.scala:18:14]
                io_lsuMemWr,	// @[src/main/LSU.scala:18:14]
                io_MemtoReg,	// @[src/main/LSU.scala:18:14]
                io_wen,	// @[src/main/LSU.scala:18:14]
  output [4:0]  io_rd,	// @[src/main/LSU.scala:18:14]
  output [31:0] io_rdata,	// @[src/main/LSU.scala:18:14]
  output        io_axi_awvalid,	// @[src/main/LSU.scala:18:14]
  output [31:0] io_axi_awaddr,	// @[src/main/LSU.scala:18:14]
  input         io_axi_wready,	// @[src/main/LSU.scala:18:14]
  output        io_axi_wvalid,	// @[src/main/LSU.scala:18:14]
  output [31:0] io_axi_wdata,	// @[src/main/LSU.scala:18:14]
  output [3:0]  io_axi_wstrb,	// @[src/main/LSU.scala:18:14]
  output        io_axi_arvalid,	// @[src/main/LSU.scala:18:14]
  output [31:0] io_axi_araddr,	// @[src/main/LSU.scala:18:14]
  output        io_axi_rready,	// @[src/main/LSU.scala:18:14]
  input         io_axi_rvalid,	// @[src/main/LSU.scala:18:14]
  input  [31:0] io_axi_rdata	// @[src/main/LSU.scala:18:14]
);

  wire io_axi_rready_0;	// @[src/main/LSU.scala:75:41]
  wire io_axi_wvalid_0;	// @[src/main/LSU.scala:64:38]
  wire _io_rdata_T = io_axi_rready_0 & io_axi_rvalid;	// @[src/main/LSU.scala:42:27, :75:41]
  wire delay =
    _io_rdata_T & io_in_bits_MemtoReg | io_axi_wvalid_0 & io_axi_wready
    & io_in_bits_MemWr;	// @[src/main/LSU.scala:42:{27,44,68,103}, :64:38]
  wire io_valid_0 = delay | ~io_in_bits_MemtoReg;	// @[src/main/LSU.scala:42:68, :45:{25,28}]
  wire io_ready_0 = ~io_in_bits_MemtoReg & ~io_in_bits_MemWr | delay;	// @[src/main/LSU.scala:42:68, :45:28, :46:{22,45,48}]
  assign io_axi_wvalid_0 = io_in_bits_MemWr & ~io_in_bits_halt;	// @[src/main/LSU.scala:58:41, :64:38]
  assign io_axi_rready_0 = io_in_bits_MemtoReg & ~io_in_bits_halt;	// @[src/main/LSU.scala:58:41, :75:41]
  assign io_out_valid = io_valid_0;	// @[src/main/LSU.scala:17:7, :45:25]
  assign io_out_bits_DataOut =
    delay ? (_io_rdata_T ? io_axi_rdata : 32'h0) : io_in_bits_result;	// @[src/main/LSU.scala:17:7, :42:{27,68}, :43:20, :55:29]
  assign io_out_bits_result = io_in_bits_result;	// @[src/main/LSU.scala:17:7]
  assign io_out_bits_csr = io_in_bits_csr;	// @[src/main/LSU.scala:17:7]
  assign io_out_bits_Csr = io_in_bits_Csr;	// @[src/main/LSU.scala:17:7]
  assign io_out_bits_rd = io_in_bits_rd;	// @[src/main/LSU.scala:17:7]
  assign io_out_bits_RegNum = io_in_bits_RegNum;	// @[src/main/LSU.scala:17:7]
  assign io_out_bits_CsrWr = io_in_bits_CsrWr;	// @[src/main/LSU.scala:17:7]
  assign io_out_bits_RegWr = io_in_bits_RegWr;	// @[src/main/LSU.scala:17:7]
  assign io_in_ready = io_ready_0;	// @[src/main/LSU.scala:17:7, :46:22]
  assign io_valid = io_valid_0;	// @[src/main/LSU.scala:17:7, :45:25]
  assign io_ready = io_ready_0;	// @[src/main/LSU.scala:17:7, :46:22]
  assign io_lsuMemWr = io_in_bits_MemWr;	// @[src/main/LSU.scala:17:7]
  assign io_MemtoReg = io_in_bits_MemtoReg;	// @[src/main/LSU.scala:17:7]
  assign io_wen = io_in_bits_MemtoReg | io_in_bits_MemWr;	// @[src/main/LSU.scala:17:7, :80:38]
  assign io_rd = io_in_bits_rd;	// @[src/main/LSU.scala:17:7]
  assign io_rdata = _io_rdata_T ? io_axi_rdata : 32'h0;	// @[src/main/LSU.scala:17:7, :42:27, :43:20, :81:21]
  assign io_axi_awvalid = io_in_bits_MemWr & ~io_in_bits_halt;	// @[src/main/LSU.scala:17:7, :58:{38,41}]
  assign io_axi_awaddr = io_in_bits_result;	// @[src/main/LSU.scala:17:7]
  assign io_axi_wvalid = io_axi_wvalid_0;	// @[src/main/LSU.scala:17:7, :64:38]
  assign io_axi_wdata = io_in_bits_src2;	// @[src/main/LSU.scala:17:7]
  assign io_axi_wstrb = {1'h0, io_in_bits_MemNum};	// @[src/main/LSU.scala:17:7, :66:18]
  assign io_axi_arvalid = io_in_bits_MemtoReg & ~io_in_bits_halt;	// @[src/main/LSU.scala:17:7, :58:41, :69:41]
  assign io_axi_araddr = io_in_bits_result;	// @[src/main/LSU.scala:17:7]
  assign io_axi_rready = io_axi_rready_0;	// @[src/main/LSU.scala:17:7, :75:41]
endmodule

module ysyx_23060336_WBU(	// @[src/main/WBU.scala:6:7]
  input  [31:0] io_in_bits_DataOut,	// @[src/main/WBU.scala:7:14]
                io_in_bits_result,	// @[src/main/WBU.scala:7:14]
  input  [11:0] io_in_bits_csr,	// @[src/main/WBU.scala:7:14]
  input  [31:0] io_in_bits_Csr,	// @[src/main/WBU.scala:7:14]
  input  [4:0]  io_in_bits_rd,	// @[src/main/WBU.scala:7:14]
  input  [2:0]  io_in_bits_RegNum,	// @[src/main/WBU.scala:7:14]
  input         io_in_bits_CsrWr,	// @[src/main/WBU.scala:7:14]
                io_in_bits_RegWr,	// @[src/main/WBU.scala:7:14]
                io_wen,	// @[src/main/WBU.scala:7:14]
  output        io_RegWr,	// @[src/main/WBU.scala:7:14]
                io_CsrWr,	// @[src/main/WBU.scala:7:14]
  output [4:0]  io_rd,	// @[src/main/WBU.scala:7:14]
  output [11:0] io_csr,	// @[src/main/WBU.scala:7:14]
  output [31:0] io_result,	// @[src/main/WBU.scala:7:14]
                io_DataOut	// @[src/main/WBU.scala:7:14]
);

  assign io_RegWr = io_in_bits_RegWr & io_wen;	// @[src/main/WBU.scala:6:7, :37:32]
  assign io_CsrWr = io_in_bits_CsrWr;	// @[src/main/WBU.scala:6:7]
  assign io_rd = io_in_bits_rd;	// @[src/main/WBU.scala:6:7]
  assign io_csr = io_in_bits_csr;	// @[src/main/WBU.scala:6:7]
  assign io_result = io_in_bits_result;	// @[src/main/WBU.scala:6:7]
  assign io_DataOut =
    io_in_bits_CsrWr
      ? io_in_bits_Csr
      : io_in_bits_RegNum == 3'h2 | io_in_bits_RegNum == 3'h5
          ? io_in_bits_DataOut
          : io_in_bits_RegNum == 3'h3
              ? {24'h0, io_in_bits_DataOut[7:0]}
              : io_in_bits_RegNum == 3'h4
                  ? {16'h0, io_in_bits_DataOut[15:0]}
                  : io_in_bits_RegNum == 3'h0
                      ? {{24{io_in_bits_DataOut[7]}}, io_in_bits_DataOut[7:0]}
                      : io_in_bits_RegNum == 3'h1
                          ? {{16{io_in_bits_DataOut[15]}}, io_in_bits_DataOut[15:0]}
                          : io_in_bits_DataOut;	// @[src/main/WBU.scala:6:7, :44:20, :45:{20,39}, :46:{20,39}, :47:{20,39,56,61,90}, :48:{20,39,56,61,90}, :49:{20,39,56,61,84}, :50:{20,39,56,61,84}]
endmodule

// VCS coverage exclude_file
module ysyx_23060336_regs_32x32(	// @[src/main/REG.scala:18:31]
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  output [31:0] R1_data,
  input  [4:0]  R2_addr,
  input         R2_en,
                R2_clk,
  output [31:0] R2_data,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data
);

  reg [31:0] Memory[0:31];	// @[src/main/REG.scala:18:31]
  always @(posedge W0_clk) begin	// @[src/main/REG.scala:18:31]
    if (W0_en & 1'h1)	// @[src/main/REG.scala:18:31]
      Memory[W0_addr] <= W0_data;	// @[src/main/REG.scala:18:31]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// @[src/main/REG.scala:18:31]
    reg [31:0] _RANDOM_MEM;	// @[src/main/REG.scala:18:31]
    initial begin	// @[src/main/REG.scala:18:31]
      `INIT_RANDOM_PROLOG_	// @[src/main/REG.scala:18:31]
      `ifdef RANDOMIZE_MEM_INIT	// @[src/main/REG.scala:18:31]
        for (logic [5:0] i = 6'h0; i < 6'h20; i += 6'h1) begin
          _RANDOM_MEM = `RANDOM;	// @[src/main/REG.scala:18:31]
          Memory[i[4:0]] = _RANDOM_MEM;	// @[src/main/REG.scala:18:31]
        end	// @[src/main/REG.scala:18:31]
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// @[src/main/REG.scala:18:31]
  assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;	// @[src/main/REG.scala:18:31]
  assign R2_data = R2_en ? Memory[R2_addr] : 32'bx;	// @[src/main/REG.scala:18:31]
endmodule

module ysyx_23060336_REG(	// @[src/main/REG.scala:6:7]
  input         clock,	// @[src/main/REG.scala:6:7]
  input  [4:0]  io_raddr1,	// @[src/main/REG.scala:7:14]
                io_raddr2,	// @[src/main/REG.scala:7:14]
  output [31:0] io_rdata1,	// @[src/main/REG.scala:7:14]
                io_rdata2,	// @[src/main/REG.scala:7:14]
  input         io_wen,	// @[src/main/REG.scala:7:14]
  input  [4:0]  io_waddr,	// @[src/main/REG.scala:7:14]
  input  [31:0] io_wdata,	// @[src/main/REG.scala:7:14]
  output [31:0] io_halt_ret	// @[src/main/REG.scala:7:14]
);

  wire [31:0] _ysyx_23060336_regs_ext_R0_data;	// @[src/main/REG.scala:18:31]
  wire [31:0] _ysyx_23060336_regs_ext_R1_data;	// @[src/main/REG.scala:18:31]
  ysyx_23060336_regs_32x32 ysyx_23060336_regs_ext (	// @[src/main/REG.scala:18:31]
    .R0_addr (io_raddr2),
    .R0_en   (1'h1),	// @[src/main/REG.scala:6:7]
    .R0_clk  (clock),
    .R0_data (_ysyx_23060336_regs_ext_R0_data),
    .R1_addr (io_raddr1),
    .R1_en   (1'h1),	// @[src/main/REG.scala:6:7]
    .R1_clk  (clock),
    .R1_data (_ysyx_23060336_regs_ext_R1_data),
    .R2_addr (5'hA),	// @[src/main/REG.scala:22:36]
    .R2_en   (1'h1),	// @[src/main/REG.scala:6:7]
    .R2_clk  (clock),
    .R2_data (io_halt_ret),
    .W0_addr (io_waddr),
    .W0_en   (io_wen & (|io_waddr)),	// @[src/main/REG.scala:24:{15,27}]
    .W0_clk  (clock),
    .W0_data (io_wdata)
  );
  assign io_rdata1 = (|io_raddr1) ? _ysyx_23060336_regs_ext_R1_data : 32'h0;	// @[src/main/REG.scala:6:7, :18:31, :20:{19,30}, :21:19]
  assign io_rdata2 = (|io_raddr2) ? _ysyx_23060336_regs_ext_R0_data : 32'h0;	// @[src/main/REG.scala:6:7, :18:31, :21:{19,30}]
endmodule

// VCS coverage exclude_file
module ysyx_23060336_csrs_4096x32(	// @[src/main/CSR.scala:21:31]
  input  [11:0] R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [11:0] R1_addr,
  input         R1_en,
                R1_clk,
  output [31:0] R1_data,
  input  [11:0] R2_addr,
  input         R2_en,
                R2_clk,
  output [31:0] R2_data,
  input  [11:0] R3_addr,
  input         R3_en,
                R3_clk,
  output [31:0] R3_data,
  input  [11:0] R4_addr,
  input         R4_en,
                R4_clk,
  output [31:0] R4_data,
  input  [11:0] R5_addr,
  input         R5_en,
                R5_clk,
  output [31:0] R5_data,
  input  [11:0] R6_addr,
  input         R6_en,
                R6_clk,
  output [31:0] R6_data,
  input  [11:0] W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data,
  input  [11:0] W1_addr,
  input         W1_en,
                W1_clk,
  input  [31:0] W1_data,
  input  [11:0] W2_addr,
  input         W2_en,
                W2_clk,
  input  [31:0] W2_data,
  input  [11:0] W3_addr,
  input         W3_en,
                W3_clk,
  input  [31:0] W3_data
);

  reg [31:0] Memory[0:4095];	// @[src/main/CSR.scala:21:31]
  always @(posedge W0_clk) begin	// @[src/main/CSR.scala:21:31]
    if (W0_en & 1'h1)	// @[src/main/CSR.scala:21:31]
      Memory[W0_addr] <= W0_data;	// @[src/main/CSR.scala:21:31]
    if (W1_en & 1'h1)	// @[src/main/CSR.scala:21:31]
      Memory[W1_addr] <= W1_data;	// @[src/main/CSR.scala:21:31]
    if (W2_en & 1'h1)	// @[src/main/CSR.scala:21:31]
      Memory[W2_addr] <= W2_data;	// @[src/main/CSR.scala:21:31]
    if (W3_en & 1'h1)	// @[src/main/CSR.scala:21:31]
      Memory[W3_addr] <= W3_data;	// @[src/main/CSR.scala:21:31]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// @[src/main/CSR.scala:21:31]
    reg [31:0] _RANDOM_MEM;	// @[src/main/CSR.scala:21:31]
    initial begin	// @[src/main/CSR.scala:21:31]
      `INIT_RANDOM_PROLOG_	// @[src/main/CSR.scala:21:31]
      `ifdef RANDOMIZE_MEM_INIT	// @[src/main/CSR.scala:21:31]
        for (logic [12:0] i = 13'h0; i < 13'h1000; i += 13'h1) begin
          _RANDOM_MEM = `RANDOM;	// @[src/main/CSR.scala:21:31]
          Memory[i[11:0]] = _RANDOM_MEM;	// @[src/main/CSR.scala:21:31]
        end	// @[src/main/CSR.scala:21:31]
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// @[src/main/CSR.scala:21:31]
  assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;	// @[src/main/CSR.scala:21:31]
  assign R2_data = R2_en ? Memory[R2_addr] : 32'bx;	// @[src/main/CSR.scala:21:31]
  assign R3_data = R3_en ? Memory[R3_addr] : 32'bx;	// @[src/main/CSR.scala:21:31]
  assign R4_data = R4_en ? Memory[R4_addr] : 32'bx;	// @[src/main/CSR.scala:21:31]
  assign R5_data = R5_en ? Memory[R5_addr] : 32'bx;	// @[src/main/CSR.scala:21:31]
  assign R6_data = R6_en ? Memory[R6_addr] : 32'bx;	// @[src/main/CSR.scala:21:31]
endmodule

module ysyx_23060336_CSR(	// @[src/main/CSR.scala:6:7]
  input         clock,	// @[src/main/CSR.scala:6:7]
  input  [11:0] io_raddr,	// @[src/main/CSR.scala:7:14]
  output [31:0] io_rdata,	// @[src/main/CSR.scala:7:14]
  input         io_wen,	// @[src/main/CSR.scala:7:14]
  input  [11:0] io_waddr,	// @[src/main/CSR.scala:7:14]
  input  [31:0] io_wdata,	// @[src/main/CSR.scala:7:14]
  input         io_ecall,	// @[src/main/CSR.scala:7:14]
  input  [31:0] io_mepc_in,	// @[src/main/CSR.scala:7:14]
  output [31:0] io_mepc,	// @[src/main/CSR.scala:7:14]
                io_mtvec,	// @[src/main/CSR.scala:7:14]
                io_mcause,	// @[src/main/CSR.scala:7:14]
                io_mstatus	// @[src/main/CSR.scala:7:14]
);

  wire [31:0] _ysyx_23060336_csrs_ext_R5_data;	// @[src/main/CSR.scala:21:31]
  wire [31:0] _ysyx_23060336_csrs_ext_R6_data;	// @[src/main/CSR.scala:21:31]
  ysyx_23060336_csrs_4096x32 ysyx_23060336_csrs_ext (	// @[src/main/CSR.scala:21:31]
    .R0_addr (io_raddr),
    .R0_en   (1'h1),	// @[src/main/CSR.scala:6:7]
    .R0_clk  (clock),
    .R0_data (io_rdata),
    .R1_addr (12'h305),	// @[src/main/CSR.scala:34:35]
    .R1_en   (1'h1),	// @[src/main/CSR.scala:6:7]
    .R1_clk  (clock),
    .R1_data (io_mtvec),
    .R2_addr (12'h300),	// @[src/main/CSR.scala:28:21]
    .R2_en   (1'h1),	// @[src/main/CSR.scala:6:7]
    .R2_clk  (clock),
    .R2_data (io_mstatus),
    .R3_addr (12'h341),	// @[src/main/CSR.scala:30:21]
    .R3_en   (1'h1),	// @[src/main/CSR.scala:6:7]
    .R3_clk  (clock),
    .R3_data (io_mepc),
    .R4_addr (12'h342),	// @[src/main/CSR.scala:29:21]
    .R4_en   (1'h1),	// @[src/main/CSR.scala:6:7]
    .R4_clk  (clock),
    .R4_data (io_mcause),
    .R5_addr (12'h341),	// @[src/main/CSR.scala:30:21]
    .R5_en   (1'h1),	// @[src/main/CSR.scala:6:7]
    .R5_clk  (clock),
    .R5_data (_ysyx_23060336_csrs_ext_R5_data),
    .R6_addr (12'h342),	// @[src/main/CSR.scala:29:21]
    .R6_en   (1'h1),	// @[src/main/CSR.scala:6:7]
    .R6_clk  (clock),
    .R6_data (_ysyx_23060336_csrs_ext_R6_data),
    .W0_addr (io_waddr),
    .W0_en   (io_wen),
    .W0_clk  (clock),
    .W0_data (io_wdata),
    .W1_addr (12'h341),	// @[src/main/CSR.scala:30:21]
    .W1_en   (1'h1),	// @[src/main/CSR.scala:6:7]
    .W1_clk  (clock),
    .W1_data (io_ecall ? io_mepc_in : _ysyx_23060336_csrs_ext_R5_data),	// @[src/main/CSR.scala:21:31, :30:37]
    .W2_addr (12'h342),	// @[src/main/CSR.scala:29:21]
    .W2_en   (1'h1),	// @[src/main/CSR.scala:6:7]
    .W2_clk  (clock),
    .W2_data (io_ecall ? 32'hB : _ysyx_23060336_csrs_ext_R6_data),	// @[src/main/CSR.scala:21:31, :29:37]
    .W3_addr (12'h300),	// @[src/main/CSR.scala:28:21]
    .W3_en   (1'h1),	// @[src/main/CSR.scala:6:7]
    .W3_clk  (clock),
    .W3_data (32'h1800)	// @[src/main/CSR.scala:28:31]
  );
endmodule

module ysyx_23060336_XBAR(	// @[src/main/XBAR.scala:6:7]
  input         clock,	// @[src/main/XBAR.scala:6:7]
                reset,	// @[src/main/XBAR.scala:6:7]
  output        io_ifu_wready,	// @[src/main/XBAR.scala:7:14]
  input  [31:0] io_ifu_araddr,	// @[src/main/XBAR.scala:7:14]
  input         io_ifu_rready,	// @[src/main/XBAR.scala:7:14]
  output        io_ifu_rvalid,	// @[src/main/XBAR.scala:7:14]
  output [31:0] io_ifu_rdata,	// @[src/main/XBAR.scala:7:14]
  output        io_lsu_awready,	// @[src/main/XBAR.scala:7:14]
  input         io_lsu_awvalid,	// @[src/main/XBAR.scala:7:14]
  input  [31:0] io_lsu_awaddr,	// @[src/main/XBAR.scala:7:14]
  output        io_lsu_wready,	// @[src/main/XBAR.scala:7:14]
  input         io_lsu_wvalid,	// @[src/main/XBAR.scala:7:14]
  input  [31:0] io_lsu_wdata,	// @[src/main/XBAR.scala:7:14]
  input  [3:0]  io_lsu_wstrb,	// @[src/main/XBAR.scala:7:14]
  output        io_lsu_arready,	// @[src/main/XBAR.scala:7:14]
  input         io_lsu_arvalid,	// @[src/main/XBAR.scala:7:14]
  input  [31:0] io_lsu_araddr,	// @[src/main/XBAR.scala:7:14]
  input         io_lsu_rready,	// @[src/main/XBAR.scala:7:14]
  output        io_lsu_rvalid,	// @[src/main/XBAR.scala:7:14]
  output [31:0] io_lsu_rdata,	// @[src/main/XBAR.scala:7:14]
  input         io_sdram_awready,	// @[src/main/XBAR.scala:7:14]
  output        io_sdram_awvalid,	// @[src/main/XBAR.scala:7:14]
  output [31:0] io_sdram_awaddr,	// @[src/main/XBAR.scala:7:14]
  input         io_sdram_wready,	// @[src/main/XBAR.scala:7:14]
  output        io_sdram_wvalid,	// @[src/main/XBAR.scala:7:14]
  output [31:0] io_sdram_wdata,	// @[src/main/XBAR.scala:7:14]
  output [3:0]  io_sdram_wstrb,	// @[src/main/XBAR.scala:7:14]
  output        io_sdram_bready,	// @[src/main/XBAR.scala:7:14]
  input         io_sdram_arready,	// @[src/main/XBAR.scala:7:14]
  output        io_sdram_arvalid,	// @[src/main/XBAR.scala:7:14]
  output [31:0] io_sdram_araddr,	// @[src/main/XBAR.scala:7:14]
  output [3:0]  io_sdram_arid,	// @[src/main/XBAR.scala:7:14]
  output        io_sdram_rready,	// @[src/main/XBAR.scala:7:14]
  input         io_sdram_rvalid,	// @[src/main/XBAR.scala:7:14]
  input  [31:0] io_sdram_rdata,	// @[src/main/XBAR.scala:7:14]
  output [31:0] io_clint_araddr,	// @[src/main/XBAR.scala:7:14]
  input  [31:0] io_clint_rdata	// @[src/main/XBAR.scala:7:14]
);

  wire        rvalid;	// @[src/main/XBAR.scala:204:65, :206:22, :215:72]
  reg  [31:0] arid_halt;	// @[src/main/XBAR.scala:50:26]
  reg  [31:0] awid_halt;	// @[src/main/XBAR.scala:51:26]
  wire        _GEN = arid_halt[3:0] == 4'h1;	// @[src/main/XBAR.scala:7:14, :50:26, :57:{19,25}, :76:49, :77:21, :86:50]
  wire        _GEN_0 = ~io_lsu_arvalid | _GEN;	// @[src/main/XBAR.scala:56:42, :57:{25,49}, :76:49]
  wire [31:0] araddr = _GEN_0 ? io_ifu_araddr : io_lsu_araddr;	// @[src/main/XBAR.scala:56:42, :57:49, :76:49]
  wire        _GEN_1 = arid_halt == 32'h1 & io_ifu_rready & rvalid;	// @[src/main/XBAR.scala:50:26, :112:{18,51}, :117:21, :204:65, :206:22, :215:72]
  wire        _GEN_2 = arid_halt == 32'h2 & io_lsu_rready & rvalid;	// @[src/main/XBAR.scala:50:26, :114:21, :115:{25,58}, :134:24, :141:20, :142:31, :204:65, :206:22, :215:72]
  wire        _GEN_3 = araddr[31] & araddr < 32'h81000000;	// @[src/main/XBAR.scala:56:42, :57:49, :76:49, :204:{15,34,44}]
  wire        _GEN_4 = araddr > 32'hA0000047 & araddr < 32'hA0000089;	// @[src/main/XBAR.scala:56:42, :57:49, :76:49, :215:{22,41,51}]
  assign rvalid = _GEN_3 ? io_sdram_rvalid : _GEN_4;	// @[src/main/XBAR.scala:204:{34,65}, :206:22, :215:{41,72}]
  wire [31:0] rdata = _GEN_3 | ~_GEN_4 ? io_sdram_rdata : io_clint_rdata;	// @[src/main/XBAR.scala:204:{34,65}, :208:22, :215:{41,72}]
  wire        _GEN_5 = io_lsu_awaddr[31] & io_lsu_awaddr < 32'h81000000;	// @[src/main/XBAR.scala:204:44, :252:{15,34,44}]
  wire        wready =
    (_GEN_5 | ~(io_lsu_awaddr > 32'hA0000047 & io_lsu_awaddr < 32'hA0000089))
    & io_sdram_wready;	// @[src/main/XBAR.scala:215:{22,51}, :252:{34,65}, :254:22, :264:{22,41,51,72}, :266:22, :278:22]
  always @(posedge clock) begin	// @[src/main/XBAR.scala:6:7]
    if (reset) begin	// @[src/main/XBAR.scala:6:7]
      arid_halt <= 32'h1;	// @[src/main/XBAR.scala:50:26, :117:21]
      awid_halt <= 32'h1;	// @[src/main/XBAR.scala:51:26, :117:21]
    end
    else begin	// @[src/main/XBAR.scala:6:7]
      if (_GEN_1)	// @[src/main/XBAR.scala:112:51]
        arid_halt <= 32'h2;	// @[src/main/XBAR.scala:50:26, :114:21, :134:24, :141:20, :142:31]
      else if (_GEN_2)	// @[src/main/XBAR.scala:115:58]
        arid_halt <= 32'h1;	// @[src/main/XBAR.scala:50:26, :117:21]
      awid_halt <= 32'h2;	// @[src/main/XBAR.scala:51:26, :114:21, :134:24, :141:20, :142:31]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/XBAR.scala:6:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/XBAR.scala:6:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/XBAR.scala:6:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];	// @[src/main/XBAR.scala:6:7]
    initial begin	// @[src/main/XBAR.scala:6:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/XBAR.scala:6:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/XBAR.scala:6:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/XBAR.scala:6:7]
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// @[src/main/XBAR.scala:6:7]
        end	// @[src/main/XBAR.scala:6:7]
        arid_halt = _RANDOM[1'h0];	// @[src/main/XBAR.scala:6:7, :50:26]
        awid_halt = _RANDOM[1'h1];	// @[src/main/XBAR.scala:6:7, :51:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/XBAR.scala:6:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/XBAR.scala:6:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_ifu_wready = wready;	// @[src/main/XBAR.scala:6:7, :252:65, :254:22, :264:72]
  assign io_ifu_rvalid = io_lsu_arvalid ? _GEN & rvalid : ~io_lsu_arvalid & rvalid;	// @[src/main/XBAR.scala:6:7, :56:42, :57:{25,49}, :64:21, :73:21, :76:{32,49}, :84:21, :86:50, :204:65, :206:22, :215:72]
  assign io_ifu_rdata = rdata;	// @[src/main/XBAR.scala:6:7, :204:65, :208:22, :215:72]
  assign io_lsu_awready = _GEN_5 & io_sdram_awready;	// @[src/main/XBAR.scala:6:7, :252:{34,65}, :253:22, :264:72]
  assign io_lsu_wready = wready;	// @[src/main/XBAR.scala:6:7, :252:65, :254:22, :264:72]
  assign io_lsu_arready = _GEN_3 ? io_sdram_arready : _GEN_4;	// @[src/main/XBAR.scala:6:7, :204:{34,65}, :205:22, :215:{41,72}]
  assign io_lsu_rvalid = io_lsu_arvalid & ~_GEN & rvalid;	// @[src/main/XBAR.scala:6:7, :56:42, :57:{25,49}, :65:21, :74:21, :76:49, :204:65, :206:22, :215:72]
  assign io_lsu_rdata = rdata;	// @[src/main/XBAR.scala:6:7, :204:65, :208:22, :215:72]
  assign io_sdram_awvalid = _GEN_5 & io_lsu_awvalid;	// @[src/main/XBAR.scala:6:7, :252:{34,65}, :262:22, :264:72]
  assign io_sdram_awaddr = io_lsu_awaddr;	// @[src/main/XBAR.scala:6:7]
  assign io_sdram_wvalid = _GEN_5 & io_lsu_wvalid;	// @[src/main/XBAR.scala:6:7, :252:{34,65}, :260:22, :264:72]
  assign io_sdram_wdata = io_lsu_wdata;	// @[src/main/XBAR.scala:6:7]
  assign io_sdram_wstrb = io_lsu_wstrb;	// @[src/main/XBAR.scala:6:7]
  assign io_sdram_bready = _GEN_5 & awid_halt == 32'h2;	// @[src/main/XBAR.scala:6:7, :51:26, :114:21, :134:24, :141:20, :142:31, :185:18, :252:{34,65}, :258:22, :264:72]
  assign io_sdram_arvalid =
    _GEN_3 & (io_lsu_arvalid ? _GEN | io_lsu_arvalid : ~io_lsu_arvalid);	// @[src/main/XBAR.scala:6:7, :56:42, :57:{25,49}, :62:21, :71:21, :76:{32,49}, :204:{34,65}, :213:22, :215:72]
  assign io_sdram_araddr = araddr;	// @[src/main/XBAR.scala:6:7, :56:42, :57:49, :76:49]
  assign io_sdram_arid = _GEN_0 ? 4'h1 : 4'h2;	// @[src/main/XBAR.scala:6:7, :7:14, :56:42, :57:49, :76:49, :77:21, :86:50]
  assign io_sdram_rready = _GEN_3 & (_GEN_1 ? io_ifu_rready : _GEN_2 & io_lsu_rready);	// @[src/main/XBAR.scala:6:7, :112:{51,61}, :113:21, :115:{58,68}, :116:21, :119:21, :204:{34,65}, :211:22, :215:72]
  assign io_clint_araddr = araddr;	// @[src/main/XBAR.scala:6:7, :56:42, :57:49, :76:49]
endmodule

// external module ysyx_23060336_SDRAM

module ysyx_23060336_CLINT(	// @[src/main/CLINT.scala:6:7]
  input         clock,	// @[src/main/CLINT.scala:6:7]
                reset,	// @[src/main/CLINT.scala:6:7]
  input  [31:0] io_axi_araddr,	// @[src/main/CLINT.scala:7:14]
  output [31:0] io_axi_rdata	// @[src/main/CLINT.scala:7:14]
);

  reg [31:0] mtimel;	// @[src/main/CLINT.scala:11:23]
  reg [31:0] mtimeh;	// @[src/main/CLINT.scala:12:23]
  always @(posedge clock) begin	// @[src/main/CLINT.scala:6:7]
    if (reset) begin	// @[src/main/CLINT.scala:6:7]
      mtimel <= 32'h0;	// @[src/main/CLINT.scala:11:23]
      mtimeh <= 32'h0;	// @[src/main/CLINT.scala:11:23, :12:23]
    end
    else if (&mtimel) begin	// @[src/main/CLINT.scala:11:23, :14:15]
      mtimel <= 32'h0;	// @[src/main/CLINT.scala:11:23]
      mtimeh <= mtimeh + 32'h1;	// @[src/main/CLINT.scala:12:23, :16:22]
    end
    else	// @[src/main/CLINT.scala:14:15]
      mtimel <= mtimel + 32'h1;	// @[src/main/CLINT.scala:11:23, :16:22, :18:22]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/CLINT.scala:6:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/CLINT.scala:6:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/CLINT.scala:6:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];	// @[src/main/CLINT.scala:6:7]
    initial begin	// @[src/main/CLINT.scala:6:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/CLINT.scala:6:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/CLINT.scala:6:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/CLINT.scala:6:7]
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// @[src/main/CLINT.scala:6:7]
        end	// @[src/main/CLINT.scala:6:7]
        mtimel = _RANDOM[1'h0];	// @[src/main/CLINT.scala:6:7, :11:23]
        mtimeh = _RANDOM[1'h1];	// @[src/main/CLINT.scala:6:7, :12:23]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/CLINT.scala:6:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/CLINT.scala:6:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_axi_rdata = io_axi_araddr == 32'hA0000048 ? mtimel : mtimeh;	// @[src/main/CLINT.scala:6:7, :11:23, :12:23, :29:{24,39}]
endmodule

// external module ysyx_23060336_EBREAK

module ysyx_23060336(	// @[src/main/ysyx_23060336.scala:13:7]
  input         clock,	// @[src/main/ysyx_23060336.scala:13:7]
                reset,	// @[src/main/ysyx_23060336.scala:13:7]
  output        io_halt,	// @[src/main/ysyx_23060336.scala:14:20]
  output [31:0] io_halt_ret,	// @[src/main/ysyx_23060336.scala:14:20]
                io_NPC,	// @[src/main/ysyx_23060336.scala:14:20]
                io_PC,	// @[src/main/ysyx_23060336.scala:14:20]
                io_inst,	// @[src/main/ysyx_23060336.scala:14:20]
                io_mcause,	// @[src/main/ysyx_23060336.scala:14:20]
                io_mstatus,	// @[src/main/ysyx_23060336.scala:14:20]
  output [6:0]  io_iduopcode,	// @[src/main/ysyx_23060336.scala:14:20]
  output [1:0]  io_idupcmux,	// @[src/main/ysyx_23060336.scala:14:20]
  output [31:0] io_iduinst,	// @[src/main/ysyx_23060336.scala:14:20]
  output [1:0]  io_exupcmux,	// @[src/main/ysyx_23060336.scala:14:20]
  output        io_ifuvalid,	// @[src/main/ysyx_23060336.scala:14:20]
                io_ifuready,	// @[src/main/ysyx_23060336.scala:14:20]
                io_iduvalid,	// @[src/main/ysyx_23060336.scala:14:20]
                io_iduready,	// @[src/main/ysyx_23060336.scala:14:20]
                io_exuvalid,	// @[src/main/ysyx_23060336.scala:14:20]
                io_exuready,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsuvalid,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsuready,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsuarvalid,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsuarready,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsuawvalid,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsuawready,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsurready,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsurvalid,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsuwready,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsuwvalid,	// @[src/main/ysyx_23060336.scala:14:20]
                io_wbuvalid,	// @[src/main/ysyx_23060336.scala:14:20]
                io_wbuready,	// @[src/main/ysyx_23060336.scala:14:20]
                io_MemtoReg,	// @[src/main/ysyx_23060336.scala:14:20]
                io_iduMemWr,	// @[src/main/ysyx_23060336.scala:14:20]
                io_exuMemWr,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsuMemWr,	// @[src/main/ysyx_23060336.scala:14:20]
  output [31:0] io_idupc,	// @[src/main/ysyx_23060336.scala:14:20]
                io_exupc,	// @[src/main/ysyx_23060336.scala:14:20]
  output [3:0]  io_alumux,	// @[src/main/ysyx_23060336.scala:14:20]
  output [31:0] io_pcadd,	// @[src/main/ysyx_23060336.scala:14:20]
                io_pca,	// @[src/main/ysyx_23060336.scala:14:20]
                io_pcb,	// @[src/main/ysyx_23060336.scala:14:20]
                io_ina,	// @[src/main/ysyx_23060336.scala:14:20]
                io_inb,	// @[src/main/ysyx_23060336.scala:14:20]
  output [4:0]  io_idurs1,	// @[src/main/ysyx_23060336.scala:14:20]
                io_idurs2,	// @[src/main/ysyx_23060336.scala:14:20]
                io_exurd,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsurd,	// @[src/main/ysyx_23060336.scala:14:20]
                io_wburd,	// @[src/main/ysyx_23060336.scala:14:20]
  output [31:0] io_lsuaraddr,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsurdata,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsuawaddr,	// @[src/main/ysyx_23060336.scala:14:20]
                io_lsuwdata,	// @[src/main/ysyx_23060336.scala:14:20]
                io_wburesult,	// @[src/main/ysyx_23060336.scala:14:20]
  output [4:0]  io_regrs1,	// @[src/main/ysyx_23060336.scala:14:20]
                io_regrs2,	// @[src/main/ysyx_23060336.scala:14:20]
  output [31:0] io_regsrc1,	// @[src/main/ysyx_23060336.scala:14:20]
                io_regsrc2,	// @[src/main/ysyx_23060336.scala:14:20]
                io_regrd,	// @[src/main/ysyx_23060336.scala:14:20]
                io_regwen,	// @[src/main/ysyx_23060336.scala:14:20]
                io_regwaddr,	// @[src/main/ysyx_23060336.scala:14:20]
                io_imm	// @[src/main/ysyx_23060336.scala:14:20]
);

  wire        _reg_io_wen_T;	// @[src/main/ysyx_23060336.scala:158:33]
  wire        _ebreak_halt;	// @[src/main/ysyx_23060336.scala:86:22]
  wire [31:0] _clint_io_axi_rdata;	// @[src/main/ysyx_23060336.scala:85:22]
  wire        _sdram_awready;	// @[src/main/ysyx_23060336.scala:84:22]
  wire        _sdram_wready;	// @[src/main/ysyx_23060336.scala:84:22]
  wire        _sdram_arready;	// @[src/main/ysyx_23060336.scala:84:22]
  wire        _sdram_rvalid;	// @[src/main/ysyx_23060336.scala:84:22]
  wire [31:0] _sdram_rdata;	// @[src/main/ysyx_23060336.scala:84:22]
  wire        _xbar_io_ifu_wready;	// @[src/main/ysyx_23060336.scala:83:22]
  wire        _xbar_io_ifu_rvalid;	// @[src/main/ysyx_23060336.scala:83:22]
  wire [31:0] _xbar_io_ifu_rdata;	// @[src/main/ysyx_23060336.scala:83:22]
  wire        _xbar_io_lsu_wready;	// @[src/main/ysyx_23060336.scala:83:22]
  wire        _xbar_io_lsu_rvalid;	// @[src/main/ysyx_23060336.scala:83:22]
  wire [31:0] _xbar_io_lsu_rdata;	// @[src/main/ysyx_23060336.scala:83:22]
  wire        _xbar_io_sdram_awvalid;	// @[src/main/ysyx_23060336.scala:83:22]
  wire [31:0] _xbar_io_sdram_awaddr;	// @[src/main/ysyx_23060336.scala:83:22]
  wire        _xbar_io_sdram_wvalid;	// @[src/main/ysyx_23060336.scala:83:22]
  wire [31:0] _xbar_io_sdram_wdata;	// @[src/main/ysyx_23060336.scala:83:22]
  wire [3:0]  _xbar_io_sdram_wstrb;	// @[src/main/ysyx_23060336.scala:83:22]
  wire        _xbar_io_sdram_bready;	// @[src/main/ysyx_23060336.scala:83:22]
  wire        _xbar_io_sdram_arvalid;	// @[src/main/ysyx_23060336.scala:83:22]
  wire [31:0] _xbar_io_sdram_araddr;	// @[src/main/ysyx_23060336.scala:83:22]
  wire [3:0]  _xbar_io_sdram_arid;	// @[src/main/ysyx_23060336.scala:83:22]
  wire        _xbar_io_sdram_rready;	// @[src/main/ysyx_23060336.scala:83:22]
  wire [31:0] _xbar_io_clint_araddr;	// @[src/main/ysyx_23060336.scala:83:22]
  wire [31:0] _csr_io_rdata;	// @[src/main/ysyx_23060336.scala:82:22]
  wire [31:0] _csr_io_mepc;	// @[src/main/ysyx_23060336.scala:82:22]
  wire [31:0] _csr_io_mtvec;	// @[src/main/ysyx_23060336.scala:82:22]
  wire [31:0] _reg_io_rdata1;	// @[src/main/ysyx_23060336.scala:81:22]
  wire [31:0] _reg_io_rdata2;	// @[src/main/ysyx_23060336.scala:81:22]
  wire        _wbu_io_RegWr;	// @[src/main/ysyx_23060336.scala:80:22]
  wire        _wbu_io_CsrWr;	// @[src/main/ysyx_23060336.scala:80:22]
  wire [4:0]  _wbu_io_rd;	// @[src/main/ysyx_23060336.scala:80:22]
  wire [11:0] _wbu_io_csr;	// @[src/main/ysyx_23060336.scala:80:22]
  wire [31:0] _wbu_io_result;	// @[src/main/ysyx_23060336.scala:80:22]
  wire [31:0] _wbu_io_DataOut;	// @[src/main/ysyx_23060336.scala:80:22]
  wire        _lsu_io_out_valid;	// @[src/main/ysyx_23060336.scala:79:22]
  wire [31:0] _lsu_io_out_bits_DataOut;	// @[src/main/ysyx_23060336.scala:79:22]
  wire [31:0] _lsu_io_out_bits_result;	// @[src/main/ysyx_23060336.scala:79:22]
  wire [11:0] _lsu_io_out_bits_csr;	// @[src/main/ysyx_23060336.scala:79:22]
  wire [31:0] _lsu_io_out_bits_Csr;	// @[src/main/ysyx_23060336.scala:79:22]
  wire [4:0]  _lsu_io_out_bits_rd;	// @[src/main/ysyx_23060336.scala:79:22]
  wire [2:0]  _lsu_io_out_bits_RegNum;	// @[src/main/ysyx_23060336.scala:79:22]
  wire        _lsu_io_out_bits_CsrWr;	// @[src/main/ysyx_23060336.scala:79:22]
  wire        _lsu_io_out_bits_RegWr;	// @[src/main/ysyx_23060336.scala:79:22]
  wire        _lsu_io_in_ready;	// @[src/main/ysyx_23060336.scala:79:22]
  wire        _lsu_io_wen;	// @[src/main/ysyx_23060336.scala:79:22]
  wire [4:0]  _lsu_io_rd;	// @[src/main/ysyx_23060336.scala:79:22]
  wire        _lsu_io_axi_awvalid;	// @[src/main/ysyx_23060336.scala:79:22]
  wire [31:0] _lsu_io_axi_awaddr;	// @[src/main/ysyx_23060336.scala:79:22]
  wire        _lsu_io_axi_wvalid;	// @[src/main/ysyx_23060336.scala:79:22]
  wire [31:0] _lsu_io_axi_wdata;	// @[src/main/ysyx_23060336.scala:79:22]
  wire [3:0]  _lsu_io_axi_wstrb;	// @[src/main/ysyx_23060336.scala:79:22]
  wire        _lsu_io_axi_arvalid;	// @[src/main/ysyx_23060336.scala:79:22]
  wire [31:0] _lsu_io_axi_araddr;	// @[src/main/ysyx_23060336.scala:79:22]
  wire        _lsu_io_axi_rready;	// @[src/main/ysyx_23060336.scala:79:22]
  wire [31:0] _exu_io_out_bits_result;	// @[src/main/ysyx_23060336.scala:78:22]
  wire [31:0] _exu_io_out_bits_src2;	// @[src/main/ysyx_23060336.scala:78:22]
  wire [31:0] _exu_io_out_bits_Csr;	// @[src/main/ysyx_23060336.scala:78:22]
  wire [11:0] _exu_io_out_bits_csr;	// @[src/main/ysyx_23060336.scala:78:22]
  wire [2:0]  _exu_io_out_bits_MemNum;	// @[src/main/ysyx_23060336.scala:78:22]
  wire [2:0]  _exu_io_out_bits_RegNum;	// @[src/main/ysyx_23060336.scala:78:22]
  wire [4:0]  _exu_io_out_bits_rd;	// @[src/main/ysyx_23060336.scala:78:22]
  wire        _exu_io_out_bits_MemtoReg;	// @[src/main/ysyx_23060336.scala:78:22]
  wire        _exu_io_out_bits_MemWr;	// @[src/main/ysyx_23060336.scala:78:22]
  wire        _exu_io_out_bits_RegWr;	// @[src/main/ysyx_23060336.scala:78:22]
  wire        _exu_io_out_bits_CsrWr;	// @[src/main/ysyx_23060336.scala:78:22]
  wire        _exu_io_out_bits_halt;	// @[src/main/ysyx_23060336.scala:78:22]
  wire [1:0]  _exu_io_ecall;	// @[src/main/ysyx_23060336.scala:78:22]
  wire [4:0]  _exu_io_rd;	// @[src/main/ysyx_23060336.scala:78:22]
  wire [31:0] _exu_io_dnpc;	// @[src/main/ysyx_23060336.scala:78:22]
  wire [31:0] _exu_io_mepc_in;	// @[src/main/ysyx_23060336.scala:78:22]
  wire        _idu_io_in_ready;	// @[src/main/ysyx_23060336.scala:77:22]
  wire        _idu_io_out_valid;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [4:0]  _idu_io_out_bits_rd;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [31:0] _idu_io_out_bits_pc;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [31:0] _idu_io_out_bits_imm;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [31:0] _idu_io_out_bits_zimm;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [31:0] _idu_io_out_bits_src1;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [31:0] _idu_io_out_bits_src2;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [11:0] _idu_io_out_bits_csr;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [31:0] _idu_io_out_bits_Csr;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [1:0]  _idu_io_out_bits_PcMux;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [3:0]  _idu_io_out_bits_AluMux;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [3:0]  _idu_io_out_bits_AluSel;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [2:0]  _idu_io_out_bits_MemNum;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [2:0]  _idu_io_out_bits_RegNum;	// @[src/main/ysyx_23060336.scala:77:22]
  wire        _idu_io_out_bits_CsrWr;	// @[src/main/ysyx_23060336.scala:77:22]
  wire        _idu_io_out_bits_MemWr;	// @[src/main/ysyx_23060336.scala:77:22]
  wire        _idu_io_out_bits_RegWr;	// @[src/main/ysyx_23060336.scala:77:22]
  wire        _idu_io_out_bits_MemtoReg;	// @[src/main/ysyx_23060336.scala:77:22]
  wire        _idu_io_out_bits_Branch;	// @[src/main/ysyx_23060336.scala:77:22]
  wire        _idu_io_out_bits_mret;	// @[src/main/ysyx_23060336.scala:77:22]
  wire        _idu_io_out_bits_ecall;	// @[src/main/ysyx_23060336.scala:77:22]
  wire        _idu_io_out_bits_Recsr;	// @[src/main/ysyx_23060336.scala:77:22]
  wire        _idu_io_out_bits_halt;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [4:0]  _idu_io_rs1;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [4:0]  _idu_io_rs2;	// @[src/main/ysyx_23060336.scala:77:22]
  wire [11:0] _idu_io_csr;	// @[src/main/ysyx_23060336.scala:77:22]
  wire        _ifu_io_out_valid;	// @[src/main/ysyx_23060336.scala:76:22]
  wire [31:0] _ifu_io_out_bits_inst;	// @[src/main/ysyx_23060336.scala:76:22]
  wire [31:0] _ifu_io_out_bits_pc;	// @[src/main/ysyx_23060336.scala:76:22]
  wire        _ifu_io_out_bits_halt;	// @[src/main/ysyx_23060336.scala:76:22]
  wire [31:0] _ifu_io_pc;	// @[src/main/ysyx_23060336.scala:76:22]
  wire        _ifu_io_valid;	// @[src/main/ysyx_23060336.scala:76:22]
  wire [31:0] _ifu_io_axi_araddr;	// @[src/main/ysyx_23060336.scala:76:22]
  wire        _ifu_io_axi_rready;	// @[src/main/ysyx_23060336.scala:76:22]
  reg  [31:0] idu_io_in_bits_r_inst;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [31:0] idu_io_in_bits_r_pc;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         idu_io_in_bits_r_halt;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [4:0]  exu_io_in_bits_r_rd;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [31:0] exu_io_in_bits_r_pc;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [31:0] exu_io_in_bits_r_imm;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [31:0] exu_io_in_bits_r_zimm;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [31:0] exu_io_in_bits_r_src1;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [31:0] exu_io_in_bits_r_src2;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [11:0] exu_io_in_bits_r_csr;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [31:0] exu_io_in_bits_r_Csr;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [1:0]  exu_io_in_bits_r_PcMux;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [3:0]  exu_io_in_bits_r_AluMux;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [3:0]  exu_io_in_bits_r_AluSel;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [2:0]  exu_io_in_bits_r_MemNum;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [2:0]  exu_io_in_bits_r_RegNum;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         exu_io_in_bits_r_CsrWr;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         exu_io_in_bits_r_MemWr;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         exu_io_in_bits_r_RegWr;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         exu_io_in_bits_r_MemtoReg;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         exu_io_in_bits_r_Branch;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         exu_io_in_bits_r_mret;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         exu_io_in_bits_r_ecall;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         exu_io_in_bits_r_Recsr;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         exu_io_in_bits_r_halt;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [31:0] lsu_io_in_bits_r_result;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [31:0] lsu_io_in_bits_r_src2;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [31:0] lsu_io_in_bits_r_Csr;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [11:0] lsu_io_in_bits_r_csr;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [2:0]  lsu_io_in_bits_r_MemNum;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [2:0]  lsu_io_in_bits_r_RegNum;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [4:0]  lsu_io_in_bits_r_rd;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         lsu_io_in_bits_r_MemtoReg;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         lsu_io_in_bits_r_MemWr;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         lsu_io_in_bits_r_RegWr;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         lsu_io_in_bits_r_CsrWr;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         lsu_io_in_bits_r_halt;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [31:0] wbu_io_in_bits_r_DataOut;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [31:0] wbu_io_in_bits_r_result;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [11:0] wbu_io_in_bits_r_csr;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [31:0] wbu_io_in_bits_r_Csr;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [4:0]  wbu_io_in_bits_r_rd;	// @[src/main/ysyx_23060336.scala:90:31]
  reg  [2:0]  wbu_io_in_bits_r_RegNum;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         wbu_io_in_bits_r_CsrWr;	// @[src/main/ysyx_23060336.scala:90:31]
  reg         wbu_io_in_bits_r_RegWr;	// @[src/main/ysyx_23060336.scala:90:31]
  assign _reg_io_wen_T = _wbu_io_RegWr & _ifu_io_valid;	// @[src/main/ysyx_23060336.scala:76:22, :80:22, :158:33]
  always @(posedge clock) begin	// @[src/main/ysyx_23060336.scala:13:7]
    if (_ifu_io_out_valid & _idu_io_in_ready) begin	// @[src/main/ysyx_23060336.scala:76:22, :77:22, :90:60]
      idu_io_in_bits_r_inst <= _ifu_io_out_bits_inst;	// @[src/main/ysyx_23060336.scala:76:22, :90:31]
      idu_io_in_bits_r_pc <= _ifu_io_out_bits_pc;	// @[src/main/ysyx_23060336.scala:76:22, :90:31]
      idu_io_in_bits_r_halt <= _ifu_io_out_bits_halt;	// @[src/main/ysyx_23060336.scala:76:22, :90:31]
    end
    if (_idu_io_out_valid) begin	// @[src/main/ysyx_23060336.scala:77:22]
      exu_io_in_bits_r_rd <= _idu_io_out_bits_rd;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_pc <= _idu_io_out_bits_pc;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_imm <= _idu_io_out_bits_imm;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_zimm <= _idu_io_out_bits_zimm;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_src1 <= _idu_io_out_bits_src1;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_src2 <= _idu_io_out_bits_src2;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_csr <= _idu_io_out_bits_csr;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_Csr <= _idu_io_out_bits_Csr;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_PcMux <= _idu_io_out_bits_PcMux;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_AluMux <= _idu_io_out_bits_AluMux;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_AluSel <= _idu_io_out_bits_AluSel;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_MemNum <= _idu_io_out_bits_MemNum;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_RegNum <= _idu_io_out_bits_RegNum;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_CsrWr <= _idu_io_out_bits_CsrWr;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_MemWr <= _idu_io_out_bits_MemWr;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_RegWr <= _idu_io_out_bits_RegWr;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_MemtoReg <= _idu_io_out_bits_MemtoReg;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_Branch <= _idu_io_out_bits_Branch;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_mret <= _idu_io_out_bits_mret;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_ecall <= _idu_io_out_bits_ecall;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_Recsr <= _idu_io_out_bits_Recsr;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
      exu_io_in_bits_r_halt <= _idu_io_out_bits_halt;	// @[src/main/ysyx_23060336.scala:77:22, :90:31]
    end
    if (_lsu_io_in_ready) begin	// @[src/main/ysyx_23060336.scala:79:22]
      lsu_io_in_bits_r_result <= _exu_io_out_bits_result;	// @[src/main/ysyx_23060336.scala:78:22, :90:31]
      lsu_io_in_bits_r_src2 <= _exu_io_out_bits_src2;	// @[src/main/ysyx_23060336.scala:78:22, :90:31]
      lsu_io_in_bits_r_Csr <= _exu_io_out_bits_Csr;	// @[src/main/ysyx_23060336.scala:78:22, :90:31]
      lsu_io_in_bits_r_csr <= _exu_io_out_bits_csr;	// @[src/main/ysyx_23060336.scala:78:22, :90:31]
      lsu_io_in_bits_r_MemNum <= _exu_io_out_bits_MemNum;	// @[src/main/ysyx_23060336.scala:78:22, :90:31]
      lsu_io_in_bits_r_RegNum <= _exu_io_out_bits_RegNum;	// @[src/main/ysyx_23060336.scala:78:22, :90:31]
      lsu_io_in_bits_r_rd <= _exu_io_out_bits_rd;	// @[src/main/ysyx_23060336.scala:78:22, :90:31]
      lsu_io_in_bits_r_MemtoReg <= _exu_io_out_bits_MemtoReg;	// @[src/main/ysyx_23060336.scala:78:22, :90:31]
      lsu_io_in_bits_r_MemWr <= _exu_io_out_bits_MemWr;	// @[src/main/ysyx_23060336.scala:78:22, :90:31]
      lsu_io_in_bits_r_RegWr <= _exu_io_out_bits_RegWr;	// @[src/main/ysyx_23060336.scala:78:22, :90:31]
      lsu_io_in_bits_r_CsrWr <= _exu_io_out_bits_CsrWr;	// @[src/main/ysyx_23060336.scala:78:22, :90:31]
      lsu_io_in_bits_r_halt <= _exu_io_out_bits_halt;	// @[src/main/ysyx_23060336.scala:78:22, :90:31]
    end
    if (_lsu_io_out_valid) begin	// @[src/main/ysyx_23060336.scala:79:22]
      wbu_io_in_bits_r_DataOut <= _lsu_io_out_bits_DataOut;	// @[src/main/ysyx_23060336.scala:79:22, :90:31]
      wbu_io_in_bits_r_result <= _lsu_io_out_bits_result;	// @[src/main/ysyx_23060336.scala:79:22, :90:31]
      wbu_io_in_bits_r_csr <= _lsu_io_out_bits_csr;	// @[src/main/ysyx_23060336.scala:79:22, :90:31]
      wbu_io_in_bits_r_Csr <= _lsu_io_out_bits_Csr;	// @[src/main/ysyx_23060336.scala:79:22, :90:31]
      wbu_io_in_bits_r_rd <= _lsu_io_out_bits_rd;	// @[src/main/ysyx_23060336.scala:79:22, :90:31]
      wbu_io_in_bits_r_RegNum <= _lsu_io_out_bits_RegNum;	// @[src/main/ysyx_23060336.scala:79:22, :90:31]
      wbu_io_in_bits_r_CsrWr <= _lsu_io_out_bits_CsrWr;	// @[src/main/ysyx_23060336.scala:79:22, :90:31]
      wbu_io_in_bits_r_RegWr <= _lsu_io_out_bits_RegWr;	// @[src/main/ysyx_23060336.scala:79:22, :90:31]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/ysyx_23060336.scala:13:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/ysyx_23060336.scala:13:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/ysyx_23060336.scala:13:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:16];	// @[src/main/ysyx_23060336.scala:13:7]
    initial begin	// @[src/main/ysyx_23060336.scala:13:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/ysyx_23060336.scala:13:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/ysyx_23060336.scala:13:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/ysyx_23060336.scala:13:7]
        for (logic [4:0] i = 5'h0; i < 5'h11; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;	// @[src/main/ysyx_23060336.scala:13:7]
        end	// @[src/main/ysyx_23060336.scala:13:7]
        idu_io_in_bits_r_inst = _RANDOM[5'h0];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        idu_io_in_bits_r_pc = _RANDOM[5'h1];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        idu_io_in_bits_r_halt = _RANDOM[5'h2][0];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_rd = _RANDOM[5'h2][5:1];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_pc = {_RANDOM[5'h2][31:6], _RANDOM[5'h3][5:0]};	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_imm = {_RANDOM[5'h3][31:6], _RANDOM[5'h4][5:0]};	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_zimm = {_RANDOM[5'h4][31:6], _RANDOM[5'h5][5:0]};	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_src1 = {_RANDOM[5'h5][31:6], _RANDOM[5'h6][5:0]};	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_src2 = {_RANDOM[5'h6][31:6], _RANDOM[5'h7][5:0]};	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_csr = _RANDOM[5'h7][17:6];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_Csr = {_RANDOM[5'h7][31:18], _RANDOM[5'h8][17:0]};	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_PcMux = _RANDOM[5'h8][19:18];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_AluMux = _RANDOM[5'h8][23:20];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_AluSel = _RANDOM[5'h8][27:24];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_MemNum = _RANDOM[5'h8][30:28];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_RegNum = {_RANDOM[5'h8][31], _RANDOM[5'h9][1:0]};	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_CsrWr = _RANDOM[5'h9][2];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_MemWr = _RANDOM[5'h9][3];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_RegWr = _RANDOM[5'h9][4];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_MemtoReg = _RANDOM[5'h9][5];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_Branch = _RANDOM[5'h9][6];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_mret = _RANDOM[5'h9][7];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_ecall = _RANDOM[5'h9][8];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_Recsr = _RANDOM[5'h9][9];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        exu_io_in_bits_r_halt = _RANDOM[5'h9][10];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        lsu_io_in_bits_r_result = {_RANDOM[5'h9][31:11], _RANDOM[5'hA][10:0]};	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        lsu_io_in_bits_r_src2 = {_RANDOM[5'hA][31:11], _RANDOM[5'hB][10:0]};	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        lsu_io_in_bits_r_Csr = {_RANDOM[5'hB][31:11], _RANDOM[5'hC][10:0]};	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        lsu_io_in_bits_r_csr = _RANDOM[5'hC][22:11];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        lsu_io_in_bits_r_MemNum = _RANDOM[5'hC][25:23];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        lsu_io_in_bits_r_RegNum = _RANDOM[5'hC][28:26];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        lsu_io_in_bits_r_rd = {_RANDOM[5'hC][31:29], _RANDOM[5'hD][1:0]};	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        lsu_io_in_bits_r_MemtoReg = _RANDOM[5'hD][2];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        lsu_io_in_bits_r_MemWr = _RANDOM[5'hD][3];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        lsu_io_in_bits_r_RegWr = _RANDOM[5'hD][4];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        lsu_io_in_bits_r_CsrWr = _RANDOM[5'hD][5];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        lsu_io_in_bits_r_halt = _RANDOM[5'hD][6];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        wbu_io_in_bits_r_DataOut = {_RANDOM[5'hD][31:7], _RANDOM[5'hE][6:0]};	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        wbu_io_in_bits_r_result = {_RANDOM[5'hE][31:7], _RANDOM[5'hF][6:0]};	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        wbu_io_in_bits_r_csr = _RANDOM[5'hF][18:7];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        wbu_io_in_bits_r_Csr = {_RANDOM[5'hF][31:19], _RANDOM[5'h10][18:0]};	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        wbu_io_in_bits_r_rd = _RANDOM[5'h10][23:19];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        wbu_io_in_bits_r_RegNum = _RANDOM[5'h10][26:24];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        wbu_io_in_bits_r_CsrWr = _RANDOM[5'h10][27];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
        wbu_io_in_bits_r_RegWr = _RANDOM[5'h10][28];	// @[src/main/ysyx_23060336.scala:13:7, :90:31]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/ysyx_23060336.scala:13:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/ysyx_23060336.scala:13:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ysyx_23060336_IFU ifu (	// @[src/main/ysyx_23060336.scala:76:22]
    .clock            (clock),
    .reset            (reset),
    .io_halt          (_ebreak_halt),	// @[src/main/ysyx_23060336.scala:86:22]
    .io_wen           (_lsu_io_wen),	// @[src/main/ysyx_23060336.scala:79:22]
    .io_out_valid     (_ifu_io_out_valid),
    .io_out_bits_inst (_ifu_io_out_bits_inst),
    .io_out_bits_pc   (_ifu_io_out_bits_pc),
    .io_out_bits_halt (_ifu_io_out_bits_halt),
    .io_inst          (io_inst),
    .io_pc            (_ifu_io_pc),
    .io_dnpc          (_exu_io_dnpc),	// @[src/main/ysyx_23060336.scala:78:22]
    .io_valid         (_ifu_io_valid),
    .io_ready         (io_ifuready),
    .io_axi_wready    (_xbar_io_ifu_wready),	// @[src/main/ysyx_23060336.scala:83:22]
    .io_axi_araddr    (_ifu_io_axi_araddr),
    .io_axi_rready    (_ifu_io_axi_rready),
    .io_axi_rvalid    (_xbar_io_ifu_rvalid),	// @[src/main/ysyx_23060336.scala:83:22]
    .io_axi_rdata     (_xbar_io_ifu_rdata)	// @[src/main/ysyx_23060336.scala:83:22]
  );
  ysyx_23060336_IDU idu (	// @[src/main/ysyx_23060336.scala:77:22]
    .clock                (clock),
    .reset                (reset),
    .io_in_ready          (_idu_io_in_ready),
    .io_in_bits_inst      (idu_io_in_bits_r_inst),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_pc        (idu_io_in_bits_r_pc),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_halt      (idu_io_in_bits_r_halt),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_out_valid         (_idu_io_out_valid),
    .io_out_bits_rd       (_idu_io_out_bits_rd),
    .io_out_bits_pc       (_idu_io_out_bits_pc),
    .io_out_bits_imm      (_idu_io_out_bits_imm),
    .io_out_bits_zimm     (_idu_io_out_bits_zimm),
    .io_out_bits_src1     (_idu_io_out_bits_src1),
    .io_out_bits_src2     (_idu_io_out_bits_src2),
    .io_out_bits_csr      (_idu_io_out_bits_csr),
    .io_out_bits_Csr      (_idu_io_out_bits_Csr),
    .io_out_bits_PcMux    (_idu_io_out_bits_PcMux),
    .io_out_bits_AluMux   (_idu_io_out_bits_AluMux),
    .io_out_bits_AluSel   (_idu_io_out_bits_AluSel),
    .io_out_bits_MemNum   (_idu_io_out_bits_MemNum),
    .io_out_bits_RegNum   (_idu_io_out_bits_RegNum),
    .io_out_bits_CsrWr    (_idu_io_out_bits_CsrWr),
    .io_out_bits_MemWr    (_idu_io_out_bits_MemWr),
    .io_out_bits_RegWr    (_idu_io_out_bits_RegWr),
    .io_out_bits_MemtoReg (_idu_io_out_bits_MemtoReg),
    .io_out_bits_Branch   (_idu_io_out_bits_Branch),
    .io_out_bits_mret     (_idu_io_out_bits_mret),
    .io_out_bits_ecall    (_idu_io_out_bits_ecall),
    .io_out_bits_Recsr    (_idu_io_out_bits_Recsr),
    .io_out_bits_halt     (_idu_io_out_bits_halt),
    .io_Csr               (_csr_io_rdata),	// @[src/main/ysyx_23060336.scala:82:22]
    .io_src1              (_reg_io_rdata1),	// @[src/main/ysyx_23060336.scala:81:22]
    .io_src2              (_reg_io_rdata2),	// @[src/main/ysyx_23060336.scala:81:22]
    .io_exu_rd            (_exu_io_rd),	// @[src/main/ysyx_23060336.scala:78:22]
    .io_lsu_rd            (_lsu_io_rd),	// @[src/main/ysyx_23060336.scala:79:22]
    .io_wbu_rd            (_wbu_io_rd),	// @[src/main/ysyx_23060336.scala:80:22]
    .io_rs1               (_idu_io_rs1),
    .io_rs2               (_idu_io_rs2),
    .io_csr               (_idu_io_csr),
    .io_pc                (io_idupc),
    .io_pcmux             (io_idupcmux),
    .io_opcode            (io_iduopcode),
    .io_inst              (io_iduinst),
    .io_imm               (io_imm),
    .io_valid             (io_iduvalid),
    .io_ready             (io_iduready),
    .io_iduMemWr          (io_iduMemWr)
  );
  ysyx_23060336_EXU exu (	// @[src/main/ysyx_23060336.scala:78:22]
    .io_in_bits_rd        (exu_io_in_bits_r_rd),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_pc        (exu_io_in_bits_r_pc),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_imm       (exu_io_in_bits_r_imm),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_zimm      (exu_io_in_bits_r_zimm),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_src1      (exu_io_in_bits_r_src1),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_src2      (exu_io_in_bits_r_src2),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_csr       (exu_io_in_bits_r_csr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_Csr       (exu_io_in_bits_r_Csr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_PcMux     (exu_io_in_bits_r_PcMux),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_AluMux    (exu_io_in_bits_r_AluMux),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_AluSel    (exu_io_in_bits_r_AluSel),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_MemNum    (exu_io_in_bits_r_MemNum),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_RegNum    (exu_io_in_bits_r_RegNum),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_CsrWr     (exu_io_in_bits_r_CsrWr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_MemWr     (exu_io_in_bits_r_MemWr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_RegWr     (exu_io_in_bits_r_RegWr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_MemtoReg  (exu_io_in_bits_r_MemtoReg),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_Branch    (exu_io_in_bits_r_Branch),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_mret      (exu_io_in_bits_r_mret),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_ecall     (exu_io_in_bits_r_ecall),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_Recsr     (exu_io_in_bits_r_Recsr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_halt      (exu_io_in_bits_r_halt),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_out_bits_result   (_exu_io_out_bits_result),
    .io_out_bits_src2     (_exu_io_out_bits_src2),
    .io_out_bits_Csr      (_exu_io_out_bits_Csr),
    .io_out_bits_csr      (_exu_io_out_bits_csr),
    .io_out_bits_MemNum   (_exu_io_out_bits_MemNum),
    .io_out_bits_RegNum   (_exu_io_out_bits_RegNum),
    .io_out_bits_rd       (_exu_io_out_bits_rd),
    .io_out_bits_MemtoReg (_exu_io_out_bits_MemtoReg),
    .io_out_bits_MemWr    (_exu_io_out_bits_MemWr),
    .io_out_bits_RegWr    (_exu_io_out_bits_RegWr),
    .io_out_bits_CsrWr    (_exu_io_out_bits_CsrWr),
    .io_out_bits_halt     (_exu_io_out_bits_halt),
    .io_mepc              (_csr_io_mepc),	// @[src/main/ysyx_23060336.scala:82:22]
    .io_mtvec             (_csr_io_mtvec),	// @[src/main/ysyx_23060336.scala:82:22]
    .io_ecall             (_exu_io_ecall),
    .io_pcmux             (io_exupcmux),
    .io_alumux            (io_alumux),
    .io_rd                (_exu_io_rd),
    .io_pcadd             (io_pcadd),
    .io_ina               (io_ina),
    .io_inb               (io_inb),
    .io_pca               (io_pca),
    .io_pcb               (io_pcb),
    .io_pc                (io_exupc),
    .io_dnpc              (_exu_io_dnpc),
    .io_mepc_in           (_exu_io_mepc_in),
    .io_exuMemWr          (io_exuMemWr)
  );
  ysyx_23060336_LSU lsu (	// @[src/main/ysyx_23060336.scala:79:22]
    .io_out_valid        (_lsu_io_out_valid),
    .io_out_bits_DataOut (_lsu_io_out_bits_DataOut),
    .io_out_bits_result  (_lsu_io_out_bits_result),
    .io_out_bits_csr     (_lsu_io_out_bits_csr),
    .io_out_bits_Csr     (_lsu_io_out_bits_Csr),
    .io_out_bits_rd      (_lsu_io_out_bits_rd),
    .io_out_bits_RegNum  (_lsu_io_out_bits_RegNum),
    .io_out_bits_CsrWr   (_lsu_io_out_bits_CsrWr),
    .io_out_bits_RegWr   (_lsu_io_out_bits_RegWr),
    .io_in_ready         (_lsu_io_in_ready),
    .io_in_bits_result   (lsu_io_in_bits_r_result),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_src2     (lsu_io_in_bits_r_src2),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_Csr      (lsu_io_in_bits_r_Csr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_csr      (lsu_io_in_bits_r_csr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_MemNum   (lsu_io_in_bits_r_MemNum),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_RegNum   (lsu_io_in_bits_r_RegNum),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_rd       (lsu_io_in_bits_r_rd),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_MemtoReg (lsu_io_in_bits_r_MemtoReg),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_MemWr    (lsu_io_in_bits_r_MemWr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_RegWr    (lsu_io_in_bits_r_RegWr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_CsrWr    (lsu_io_in_bits_r_CsrWr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_halt     (lsu_io_in_bits_r_halt),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_valid            (io_lsuvalid),
    .io_ready            (io_lsuready),
    .io_lsuMemWr         (io_lsuMemWr),
    .io_MemtoReg         (io_MemtoReg),
    .io_wen              (_lsu_io_wen),
    .io_rd               (_lsu_io_rd),
    .io_rdata            (io_lsurdata),
    .io_axi_awvalid      (_lsu_io_axi_awvalid),
    .io_axi_awaddr       (_lsu_io_axi_awaddr),
    .io_axi_wready       (_xbar_io_lsu_wready),	// @[src/main/ysyx_23060336.scala:83:22]
    .io_axi_wvalid       (_lsu_io_axi_wvalid),
    .io_axi_wdata        (_lsu_io_axi_wdata),
    .io_axi_wstrb        (_lsu_io_axi_wstrb),
    .io_axi_arvalid      (_lsu_io_axi_arvalid),
    .io_axi_araddr       (_lsu_io_axi_araddr),
    .io_axi_rready       (_lsu_io_axi_rready),
    .io_axi_rvalid       (_xbar_io_lsu_rvalid),	// @[src/main/ysyx_23060336.scala:83:22]
    .io_axi_rdata        (_xbar_io_lsu_rdata)	// @[src/main/ysyx_23060336.scala:83:22]
  );
  ysyx_23060336_WBU wbu (	// @[src/main/ysyx_23060336.scala:80:22]
    .io_in_bits_DataOut (wbu_io_in_bits_r_DataOut),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_result  (wbu_io_in_bits_r_result),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_csr     (wbu_io_in_bits_r_csr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_Csr     (wbu_io_in_bits_r_Csr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_rd      (wbu_io_in_bits_r_rd),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_RegNum  (wbu_io_in_bits_r_RegNum),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_CsrWr   (wbu_io_in_bits_r_CsrWr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_in_bits_RegWr   (wbu_io_in_bits_r_RegWr),	// @[src/main/ysyx_23060336.scala:90:31]
    .io_wen             (_ifu_io_valid),	// @[src/main/ysyx_23060336.scala:76:22]
    .io_RegWr           (_wbu_io_RegWr),
    .io_CsrWr           (_wbu_io_CsrWr),
    .io_rd              (_wbu_io_rd),
    .io_csr             (_wbu_io_csr),
    .io_result          (_wbu_io_result),
    .io_DataOut         (_wbu_io_DataOut)
  );
  ysyx_23060336_REG reg_0 (	// @[src/main/ysyx_23060336.scala:81:22]
    .clock       (clock),
    .io_raddr1   (_idu_io_rs1),	// @[src/main/ysyx_23060336.scala:77:22]
    .io_raddr2   (_idu_io_rs2),	// @[src/main/ysyx_23060336.scala:77:22]
    .io_rdata1   (_reg_io_rdata1),
    .io_rdata2   (_reg_io_rdata2),
    .io_wen      (_reg_io_wen_T),	// @[src/main/ysyx_23060336.scala:158:33]
    .io_waddr    (_wbu_io_rd),	// @[src/main/ysyx_23060336.scala:80:22]
    .io_wdata    (_wbu_io_DataOut),	// @[src/main/ysyx_23060336.scala:80:22]
    .io_halt_ret (io_halt_ret)
  );
  ysyx_23060336_CSR csr (	// @[src/main/ysyx_23060336.scala:82:22]
    .clock      (clock),
    .io_raddr   (_idu_io_csr),	// @[src/main/ysyx_23060336.scala:77:22]
    .io_rdata   (_csr_io_rdata),
    .io_wen     (_wbu_io_CsrWr),	// @[src/main/ysyx_23060336.scala:80:22]
    .io_waddr   (_wbu_io_csr),	// @[src/main/ysyx_23060336.scala:80:22]
    .io_wdata   (_wbu_io_result),	// @[src/main/ysyx_23060336.scala:80:22]
    .io_ecall   (_exu_io_ecall[0]),	// @[src/main/ysyx_23060336.scala:78:22, :217:17]
    .io_mepc_in (_exu_io_mepc_in),	// @[src/main/ysyx_23060336.scala:78:22]
    .io_mepc    (_csr_io_mepc),
    .io_mtvec   (_csr_io_mtvec),
    .io_mcause  (io_mcause),
    .io_mstatus (io_mstatus)
  );
  ysyx_23060336_XBAR xbar (	// @[src/main/ysyx_23060336.scala:83:22]
    .clock            (clock),
    .reset            (reset),
    .io_ifu_wready    (_xbar_io_ifu_wready),
    .io_ifu_araddr    (_ifu_io_axi_araddr),	// @[src/main/ysyx_23060336.scala:76:22]
    .io_ifu_rready    (_ifu_io_axi_rready),	// @[src/main/ysyx_23060336.scala:76:22]
    .io_ifu_rvalid    (_xbar_io_ifu_rvalid),
    .io_ifu_rdata     (_xbar_io_ifu_rdata),
    .io_lsu_awready   (io_lsuawready),
    .io_lsu_awvalid   (_lsu_io_axi_awvalid),	// @[src/main/ysyx_23060336.scala:79:22]
    .io_lsu_awaddr    (_lsu_io_axi_awaddr),	// @[src/main/ysyx_23060336.scala:79:22]
    .io_lsu_wready    (_xbar_io_lsu_wready),
    .io_lsu_wvalid    (_lsu_io_axi_wvalid),	// @[src/main/ysyx_23060336.scala:79:22]
    .io_lsu_wdata     (_lsu_io_axi_wdata),	// @[src/main/ysyx_23060336.scala:79:22]
    .io_lsu_wstrb     (_lsu_io_axi_wstrb),	// @[src/main/ysyx_23060336.scala:79:22]
    .io_lsu_arready   (io_lsuarready),
    .io_lsu_arvalid   (_lsu_io_axi_arvalid),	// @[src/main/ysyx_23060336.scala:79:22]
    .io_lsu_araddr    (_lsu_io_axi_araddr),	// @[src/main/ysyx_23060336.scala:79:22]
    .io_lsu_rready    (_lsu_io_axi_rready),	// @[src/main/ysyx_23060336.scala:79:22]
    .io_lsu_rvalid    (_xbar_io_lsu_rvalid),
    .io_lsu_rdata     (_xbar_io_lsu_rdata),
    .io_sdram_awready (_sdram_awready),	// @[src/main/ysyx_23060336.scala:84:22]
    .io_sdram_awvalid (_xbar_io_sdram_awvalid),
    .io_sdram_awaddr  (_xbar_io_sdram_awaddr),
    .io_sdram_wready  (_sdram_wready),	// @[src/main/ysyx_23060336.scala:84:22]
    .io_sdram_wvalid  (_xbar_io_sdram_wvalid),
    .io_sdram_wdata   (_xbar_io_sdram_wdata),
    .io_sdram_wstrb   (_xbar_io_sdram_wstrb),
    .io_sdram_bready  (_xbar_io_sdram_bready),
    .io_sdram_arready (_sdram_arready),	// @[src/main/ysyx_23060336.scala:84:22]
    .io_sdram_arvalid (_xbar_io_sdram_arvalid),
    .io_sdram_araddr  (_xbar_io_sdram_araddr),
    .io_sdram_arid    (_xbar_io_sdram_arid),
    .io_sdram_rready  (_xbar_io_sdram_rready),
    .io_sdram_rvalid  (_sdram_rvalid),	// @[src/main/ysyx_23060336.scala:84:22]
    .io_sdram_rdata   (_sdram_rdata),	// @[src/main/ysyx_23060336.scala:84:22]
    .io_clint_araddr  (_xbar_io_clint_araddr),
    .io_clint_rdata   (_clint_io_axi_rdata)	// @[src/main/ysyx_23060336.scala:85:22]
  );
  ysyx_23060336_SDRAM sdram (	// @[src/main/ysyx_23060336.scala:84:22]
    .clock   (clock),
    .reset   (reset),
    .awready (_sdram_awready),
    .awvalid (_xbar_io_sdram_awvalid),	// @[src/main/ysyx_23060336.scala:83:22]
    .awaddr  (_xbar_io_sdram_awaddr),	// @[src/main/ysyx_23060336.scala:83:22]
    .awid    (4'h2),	// @[src/main/ysyx_23060336.scala:79:22, :83:22, :84:22, :85:22]
    .awlen   (8'h0),	// @[src/main/ysyx_23060336.scala:76:22, :79:22, :83:22, :84:22, :85:22]
    .awsize  (3'h0),	// @[src/main/ysyx_23060336.scala:79:22, :83:22, :84:22, :85:22]
    .awburst (2'h1),	// @[src/main/ysyx_23060336.scala:76:22, :79:22, :83:22, :84:22, :85:22]
    .wready  (_sdram_wready),
    .wvalid  (_xbar_io_sdram_wvalid),	// @[src/main/ysyx_23060336.scala:83:22]
    .wdata   (_xbar_io_sdram_wdata),	// @[src/main/ysyx_23060336.scala:83:22]
    .wstrb   (_xbar_io_sdram_wstrb),	// @[src/main/ysyx_23060336.scala:83:22]
    .wlast   (1'h1),	// @[src/main/ysyx_23060336.scala:13:7, :76:22, :77:22, :78:22, :79:22, :80:22, :83:22, :84:22, :85:22]
    .bready  (_xbar_io_sdram_bready),	// @[src/main/ysyx_23060336.scala:83:22]
    .bvalid  (/* unused */),
    .bresp   (/* unused */),
    .bid     (/* unused */),
    .arready (_sdram_arready),
    .arvalid (_xbar_io_sdram_arvalid),	// @[src/main/ysyx_23060336.scala:83:22]
    .araddr  (_xbar_io_sdram_araddr),	// @[src/main/ysyx_23060336.scala:83:22]
    .arid    (_xbar_io_sdram_arid),	// @[src/main/ysyx_23060336.scala:83:22]
    .arlen   (8'h0),	// @[src/main/ysyx_23060336.scala:76:22, :79:22, :83:22, :84:22, :85:22]
    .arsize  (3'h2),	// @[src/main/ysyx_23060336.scala:76:22, :79:22, :83:22, :84:22, :85:22]
    .arburst (2'h1),	// @[src/main/ysyx_23060336.scala:76:22, :79:22, :83:22, :84:22, :85:22]
    .rready  (_xbar_io_sdram_rready),	// @[src/main/ysyx_23060336.scala:83:22]
    .rvalid  (_sdram_rvalid),
    .rresp   (/* unused */),
    .rdata   (_sdram_rdata),
    .rlast   (/* unused */),
    .rid     (/* unused */)
  );
  ysyx_23060336_CLINT clint (	// @[src/main/ysyx_23060336.scala:85:22]
    .clock         (clock),
    .reset         (reset),
    .io_axi_araddr (_xbar_io_clint_araddr),	// @[src/main/ysyx_23060336.scala:83:22]
    .io_axi_rdata  (_clint_io_axi_rdata)
  );
  ysyx_23060336_EBREAK ebreak (	// @[src/main/ysyx_23060336.scala:86:22]
    .clock   (clock),
    .reset   (reset),
    .isbreak (_ifu_io_pc),	// @[src/main/ysyx_23060336.scala:76:22]
    .halt    (_ebreak_halt)
  );
  assign io_halt = _ebreak_halt;	// @[src/main/ysyx_23060336.scala:13:7, :86:22]
  assign io_NPC = _exu_io_dnpc;	// @[src/main/ysyx_23060336.scala:13:7, :78:22]
  assign io_PC = _ifu_io_pc;	// @[src/main/ysyx_23060336.scala:13:7, :76:22]
  assign io_ifuvalid = _ifu_io_valid;	// @[src/main/ysyx_23060336.scala:13:7, :76:22]
  assign io_exuvalid = 1'h1;	// @[src/main/ysyx_23060336.scala:13:7, :76:22, :77:22, :78:22, :79:22, :80:22, :83:22, :84:22, :85:22]
  assign io_exuready = 1'h1;	// @[src/main/ysyx_23060336.scala:13:7, :76:22, :77:22, :78:22, :79:22, :80:22, :83:22, :84:22, :85:22]
  assign io_lsuarvalid = _lsu_io_axi_arvalid;	// @[src/main/ysyx_23060336.scala:13:7, :79:22]
  assign io_lsuawvalid = _lsu_io_axi_awvalid;	// @[src/main/ysyx_23060336.scala:13:7, :79:22]
  assign io_lsurready = _lsu_io_axi_rready;	// @[src/main/ysyx_23060336.scala:13:7, :79:22]
  assign io_lsurvalid = _xbar_io_lsu_rvalid;	// @[src/main/ysyx_23060336.scala:13:7, :83:22]
  assign io_lsuwready = _xbar_io_lsu_wready;	// @[src/main/ysyx_23060336.scala:13:7, :83:22]
  assign io_lsuwvalid = _lsu_io_axi_wvalid;	// @[src/main/ysyx_23060336.scala:13:7, :79:22]
  assign io_wbuvalid = 1'h1;	// @[src/main/ysyx_23060336.scala:13:7, :76:22, :77:22, :78:22, :79:22, :80:22, :83:22, :84:22, :85:22]
  assign io_wbuready = 1'h1;	// @[src/main/ysyx_23060336.scala:13:7, :76:22, :77:22, :78:22, :79:22, :80:22, :83:22, :84:22, :85:22]
  assign io_idurs1 = _idu_io_rs1;	// @[src/main/ysyx_23060336.scala:13:7, :77:22]
  assign io_idurs2 = _idu_io_rs2;	// @[src/main/ysyx_23060336.scala:13:7, :77:22]
  assign io_exurd = _exu_io_rd;	// @[src/main/ysyx_23060336.scala:13:7, :78:22]
  assign io_lsurd = _lsu_io_rd;	// @[src/main/ysyx_23060336.scala:13:7, :79:22]
  assign io_wburd = _wbu_io_rd;	// @[src/main/ysyx_23060336.scala:13:7, :80:22]
  assign io_lsuaraddr = _lsu_io_axi_araddr;	// @[src/main/ysyx_23060336.scala:13:7, :79:22]
  assign io_lsuawaddr = _lsu_io_axi_awaddr;	// @[src/main/ysyx_23060336.scala:13:7, :79:22]
  assign io_lsuwdata = _lsu_io_axi_wdata;	// @[src/main/ysyx_23060336.scala:13:7, :79:22]
  assign io_wburesult = _wbu_io_result;	// @[src/main/ysyx_23060336.scala:13:7, :80:22]
  assign io_regrs1 = _idu_io_rs1;	// @[src/main/ysyx_23060336.scala:13:7, :77:22]
  assign io_regrs2 = _idu_io_rs2;	// @[src/main/ysyx_23060336.scala:13:7, :77:22]
  assign io_regsrc1 = _reg_io_rdata1;	// @[src/main/ysyx_23060336.scala:13:7, :81:22]
  assign io_regsrc2 = _reg_io_rdata2;	// @[src/main/ysyx_23060336.scala:13:7, :81:22]
  assign io_regrd = _wbu_io_DataOut;	// @[src/main/ysyx_23060336.scala:13:7, :80:22]
  assign io_regwen = {31'h0, _reg_io_wen_T};	// @[src/main/ysyx_23060336.scala:13:7, :152:17, :158:33]
  assign io_regwaddr = {27'h0, _wbu_io_rd};	// @[src/main/ysyx_23060336.scala:13:7, :80:22, :153:17]
endmodule


// ----- 8< ----- FILE "./sdram.sv" ----- 8< -----

// Generated by CIRCT firtool-1.62.0
import "DPI-C" function int pmem_write(input int awaddr, input int wdata, input int wstrb); 
  import "DPI-C" function int pmem_read(input int araddr);
 module ysyx_23060336_SDRAM(
   input             clock,
   input             reset,
   output reg        awready,
   input             awvalid,
   input      [31:0] awaddr,
   input      [3:0]  awid,
   input      [7:0]  awlen,
   input      [2:0]  awsize,
   input      [1:0]  awburst,
   output reg        wready,
   input             wvalid,
   input      [31:0] wdata,
   input      [3:0]  wstrb,
   input             wlast,
   input             bready,
   output reg        bvalid,
   output reg [1:0]  bresp,
   output reg [3:0]  bid,
   output reg        arready,
   input             arvalid,
   input      [31:0] araddr,
   input      [3:0]  arid,
   input      [7:0]  arlen,
   input      [2:0]  arsize,
   input      [1:0]  arburst,
   input             rready,
   output reg        rvalid,
   output reg [1:0]  rresp,
   output reg [31:0] rdata,
   output reg        rlast,
   output reg [3:0]  rid     
 );

 //reg [31:0] data_memory [0:255];
 
 reg  [31:0] resp;
 reg  [4:0]  RLFSR;
 reg  [4:0]  WLFSR;
 wire [31:0] strb;

 assign awready = 1'b1;
 assign arready = 1'b1;
 assign bid     = 4'b1;
 assign rresp   = 2'b0;
 assign rlast   = 1'b1;
 assign rid     = 4'b10;
 assign bresp   = resp[1:0];
 assign strb    = {{28{1'b0}},wstrb};

 always@(posedge clock) begin
   if(reset) begin
     wready  <= 1'b1;
     bvalid  <= 1'b0;
     rvalid  <= 1'b0;
   end else begin

     if(arvalid) begin
       if(RLFSR >= 5'b11) begin
         RLFSR  <= 5'b0;
         rvalid <= 1'b1;
         rdata  <= pmem_read(araddr);
     //  rdata   <= data_memory[araddr];
       end else begin
         RLFSR  <= RLFSR + 5'b1;
         rdata  <= rdata;
         rvalid <= 1'b0;
       end
     end else begin
       RLFSR <= 5'b0;
       rvalid <= 1'b0;
       rdata <= rdata;
     end

     if(wvalid) begin
       if(WLFSR >= 5'b10010) begin
         WLFSR  <= 5'b0;
         resp   <= pmem_write(awaddr, wdata, strb);
         wready <= 1'b1;
     //  data_memory[awaddr] <= wdata;
       end else begin
         WLFSR  <= WLFSR + 5'b1;
         wready <= 1'b0;
         resp   <= 32'b10;
       end
     end else begin
       WLFSR  <= 5'b0;
       wready <= 1'b0;
       resp   <= resp;
     end
   end
 end

 endmodule
  

// ----- 8< ----- FILE "./ebreak.sv" ----- 8< -----

// Generated by CIRCT firtool-1.62.0
import "DPI-C" function int set_npc_state(input int isbreak);
 module ysyx_23060336_EBREAK(
   input clock,
   input reset,
   input [31:0] isbreak,
   output reg halt
 );

 reg [31:0] tmp_halt;

 assign halt = tmp_halt[0];

 always@(posedge clock) begin
   if(reset) begin
     tmp_halt = 32'b0;
   end else begin
     tmp_halt = set_npc_state(isbreak);
   end 
 end

 endmodule
    

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----

